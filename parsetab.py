
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ATRIBUIR BOOLEAN BREAK CASE CHAR CLASS COMMA CONST DEFAULT DIVIDIR DO ELSE FALSE FINAL FLOAT FOR FUNCTION ID IF IGUAL INT INTEGER LCHAV LCON LITERAL_STRING LPAREN MAIOR MAIORI MENOR MENORI NEG NOT NULL NUMBER OR PCOMMA PONTOS RCHAV RCON RESTO RETURN RPAREN SOMA SOMASOMA STRING SUBSUB SUBTRAIR SWITCH TRUE VAR VEZES VOID WHILE topLevel : variableDeclaration PCOMMA\n                 | variableDeclaration PCOMMA topLevel\n                 | functionSignature functionBody\n                 | functionSignature functionBody topLevel\n                  variableDeclaration : declaredIdentifier\n                            | variableDeclaration COMMA ID  declaredIdentifier : type ID  type : VAR\n             | INT\n             | FLOAT\n             | CHAR \n             | STRING\n             | VOID\n             | BOOLEAN functionSignature : ID formalParameterList\n                          | type ID formalParameterList  formalParameterList : LPAREN RPAREN \n                            | LPAREN normalFormalParameters RPAREN  normalFormalParameters : simpleFormalParameter \n                               | simpleFormalParameter COMMA normalFormalParameters  simpleFormalParameter : type ID\n                              | expression functionBody : block block : LCHAV statements RCHAV              \n              | LCHAV RCHAV statements : statement statements\n                   | statement  statement : nonLabelledStatement  nonLabelledStatement : block\n                             | expressionStatement\n                             | localVariableDeclaration\n                             | returnStatement\n                             | ifStatement\n                             | forStatement\n                             | whileStatement\n                             | doStatement\n                             | switchStatement \n                             | breakStatement  localVariableDeclaration : initializedVariableDeclaration PCOMMA initializedVariableDeclaration : declaredIdentifier\n                                       | declaredIdentifier ATRIBUIR expression\n                                       | literal ATRIBUIR expression\n                                       | initializedVariableDeclaration COMMA ID  expressionStatement : PCOMMA\n                            | expression PCOMMA  expression : orExpression orExpression : andExpression\n                     | orExpression OR andExpressionandExpression : equalityExpression\n                     | andExpression AND equalityExpressionequalityExpression : relacionalExpression\n                          | equalityExpression IGUAL relacionalExpression \n                          | equalityExpression NEG relacionalExpression relacionalExpression : addExpression\n                    | relacionalExpression MENOR addExpression\n                    | relacionalExpression MAIOR addExpression\n                    | relacionalExpression MENORI addExpression\n                    | relacionalExpression MAIORI addExpressionaddExpression : multExpression \n                     | addExpression SOMA multExpression\n                     | addExpression SUBTRAIR multExpressionmultExpression : unaryExpression \n                      | multExpression VEZES unaryExpression\n                      | multExpression DIVIDIR unaryExpression\n                      | multExpression RESTO unaryExpressionunaryExpression : primary\n                       | functionCall\n                       | unaryExpression SOMASOMA\n                       | unaryExpression SUBSUBfunctionCall : functionSignature primary : literal \n                | LPAREN expression RPAREN  literal : ID \n                | booleanLiteral \n                | listLiteralID\n                | listLiteral\n                | NUMBER\n                | FLOAT\n                | LITERAL_STRINGlistLiteral : LCON expressionList RCON listLiteralID : ID listLiteral booleanLiteral : TRUE \n                       | FALSE  expressionList : expression COMMA\n                       | expression\n                       | expression COMMA expressionList  returnStatement : RETURN PCOMMA \n                        | RETURN expression PCOMMAifStatement : IF LPAREN expression RPAREN statement \n                   | IF LPAREN expression RPAREN statement ELSE statement  forStatement : FOR LPAREN forLoopParts RPAREN statement  forLoopParts : forInitializerStatement PCOMMA \n                     | forInitializerStatement PCOMMA expressionList \n                     | forInitializerStatement expression PCOMMA \n                     | forInitializerStatement expression PCOMMA expressionList  forInitializerStatement : localVariableDeclaration \n                                | PCOMMA \n                                | expression PCOMMA  whileStatement : WHILE LPAREN expression RPAREN statement doStatement : DO statement WHILE LPAREN expression RPAREN PCOMMA  switchStatement : SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV\n                        | SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV switchCaseRepetition : switchCase switchCaseRepetition\n                             | switchCase  switchCase : CASE expression PONTOS statements  defaultCase : DEFAULT PONTOS statements  breakStatement : BREAK PCOMMA \n                       | BREAK ID PCOMMA'
    
_lr_action_items = {'ID':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,49,55,60,65,76,79,82,84,85,86,87,89,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[5,21,-8,-9,-10,-11,-12,-13,-14,5,23,5,-23,50,77,-25,50,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,77,77,50,97,103,-10,77,121,-10,-24,-45,-39,122,-87,124,77,50,77,77,-107,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-88,77,-97,-96,-108,77,50,50,77,-98,50,77,-89,-91,77,-99,50,77,-90,-100,-101,-102,50,50,]),'VAR':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[7,7,7,-23,7,7,-25,7,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,7,7,7,7,-24,-45,-39,-87,7,7,7,7,-107,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-88,7,-97,-96,-108,7,7,7,7,-98,7,7,-89,-91,7,-99,7,7,-90,-100,-101,-102,7,7,]),'INT':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[8,8,8,-23,8,8,-25,8,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,8,8,8,8,-24,-45,-39,-87,8,8,8,8,-107,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-88,8,-97,-96,-108,8,8,8,8,-98,8,8,-89,-91,8,-99,8,8,-90,-100,-101,-102,8,8,]),'FLOAT':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[9,9,9,-23,60,79,-25,60,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,60,60,60,60,-24,-45,-39,-87,60,60,60,60,-107,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,79,-88,60,-97,-96,-108,60,60,60,60,-98,60,60,-89,-91,60,-99,60,60,-90,-100,-101,-102,60,60,]),'CHAR':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[10,10,10,-23,10,10,-25,10,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,10,10,10,10,-24,-45,-39,-87,10,10,10,10,-107,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-88,10,-97,-96,-108,10,10,10,10,-98,10,10,-89,-91,10,-99,10,10,-90,-100,-101,-102,10,10,]),'STRING':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[11,11,11,-23,11,11,-25,11,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,11,11,11,11,-24,-45,-39,-87,11,11,11,11,-107,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-88,11,-97,-96,-108,11,11,11,11,-98,11,11,-89,-91,11,-99,11,11,-90,-100,-101,-102,11,11,]),'VOID':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[12,12,12,-23,12,12,-25,12,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,12,12,12,12,-24,-45,-39,-87,12,12,12,12,-107,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-88,12,-97,-96,-108,12,12,12,12,-98,12,12,-89,-91,12,-99,12,12,-90,-100,-101,-102,12,12,]),'BOOLEAN':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[13,13,13,-23,13,13,-25,13,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,13,13,13,13,-24,-45,-39,-87,13,13,13,13,-107,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-88,13,-97,-96,-108,13,13,13,13,-98,13,13,-89,-91,13,-99,13,13,-90,-100,-101,-102,13,13,]),'$end':([1,14,16,17,22,24,26,82,],[0,-1,-3,-23,-2,-4,-25,-24,]),'PCOMMA':([2,4,18,19,21,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,77,80,81,82,84,85,87,88,92,96,97,98,103,117,118,119,122,123,126,128,129,130,131,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,152,154,155,157,158,159,163,164,167,170,172,176,177,178,183,184,185,],[14,-5,39,-15,-7,-6,-25,39,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,84,85,87,39,96,-73,-46,-40,-71,-47,-74,-75,-76,-77,-78,-79,-49,-82,-83,-51,-54,-59,-62,-66,-67,-70,-17,-73,-71,-16,-24,-45,-39,-87,123,129,-107,135,-81,-7,-68,-69,-18,-43,-88,-72,156,-97,158,-96,-108,-48,-41,-42,-50,-52,-53,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,39,39,166,-98,39,-89,-91,-99,39,177,-90,-100,-101,-102,39,39,]),'COMMA':([2,4,19,21,23,41,51,52,54,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,75,77,78,79,80,81,98,103,107,117,118,119,121,122,126,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,152,],[15,-5,-15,-7,-6,86,-46,-40,-47,-74,-75,-76,-77,-78,-79,-49,-82,-83,-51,-54,-59,-62,-66,-67,-70,-17,120,-73,-22,-78,-71,-16,-81,-7,143,-68,-69,-18,-21,-43,-72,-48,-41,-42,-50,-52,-53,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,]),'LCHAV':([3,18,19,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,73,81,82,84,85,87,96,119,123,135,154,155,159,161,163,164,167,170,176,177,178,183,184,185,],[18,18,-15,-25,18,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,18,-17,-16,-24,-45,-39,-87,-107,-18,-88,-108,18,18,18,169,-89,-91,-99,18,-90,-100,-101,-102,18,18,]),'LPAREN':([5,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,50,65,77,82,84,85,87,90,92,93,95,96,99,100,101,102,103,104,105,108,109,110,111,112,113,114,115,116,120,121,123,124,128,129,131,133,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[20,44,44,20,-25,44,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,44,90,44,92,93,44,95,20,44,20,-24,-45,-39,-87,44,44,44,44,-107,44,44,44,44,20,44,44,44,44,44,44,44,44,44,44,44,44,20,-88,20,44,-97,-96,160,-108,44,44,44,44,-98,44,44,-89,-91,44,-99,44,44,-90,-100,-101,-102,44,44,]),'RCHAV':([18,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,82,83,84,85,87,96,123,135,163,164,167,173,174,176,177,178,179,181,183,186,187,],[26,82,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,-24,-26,-45,-39,-87,-107,-88,-108,-89,-91,-99,178,-104,-90,-100,-101,183,-103,-102,-106,-105,]),'RETURN':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,82,84,85,87,96,123,135,154,155,159,163,164,167,170,176,177,178,183,184,185,],[42,-25,42,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,42,-24,-45,-39,-87,-107,-88,-108,42,42,42,-89,-91,-99,42,-90,-100,-101,-102,42,42,]),'IF':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,82,84,85,87,96,123,135,154,155,159,163,164,167,170,176,177,178,183,184,185,],[43,-25,43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,43,-24,-45,-39,-87,-107,-88,-108,43,43,43,-89,-91,-99,43,-90,-100,-101,-102,43,43,]),'FOR':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,82,84,85,87,96,123,135,154,155,159,163,164,167,170,176,177,178,183,184,185,],[45,-25,45,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,45,-24,-45,-39,-87,-107,-88,-108,45,45,45,-89,-91,-99,45,-90,-100,-101,-102,45,45,]),'WHILE':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,82,84,85,87,94,96,123,135,154,155,159,163,164,167,170,176,177,178,183,184,185,],[46,-25,46,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,46,-24,-45,-39,-87,133,-107,-88,-108,46,46,46,-89,-91,-99,46,-90,-100,-101,-102,46,46,]),'DO':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,82,84,85,87,96,123,135,154,155,159,163,164,167,170,176,177,178,183,184,185,],[47,-25,47,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,47,-24,-45,-39,-87,-107,-88,-108,47,47,47,-89,-91,-99,47,-90,-100,-101,-102,47,47,]),'SWITCH':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,82,84,85,87,96,123,135,154,155,159,163,164,167,170,176,177,178,183,184,185,],[48,-25,48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,48,-24,-45,-39,-87,-107,-88,-108,48,48,48,-89,-91,-99,48,-90,-100,-101,-102,48,48,]),'BREAK':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,82,84,85,87,96,123,135,154,155,159,163,164,167,170,176,177,178,183,184,185,],[49,-25,49,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,49,-24,-45,-39,-87,-107,-88,-108,49,49,49,-89,-91,-99,49,-90,-100,-101,-102,49,49,]),'NUMBER':([18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[59,59,-25,59,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,59,59,59,59,-24,-45,-39,-87,59,59,59,59,-107,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-88,59,-97,-96,-108,59,59,59,59,-98,59,59,-89,-91,59,-99,59,59,-90,-100,-101,-102,59,59,]),'LITERAL_STRING':([18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[61,61,-25,61,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,61,61,61,61,-24,-45,-39,-87,61,61,61,61,-107,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-88,61,-97,-96,-108,61,61,61,61,-98,61,61,-89,-91,61,-99,61,61,-90,-100,-101,-102,61,61,]),'TRUE':([18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[63,63,-25,63,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,63,63,63,63,-24,-45,-39,-87,63,63,63,63,-107,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-88,63,-97,-96,-108,63,63,63,63,-98,63,63,-89,-91,63,-99,63,63,-90,-100,-101,-102,63,63,]),'FALSE':([18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,65,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[64,64,-25,64,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,64,64,64,64,-24,-45,-39,-87,64,64,64,64,-107,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-88,64,-97,-96,-108,64,64,64,64,-98,64,64,-89,-91,64,-99,64,64,-90,-100,-101,-102,64,64,]),'LCON':([18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,50,65,77,82,84,85,87,90,92,93,95,96,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,123,128,129,131,135,143,154,155,156,158,159,160,163,164,166,167,170,175,176,177,178,183,184,185,],[65,65,-25,65,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,65,65,65,65,65,65,-24,-45,-39,-87,65,65,65,65,-107,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-88,65,-97,-96,-108,65,65,65,65,-98,65,65,-89,-91,65,-99,65,65,-90,-100,-101,-102,65,65,]),'SOMASOMA':([19,50,53,56,57,58,59,60,61,63,64,69,70,71,72,73,77,79,80,81,98,117,118,119,126,142,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,117,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,-80,117,117,117,]),'SUBSUB':([19,50,53,56,57,58,59,60,61,63,64,69,70,71,72,73,77,79,80,81,98,117,118,119,126,142,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,118,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,-80,118,118,118,]),'VEZES':([19,50,53,56,57,58,59,60,61,63,64,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,142,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,114,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,-80,114,114,-63,-64,-65,]),'DIVIDIR':([19,50,53,56,57,58,59,60,61,63,64,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,142,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,115,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,-80,115,115,-63,-64,-65,]),'RESTO':([19,50,53,56,57,58,59,60,61,63,64,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,142,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,116,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,-80,116,116,-63,-64,-65,]),'SOMA':([19,50,53,56,57,58,59,60,61,63,64,67,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,142,144,145,146,147,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,112,-59,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,-80,112,112,112,112,-60,-61,-63,-64,-65,]),'SUBTRAIR':([19,50,53,56,57,58,59,60,61,63,64,67,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,142,144,145,146,147,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,113,-59,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,-80,113,113,113,113,-60,-61,-63,-64,-65,]),'MENOR':([19,50,53,56,57,58,59,60,61,63,64,66,67,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,140,141,142,144,145,146,147,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,108,-54,-59,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,108,108,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,]),'MAIOR':([19,50,53,56,57,58,59,60,61,63,64,66,67,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,140,141,142,144,145,146,147,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,109,-54,-59,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,109,109,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,]),'MENORI':([19,50,53,56,57,58,59,60,61,63,64,66,67,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,140,141,142,144,145,146,147,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,110,-54,-59,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,110,110,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,]),'MAIORI':([19,50,53,56,57,58,59,60,61,63,64,66,67,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,140,141,142,144,145,146,147,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,-82,-83,111,-54,-59,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,111,111,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,]),'IGUAL':([19,50,53,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,139,140,141,142,144,145,146,147,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,104,-82,-83,-51,-54,-59,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,104,-52,-53,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,]),'NEG':([19,50,53,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,139,140,141,142,144,145,146,147,148,149,150,151,152,],[-15,-73,-71,-74,-75,-76,-77,-78,-79,105,-82,-83,-51,-54,-59,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,105,-52,-53,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,]),'AND':([19,50,53,54,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,136,139,140,141,142,144,145,146,147,148,149,150,151,152,],[-15,-73,-71,102,-74,-75,-76,-77,-78,-79,-49,-82,-83,-51,-54,-59,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,102,-50,-52,-53,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,]),'OR':([19,50,51,53,54,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,77,79,80,81,98,117,118,119,126,136,139,140,141,142,144,145,146,147,148,149,150,151,152,],[-15,-73,99,-71,-47,-74,-75,-76,-77,-78,-79,-49,-82,-83,-51,-54,-59,-62,-66,-67,-70,-17,-73,-78,-71,-16,-81,-68,-69,-18,-72,-48,-50,-52,-53,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,]),'RPAREN':([19,20,51,54,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,91,98,107,117,118,119,121,125,126,127,132,134,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,162,165,166,168,171,],[-15,73,-46,-47,-74,-75,-76,-77,-78,-79,-49,-82,-83,-51,-54,-59,-62,-66,-67,-70,-17,119,-19,-73,-22,-78,-71,-16,126,-81,-85,-68,-69,-18,-21,154,-72,155,159,161,-48,-50,-52,-53,-80,-84,-55,-56,-57,-58,-60,-61,-63,-64,-65,-20,-92,-86,-93,-94,172,-95,]),'RCON':([19,51,54,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,77,80,81,98,106,107,117,118,119,126,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,162,],[-15,-46,-47,-74,-75,-76,-77,-78,-79,-49,-82,-83,-51,-54,-59,-62,-66,-67,-70,-17,-73,-71,-16,-81,142,-85,-68,-69,-18,-72,-48,-50,-52,-53,-80,-84,-55,-56,-57,-58,-60,-61,-63,-64,-65,-86,]),'PONTOS':([19,51,54,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,77,80,81,98,117,118,119,126,136,139,140,141,142,144,145,146,147,148,149,150,151,152,180,182,],[-15,-46,-47,-74,-75,-76,-77,-78,-79,-49,-82,-83,-51,-54,-59,-62,-66,-67,-70,-17,-73,-71,-16,-81,-68,-69,-18,-72,-48,-50,-52,-53,-80,-55,-56,-57,-58,-60,-61,-63,-64,-65,184,185,]),'CASE':([26,27,28,29,30,31,32,33,34,35,36,37,38,39,82,83,84,85,87,96,123,135,163,164,167,169,174,176,177,178,183,187,],[-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,-24,-26,-45,-39,-87,-107,-88,-108,-89,-91,-99,175,175,-90,-100,-101,-102,-105,]),'DEFAULT':([26,27,28,29,30,31,32,33,34,35,36,37,38,39,82,83,84,85,87,96,123,135,163,164,167,173,174,176,177,178,181,183,187,],[-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,-24,-26,-45,-39,-87,-107,-88,-108,-89,-91,-99,180,-104,-90,-100,-101,-103,-102,-105,]),'ELSE':([26,28,29,30,31,32,33,34,35,36,37,38,39,82,84,85,87,96,123,135,163,164,167,176,177,178,183,],[-25,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,-24,-45,-39,-87,-107,-88,-108,170,-91,-99,-90,-100,-101,-102,]),'ATRIBUIR':([50,52,53,56,57,58,59,60,61,63,64,98,103,142,],[-73,100,101,-74,-75,-76,-77,-78,-79,-82,-83,-81,-7,-80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'topLevel':([0,14,16,],[1,22,24,]),'variableDeclaration':([0,14,16,],[2,2,2,]),'functionSignature':([0,14,16,18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,128,143,154,155,156,159,160,166,170,175,184,185,],[3,3,3,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'declaredIdentifier':([0,14,16,18,27,47,92,154,155,159,170,184,185,],[4,4,4,52,52,52,52,52,52,52,52,52,52,]),'type':([0,14,16,18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,128,143,154,155,156,159,160,166,170,175,184,185,],[6,6,6,55,76,55,89,89,55,89,89,55,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,76,89,89,55,55,89,55,89,89,55,89,55,55,]),'functionBody':([3,],[16,]),'block':([3,18,27,47,154,155,159,170,184,185,],[17,29,29,29,29,29,29,29,29,29,]),'formalParameterList':([5,21,50,77,103,121,124,],[19,81,19,19,81,81,81,]),'statements':([18,27,184,185,],[25,83,186,187,]),'statement':([18,27,47,154,155,159,170,184,185,],[27,27,94,163,164,167,176,27,27,]),'nonLabelledStatement':([18,27,47,154,155,159,170,184,185,],[28,28,28,28,28,28,28,28,28,]),'expressionStatement':([18,27,47,154,155,159,170,184,185,],[30,30,30,30,30,30,30,30,30,]),'localVariableDeclaration':([18,27,47,92,154,155,159,170,184,185,],[31,31,31,131,31,31,31,31,31,31,]),'returnStatement':([18,27,47,154,155,159,170,184,185,],[32,32,32,32,32,32,32,32,32,]),'ifStatement':([18,27,47,154,155,159,170,184,185,],[33,33,33,33,33,33,33,33,33,]),'forStatement':([18,27,47,154,155,159,170,184,185,],[34,34,34,34,34,34,34,34,34,]),'whileStatement':([18,27,47,154,155,159,170,184,185,],[35,35,35,35,35,35,35,35,35,]),'doStatement':([18,27,47,154,155,159,170,184,185,],[36,36,36,36,36,36,36,36,36,]),'switchStatement':([18,27,47,154,155,159,170,184,185,],[37,37,37,37,37,37,37,37,37,]),'breakStatement':([18,27,47,154,155,159,170,184,185,],[38,38,38,38,38,38,38,38,38,]),'expression':([18,20,27,42,44,47,65,90,92,93,95,100,101,120,128,143,154,155,156,159,160,166,170,175,184,185,],[40,78,40,88,91,40,107,125,130,132,134,137,138,78,157,107,40,40,107,40,168,107,40,182,40,40,]),'initializedVariableDeclaration':([18,27,47,92,154,155,159,170,184,185,],[41,41,41,41,41,41,41,41,41,41,]),'orExpression':([18,20,27,42,44,47,65,90,92,93,95,100,101,120,128,143,154,155,156,159,160,166,170,175,184,185,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'literal':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,128,143,154,155,156,159,160,166,170,175,184,185,],[53,80,53,80,80,53,80,80,53,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,53,53,80,53,80,80,53,80,53,53,]),'andExpression':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,120,128,143,154,155,156,159,160,166,170,175,184,185,],[54,54,54,54,54,54,54,54,54,54,54,136,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'booleanLiteral':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,128,143,154,155,156,159,160,166,170,175,184,185,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'listLiteralID':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,128,143,154,155,156,159,160,166,170,175,184,185,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'listLiteral':([18,20,27,42,44,47,50,65,77,90,92,93,95,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,128,143,154,155,156,159,160,166,170,175,184,185,],[58,58,58,58,58,58,98,58,98,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'equalityExpression':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,120,128,143,154,155,156,159,160,166,170,175,184,185,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,139,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'relacionalExpression':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,120,128,143,154,155,156,159,160,166,170,175,184,185,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,140,141,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'addExpression':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,108,109,110,111,120,128,143,154,155,156,159,160,166,170,175,184,185,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,144,145,146,147,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'multExpression':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,108,109,110,111,112,113,120,128,143,154,155,156,159,160,166,170,175,184,185,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,148,149,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'unaryExpression':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,128,143,154,155,156,159,160,166,170,175,184,185,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,150,151,152,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'primary':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,128,143,154,155,156,159,160,166,170,175,184,185,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'functionCall':([18,20,27,42,44,47,65,90,92,93,95,99,100,101,102,104,105,108,109,110,111,112,113,114,115,116,120,128,143,154,155,156,159,160,166,170,175,184,185,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'normalFormalParameters':([20,120,],[74,153,]),'simpleFormalParameter':([20,120,],[75,75,]),'expressionList':([65,143,156,166,],[106,162,165,171,]),'forLoopParts':([92,],[127,]),'forInitializerStatement':([92,],[128,]),'switchCaseRepetition':([169,174,],[173,181,]),'switchCase':([169,174,],[174,174,]),'defaultCase':([173,],[179,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> topLevel","S'",1,None,None,None),
  ('topLevel -> variableDeclaration PCOMMA','topLevel',2,'p_topLevelDefinition','DartParser.py',8),
  ('topLevel -> variableDeclaration PCOMMA topLevel','topLevel',3,'p_topLevelDefinition','DartParser.py',9),
  ('topLevel -> functionSignature functionBody','topLevel',2,'p_topLevelDefinition','DartParser.py',10),
  ('topLevel -> functionSignature functionBody topLevel','topLevel',3,'p_topLevelDefinition','DartParser.py',11),
  ('variableDeclaration -> declaredIdentifier','variableDeclaration',1,'p_variableDeclaration','DartParser.py',24),
  ('variableDeclaration -> variableDeclaration COMMA ID','variableDeclaration',3,'p_variableDeclaration','DartParser.py',25),
  ('declaredIdentifier -> type ID','declaredIdentifier',2,'p_declaredIdentifier','DartParser.py',33),
  ('type -> VAR','type',1,'p_type','DartParser.py',38),
  ('type -> INT','type',1,'p_type','DartParser.py',39),
  ('type -> FLOAT','type',1,'p_type','DartParser.py',40),
  ('type -> CHAR','type',1,'p_type','DartParser.py',41),
  ('type -> STRING','type',1,'p_type','DartParser.py',42),
  ('type -> VOID','type',1,'p_type','DartParser.py',43),
  ('type -> BOOLEAN','type',1,'p_type','DartParser.py',44),
  ('functionSignature -> ID formalParameterList','functionSignature',2,'p_functionSignature','DartParser.py',48),
  ('functionSignature -> type ID formalParameterList','functionSignature',3,'p_functionSignature','DartParser.py',49),
  ('formalParameterList -> LPAREN RPAREN','formalParameterList',2,'p_formalParameterList','DartParser.py',57),
  ('formalParameterList -> LPAREN normalFormalParameters RPAREN','formalParameterList',3,'p_formalParameterList','DartParser.py',58),
  ('normalFormalParameters -> simpleFormalParameter','normalFormalParameters',1,'p_normalFormalParameters','DartParser.py',66),
  ('normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters','normalFormalParameters',3,'p_normalFormalParameters','DartParser.py',67),
  ('simpleFormalParameter -> type ID','simpleFormalParameter',2,'p_simlpleFormalParameter','DartParser.py',75),
  ('simpleFormalParameter -> expression','simpleFormalParameter',1,'p_simlpleFormalParameter','DartParser.py',76),
  ('functionBody -> block','functionBody',1,'p_functionBody','DartParser.py',84),
  ('block -> LCHAV statements RCHAV','block',3,'p_block','DartParser.py',89),
  ('block -> LCHAV RCHAV','block',2,'p_block','DartParser.py',90),
  ('statements -> statement statements','statements',2,'p_statements','DartParser.py',97),
  ('statements -> statement','statements',1,'p_statements','DartParser.py',98),
  ('statement -> nonLabelledStatement','statement',1,'p_statement','DartParser.py',105),
  ('nonLabelledStatement -> block','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',110),
  ('nonLabelledStatement -> expressionStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',111),
  ('nonLabelledStatement -> localVariableDeclaration','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',112),
  ('nonLabelledStatement -> returnStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',113),
  ('nonLabelledStatement -> ifStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',114),
  ('nonLabelledStatement -> forStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',115),
  ('nonLabelledStatement -> whileStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',116),
  ('nonLabelledStatement -> doStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',117),
  ('nonLabelledStatement -> switchStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',118),
  ('nonLabelledStatement -> breakStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',119),
  ('localVariableDeclaration -> initializedVariableDeclaration PCOMMA','localVariableDeclaration',2,'p_localVariableDeclaration','DartParser.py',143),
  ('initializedVariableDeclaration -> declaredIdentifier','initializedVariableDeclaration',1,'p_initializedVariableDeclaration','DartParser.py',148),
  ('initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParser.py',149),
  ('initializedVariableDeclaration -> literal ATRIBUIR expression','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParser.py',150),
  ('initializedVariableDeclaration -> initializedVariableDeclaration COMMA ID','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParser.py',151),
  ('expressionStatement -> PCOMMA','expressionStatement',1,'p_expressionStatement','DartParser.py',163),
  ('expressionStatement -> expression PCOMMA','expressionStatement',2,'p_expressionStatement','DartParser.py',164),
  ('expression -> orExpression','expression',1,'p_expression','DartParser.py',172),
  ('orExpression -> andExpression','orExpression',1,'p_orExpression','DartParser.py',176),
  ('orExpression -> orExpression OR andExpression','orExpression',3,'p_orExpression','DartParser.py',177),
  ('andExpression -> equalityExpression','andExpression',1,'p_andExpression','DartParser.py',185),
  ('andExpression -> andExpression AND equalityExpression','andExpression',3,'p_andExpression','DartParser.py',186),
  ('equalityExpression -> relacionalExpression','equalityExpression',1,'p_equalityExpression','DartParser.py',193),
  ('equalityExpression -> equalityExpression IGUAL relacionalExpression','equalityExpression',3,'p_equalityExpression','DartParser.py',194),
  ('equalityExpression -> equalityExpression NEG relacionalExpression','equalityExpression',3,'p_equalityExpression','DartParser.py',195),
  ('relacionalExpression -> addExpression','relacionalExpression',1,'p_relacionalExpression','DartParser.py',204),
  ('relacionalExpression -> relacionalExpression MENOR addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',205),
  ('relacionalExpression -> relacionalExpression MAIOR addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',206),
  ('relacionalExpression -> relacionalExpression MENORI addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',207),
  ('relacionalExpression -> relacionalExpression MAIORI addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',208),
  ('addExpression -> multExpression','addExpression',1,'p_addExpression','DartParser.py',216),
  ('addExpression -> addExpression SOMA multExpression','addExpression',3,'p_addExpression','DartParser.py',217),
  ('addExpression -> addExpression SUBTRAIR multExpression','addExpression',3,'p_addExpression','DartParser.py',218),
  ('multExpression -> unaryExpression','multExpression',1,'p_multExpression','DartParser.py',226),
  ('multExpression -> multExpression VEZES unaryExpression','multExpression',3,'p_multExpression','DartParser.py',227),
  ('multExpression -> multExpression DIVIDIR unaryExpression','multExpression',3,'p_multExpression','DartParser.py',228),
  ('multExpression -> multExpression RESTO unaryExpression','multExpression',3,'p_multExpression','DartParser.py',229),
  ('unaryExpression -> primary','unaryExpression',1,'p_unaryExpression','DartParser.py',237),
  ('unaryExpression -> functionCall','unaryExpression',1,'p_unaryExpression','DartParser.py',238),
  ('unaryExpression -> unaryExpression SOMASOMA','unaryExpression',2,'p_unaryExpression','DartParser.py',239),
  ('unaryExpression -> unaryExpression SUBSUB','unaryExpression',2,'p_unaryExpression','DartParser.py',240),
  ('functionCall -> functionSignature','functionCall',1,'p_functionCall','DartParser.py',251),
  ('primary -> literal','primary',1,'p_primary','DartParser.py',255),
  ('primary -> LPAREN expression RPAREN','primary',3,'p_primary','DartParser.py',256),
  ('literal -> ID','literal',1,'p_literal','DartParser.py',263),
  ('literal -> booleanLiteral','literal',1,'p_literal','DartParser.py',264),
  ('literal -> listLiteralID','literal',1,'p_literal','DartParser.py',265),
  ('literal -> listLiteral','literal',1,'p_literal','DartParser.py',266),
  ('literal -> NUMBER','literal',1,'p_literal','DartParser.py',267),
  ('literal -> FLOAT','literal',1,'p_literal','DartParser.py',268),
  ('literal -> LITERAL_STRING','literal',1,'p_literal','DartParser.py',269),
  ('listLiteral -> LCON expressionList RCON','listLiteral',3,'p_listLiteral','DartParser.py',285),
  ('listLiteralID -> ID listLiteral','listLiteralID',2,'p_listLiteralID','DartParser.py',289),
  ('booleanLiteral -> TRUE','booleanLiteral',1,'p_booleanLiteral','DartParser.py',293),
  ('booleanLiteral -> FALSE','booleanLiteral',1,'p_booleanLiteral','DartParser.py',294),
  ('expressionList -> expression COMMA','expressionList',2,'p_expresionList','DartParser.py',302),
  ('expressionList -> expression','expressionList',1,'p_expresionList','DartParser.py',303),
  ('expressionList -> expression COMMA expressionList','expressionList',3,'p_expresionList','DartParser.py',304),
  ('returnStatement -> RETURN PCOMMA','returnStatement',2,'p_returnStatement','DartParser.py',312),
  ('returnStatement -> RETURN expression PCOMMA','returnStatement',3,'p_returnStatement','DartParser.py',313),
  ('ifStatement -> IF LPAREN expression RPAREN statement','ifStatement',5,'p_ifStatement','DartParser.py',318),
  ('ifStatement -> IF LPAREN expression RPAREN statement ELSE statement','ifStatement',7,'p_ifStatement','DartParser.py',319),
  ('forStatement -> FOR LPAREN forLoopParts RPAREN statement','forStatement',5,'p_forStatement','DartParser.py',327),
  ('forLoopParts -> forInitializerStatement PCOMMA','forLoopParts',2,'p_forLoopParts','DartParser.py',332),
  ('forLoopParts -> forInitializerStatement PCOMMA expressionList','forLoopParts',3,'p_forLoopParts','DartParser.py',333),
  ('forLoopParts -> forInitializerStatement expression PCOMMA','forLoopParts',3,'p_forLoopParts','DartParser.py',334),
  ('forLoopParts -> forInitializerStatement expression PCOMMA expressionList','forLoopParts',4,'p_forLoopParts','DartParser.py',335),
  ('forInitializerStatement -> localVariableDeclaration','forInitializerStatement',1,'p_forInitializerStatement','DartParser.py',347),
  ('forInitializerStatement -> PCOMMA','forInitializerStatement',1,'p_forInitializerStatement','DartParser.py',348),
  ('forInitializerStatement -> expression PCOMMA','forInitializerStatement',2,'p_forInitializerStatement','DartParser.py',349),
  ('whileStatement -> WHILE LPAREN expression RPAREN statement','whileStatement',5,'p_whileStatement','DartParser.py',359),
  ('doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA','doStatement',7,'p_doStatement','DartParser.py',364),
  ('switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV','switchStatement',7,'p_switchStatement','DartParser.py',369),
  ('switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV','switchStatement',8,'p_switchStatement','DartParser.py',370),
  ('switchCaseRepetition -> switchCase switchCaseRepetition','switchCaseRepetition',2,'p_switchCaseRepetition','DartParser.py',378),
  ('switchCaseRepetition -> switchCase','switchCaseRepetition',1,'p_switchCaseRepetition','DartParser.py',379),
  ('switchCase -> CASE expression PONTOS statements','switchCase',4,'p_switchCase','DartParser.py',387),
  ('defaultCase -> DEFAULT PONTOS statements','defaultCase',3,'p_defaultCase','DartParser.py',392),
  ('breakStatement -> BREAK PCOMMA','breakStatement',2,'p_breakStatement','DartParser.py',400),
  ('breakStatement -> BREAK ID PCOMMA','breakStatement',3,'p_breakStatement','DartParser.py',401),
]
