
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ATRIBUIR BOOLEAN BREAK CASE CHAR CLASS COMMA CONST DEFAULT DIVIDIR DO ELSE FALSE FINAL FLOAT FOR FUNCTION ID IF IGUAL INT INTEGER LCHAV LCON LITERAL_STRING LPAREN MAIOR MAIORI MENOR MENORI NEG NOT NULL NUMBER OR PCOMMA PONTOS RCHAV RCON RESTO RETURN RPAREN SOMA SOMASOMA STRING SUBSUB SUBTRAIR SWITCH TRUE VAR VEZES VOID WHILE topLevel : variableDeclaration PCOMMA\n                 | variableDeclaration PCOMMA topLevel\n                 | functionSignature functionBody\n                 | functionSignature functionBody topLevel\n                  variableDeclaration : declaredIdentifier\n                            | variableDeclaration COMMA ID  declaredIdentifier : type ID  type : VAR\n             | INT\n             | FLOAT\n             | CHAR \n             | STRING\n             | VOID\n             | BOOLEAN functionSignature : ID formalParameterList\n                          | type ID formalParameterList  formalParameterList : LPAREN RPAREN \n                            | LPAREN normalFormalParameters RPAREN  normalFormalParameters : simpleFormalParameter \n                               | simpleFormalParameter COMMA normalFormalParameters  simpleFormalParameter : type ID functionBody : block block : LCHAV statements RCHAV              \n              | LCHAV RCHAV statements : statement statements\n                   | statement  statement : nonLabelledStatement  nonLabelledStatement : block\n                             | expressionStatement\n                             | localVariableDeclaration\n                             | returnStatement\n                             | ifStatement\n                             | forStatement\n                             | whileStatement\n                             | doStatement\n                             | switchStatement \n                             | breakStatement  localVariableDeclaration : initializedVariableDeclaration PCOMMA initializedVariableDeclaration : declaredIdentifier\n                                       | declaredIdentifier ATRIBUIR expression\n                                       | literal ATRIBUIR expression\n                                       | initializedVariableDeclaration COMMA ID  expressionStatement : PCOMMA\n                            | expression PCOMMA  expression : orExpression orExpression : andExpression\n                     | orExpression OR andExpressionandExpression : equalityExpression\n                     | andExpression AND equalityExpressionequalityExpression : relacionalExpression\n                          | equalityExpression IGUAL relacionalExpression \n                          | equalityExpression NEG relacionalExpression relacionalExpression : addExpression\n                    | relacionalExpression MENOR addExpression\n                    | relacionalExpression MAIOR addExpression\n                    | relacionalExpression MENORI addExpression\n                    | relacionalExpression MAIORI addExpressionaddExpression : multExpression \n                     | addExpression SOMA multExpression\n                     | addExpression SUBTRAIR multExpressionmultExpression : unaryExpression \n                      | multExpression VEZES unaryExpression\n                      | multExpression DIVIDIR unaryExpression\n                      | multExpression RESTO unaryExpressionunaryExpression : primary\n                       | functionCall\n                       | unaryExpression SOMASOMA\n                       | unaryExpression SUBSUBfunctionCall : functionSignature primary : literal \n                | LPAREN expression RPAREN  literal : ID \n                | booleanLiteral \n                | listLiteralID\n                | listLiteral\n                | NUMBER\n                | LITERAL_STRINGlistLiteral : LCON expressionList RCON listLiteralID : ID listLiteral booleanLiteral : TRUE \n                       | FALSE  expressionList : expression COMMA\n                       | expression\n                       | expression COMMA expressionList  returnStatement : RETURN PCOMMA \n                        | RETURN expression PCOMMAifStatement : IF LPAREN expression RPAREN statement \n                   | IF LPAREN expression RPAREN statement ELSE statement  forStatement : FOR LPAREN forLoopParts RPAREN statement  forLoopParts : forInitializerStatement PCOMMA \n                     | forInitializerStatement PCOMMA expressionList \n                     | forInitializerStatement expression PCOMMA \n                     | forInitializerStatement expression PCOMMA expressionList  forInitializerStatement : localVariableDeclaration \n                                | PCOMMA \n                                | expression PCOMMA  whileStatement : WHILE LPAREN expression RPAREN statement doStatement : DO statement WHILE LPAREN expression RPAREN PCOMMA  switchStatement : SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV\n                        | SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV switchCaseRepetition : switchCase switchCaseRepetition\n                             | switchCase  switchCase : CASE expression PONTOS statements  defaultCase : DEFAULT PONTOS statements  breakStatement : BREAK PCOMMA \n                       | BREAK ID PCOMMA'
    
_lr_action_items = {'ID':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,49,55,64,75,77,79,80,81,82,86,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[5,21,-8,-9,-10,-11,-12,-13,-14,5,23,5,-22,50,-24,50,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,85,85,50,94,100,85,118,-23,-44,-38,119,-85,121,85,50,85,85,-105,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-86,85,-95,-94,-106,85,50,50,85,-96,50,85,-87,-89,85,-97,50,85,-88,-98,-99,-100,50,50,]),'VAR':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,117,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[7,7,7,-22,7,7,-24,7,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,7,7,7,7,-23,-44,-38,-85,7,7,7,7,-105,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-86,7,-95,-94,-106,7,7,7,7,-96,7,7,-87,-89,7,-97,7,7,-88,-98,-99,-100,7,7,]),'INT':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,117,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[8,8,8,-22,8,8,-24,8,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,8,8,8,8,-23,-44,-38,-85,8,8,8,8,-105,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-86,8,-95,-94,-106,8,8,8,8,-96,8,8,-87,-89,8,-97,8,8,-88,-98,-99,-100,8,8,]),'FLOAT':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,117,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[9,9,9,-22,9,9,-24,9,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,9,9,9,9,-23,-44,-38,-85,9,9,9,9,-105,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-86,9,-95,-94,-106,9,9,9,9,-96,9,9,-87,-89,9,-97,9,9,-88,-98,-99,-100,9,9,]),'CHAR':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,117,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[10,10,10,-22,10,10,-24,10,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,10,10,10,10,-23,-44,-38,-85,10,10,10,10,-105,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-86,10,-95,-94,-106,10,10,10,10,-96,10,10,-87,-89,10,-97,10,10,-88,-98,-99,-100,10,10,]),'STRING':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,117,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[11,11,11,-22,11,11,-24,11,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,11,11,11,11,-23,-44,-38,-85,11,11,11,11,-105,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-86,11,-95,-94,-106,11,11,11,11,-96,11,11,-87,-89,11,-97,11,11,-88,-98,-99,-100,11,11,]),'VOID':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,117,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[12,12,12,-22,12,12,-24,12,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,12,12,12,12,-23,-44,-38,-85,12,12,12,12,-105,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-86,12,-95,-94,-106,12,12,12,12,-96,12,12,-87,-89,12,-97,12,12,-88,-98,-99,-100,12,12,]),'BOOLEAN':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,117,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[13,13,13,-22,13,13,-24,13,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,13,13,13,13,-23,-44,-38,-85,13,13,13,13,-105,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-86,13,-95,-94,-106,13,13,13,13,-96,13,13,-87,-89,13,-97,13,13,-88,-98,-99,-100,13,13,]),'$end':([1,14,16,17,22,24,26,77,],[0,-1,-3,-22,-2,-4,-24,-23,]),'PCOMMA':([2,4,18,19,21,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,49,50,51,52,53,54,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,76,77,79,80,82,83,84,85,89,93,94,95,100,114,115,116,119,120,123,125,126,127,128,132,133,134,135,136,137,138,139,141,142,143,144,145,146,147,148,149,151,152,154,155,156,160,161,164,167,169,173,174,175,180,181,182,],[14,-5,39,-15,-7,-6,-24,39,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,79,80,82,39,93,-72,-45,-39,-70,-46,-73,-74,-75,-76,-77,-48,-80,-81,-50,-53,-58,-61,-65,-66,-69,-17,-16,-23,-44,-38,-85,120,-70,-72,126,-105,132,-79,-7,-67,-68,-18,-42,-86,-71,153,-95,155,-94,-106,-47,-40,-41,-49,-51,-52,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,39,39,163,-96,39,-87,-89,-97,39,174,-88,-98,-99,-100,39,39,]),'COMMA':([2,4,19,21,23,41,51,52,54,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,74,76,84,85,95,100,104,114,115,116,118,119,123,133,134,135,136,137,138,139,141,142,143,144,145,146,147,148,149,],[15,-5,-15,-7,-6,81,-45,-39,-46,-73,-74,-75,-76,-77,-48,-80,-81,-50,-53,-58,-61,-65,-66,-69,-17,117,-16,-70,-72,-79,-7,140,-67,-68,-18,-21,-42,-71,-47,-40,-41,-49,-51,-52,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,]),'LCHAV':([3,18,19,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,72,76,77,79,80,82,93,116,120,132,151,152,156,158,160,161,164,167,173,174,175,180,181,182,],[18,18,-15,-24,18,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,18,-17,-16,-23,-44,-38,-85,-105,-18,-86,-106,18,18,18,166,-87,-89,-97,18,-88,-98,-99,-100,18,18,]),'LPAREN':([5,18,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,50,64,77,79,80,82,85,87,89,90,92,93,96,97,98,99,100,101,102,105,106,107,108,109,110,111,112,113,120,121,125,126,128,130,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[20,44,20,-24,44,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,44,87,44,89,90,44,92,20,44,-23,-44,-38,-85,20,44,44,44,44,-105,44,44,44,44,20,44,44,44,44,44,44,44,44,44,44,44,-86,20,44,-95,-94,157,-106,44,44,44,44,-96,44,44,-87,-89,44,-97,44,44,-88,-98,-99,-100,44,44,]),'RCHAV':([18,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,77,78,79,80,82,93,120,132,160,161,164,170,171,173,174,175,176,178,180,183,184,],[26,77,-24,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,-23,-25,-44,-38,-85,-105,-86,-106,-87,-89,-97,175,-102,-88,-98,-99,180,-101,-100,-104,-103,]),'RETURN':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,77,79,80,82,93,120,132,151,152,156,160,161,164,167,173,174,175,180,181,182,],[42,-24,42,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,42,-23,-44,-38,-85,-105,-86,-106,42,42,42,-87,-89,-97,42,-88,-98,-99,-100,42,42,]),'IF':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,77,79,80,82,93,120,132,151,152,156,160,161,164,167,173,174,175,180,181,182,],[43,-24,43,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,43,-23,-44,-38,-85,-105,-86,-106,43,43,43,-87,-89,-97,43,-88,-98,-99,-100,43,43,]),'FOR':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,77,79,80,82,93,120,132,151,152,156,160,161,164,167,173,174,175,180,181,182,],[45,-24,45,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,45,-23,-44,-38,-85,-105,-86,-106,45,45,45,-87,-89,-97,45,-88,-98,-99,-100,45,45,]),'WHILE':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,77,79,80,82,91,93,120,132,151,152,156,160,161,164,167,173,174,175,180,181,182,],[46,-24,46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,46,-23,-44,-38,-85,130,-105,-86,-106,46,46,46,-87,-89,-97,46,-88,-98,-99,-100,46,46,]),'DO':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,77,79,80,82,93,120,132,151,152,156,160,161,164,167,173,174,175,180,181,182,],[47,-24,47,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,47,-23,-44,-38,-85,-105,-86,-106,47,47,47,-87,-89,-97,47,-88,-98,-99,-100,47,47,]),'SWITCH':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,77,79,80,82,93,120,132,151,152,156,160,161,164,167,173,174,175,180,181,182,],[48,-24,48,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,48,-23,-44,-38,-85,-105,-86,-106,48,48,48,-87,-89,-97,48,-88,-98,-99,-100,48,48,]),'BREAK':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,77,79,80,82,93,120,132,151,152,156,160,161,164,167,173,174,175,180,181,182,],[49,-24,49,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,49,-23,-44,-38,-85,-105,-86,-106,49,49,49,-87,-89,-97,49,-88,-98,-99,-100,49,49,]),'NUMBER':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[59,-24,59,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,59,59,59,59,-23,-44,-38,-85,59,59,59,59,-105,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-86,59,-95,-94,-106,59,59,59,59,-96,59,59,-87,-89,59,-97,59,59,-88,-98,-99,-100,59,59,]),'LITERAL_STRING':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[60,-24,60,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,60,60,60,60,-23,-44,-38,-85,60,60,60,60,-105,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-86,60,-95,-94,-106,60,60,60,60,-96,60,60,-87,-89,60,-97,60,60,-88,-98,-99,-100,60,60,]),'TRUE':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[62,-24,62,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,62,62,62,62,-23,-44,-38,-85,62,62,62,62,-105,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-86,62,-95,-94,-106,62,62,62,62,-96,62,62,-87,-89,62,-97,62,62,-88,-98,-99,-100,62,62,]),'FALSE':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,64,77,79,80,82,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[63,-24,63,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,63,63,63,63,-23,-44,-38,-85,63,63,63,63,-105,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-86,63,-95,-94,-106,63,63,63,63,-96,63,63,-87,-89,63,-97,63,63,-88,-98,-99,-100,63,63,]),'LCON':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,50,64,77,79,80,82,85,87,89,90,92,93,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,120,125,126,128,132,140,151,152,153,155,156,157,160,161,163,164,167,172,173,174,175,180,181,182,],[64,-24,64,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,64,64,64,64,64,-23,-44,-38,-85,64,64,64,64,64,-105,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-86,64,-95,-94,-106,64,64,64,64,-96,64,64,-87,-89,64,-97,64,64,-88,-98,-99,-100,64,64,]),'SOMASOMA':([19,50,53,56,57,58,59,60,62,63,68,69,70,71,72,76,84,85,95,114,115,116,123,139,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,114,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,-78,114,114,114,]),'SUBSUB':([19,50,53,56,57,58,59,60,62,63,68,69,70,71,72,76,84,85,95,114,115,116,123,139,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,115,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,-78,115,115,115,]),'VEZES':([19,50,53,56,57,58,59,60,62,63,67,68,69,70,71,72,76,84,85,95,114,115,116,123,139,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,111,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,-78,111,111,-62,-63,-64,]),'DIVIDIR':([19,50,53,56,57,58,59,60,62,63,67,68,69,70,71,72,76,84,85,95,114,115,116,123,139,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,112,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,-78,112,112,-62,-63,-64,]),'RESTO':([19,50,53,56,57,58,59,60,62,63,67,68,69,70,71,72,76,84,85,95,114,115,116,123,139,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,113,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,-78,113,113,-62,-63,-64,]),'SOMA':([19,50,53,56,57,58,59,60,62,63,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,139,141,142,143,144,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,109,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,-78,109,109,109,109,-59,-60,-62,-63,-64,]),'SUBTRAIR':([19,50,53,56,57,58,59,60,62,63,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,139,141,142,143,144,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,110,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,-78,110,110,110,110,-59,-60,-62,-63,-64,]),'MENOR':([19,50,53,56,57,58,59,60,62,63,65,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,137,138,139,141,142,143,144,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,105,-53,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,105,105,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,]),'MAIOR':([19,50,53,56,57,58,59,60,62,63,65,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,137,138,139,141,142,143,144,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,106,-53,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,106,106,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,]),'MENORI':([19,50,53,56,57,58,59,60,62,63,65,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,137,138,139,141,142,143,144,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,107,-53,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,107,107,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,]),'MAIORI':([19,50,53,56,57,58,59,60,62,63,65,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,137,138,139,141,142,143,144,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,-80,-81,108,-53,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,108,108,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,]),'IGUAL':([19,50,53,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,136,137,138,139,141,142,143,144,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,101,-80,-81,-50,-53,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,101,-51,-52,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,]),'NEG':([19,50,53,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,136,137,138,139,141,142,143,144,145,146,147,148,149,],[-15,-72,-70,-73,-74,-75,-76,-77,102,-80,-81,-50,-53,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,102,-51,-52,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,]),'AND':([19,50,53,54,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,133,136,137,138,139,141,142,143,144,145,146,147,148,149,],[-15,-72,-70,99,-73,-74,-75,-76,-77,-48,-80,-81,-50,-53,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,99,-49,-51,-52,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,]),'OR':([19,50,51,53,54,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,133,136,137,138,139,141,142,143,144,145,146,147,148,149,],[-15,-72,96,-70,-46,-73,-74,-75,-76,-77,-48,-80,-81,-50,-53,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,-47,-49,-51,-52,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,]),'RPAREN':([19,20,51,54,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,76,84,85,88,95,104,114,115,116,118,122,123,124,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,159,162,163,165,168,],[-15,72,-45,-46,-73,-74,-75,-76,-77,-48,-80,-81,-50,-53,-58,-61,-65,-66,-69,-17,116,-19,-16,-70,-72,123,-79,-83,-67,-68,-18,-21,151,-71,152,156,158,-47,-49,-51,-52,-78,-82,-54,-55,-56,-57,-59,-60,-62,-63,-64,-20,-90,-84,-91,-92,169,-93,]),'RCON':([19,51,54,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,76,84,85,95,103,104,114,115,116,123,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,159,],[-15,-45,-46,-73,-74,-75,-76,-77,-48,-80,-81,-50,-53,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,139,-83,-67,-68,-18,-71,-47,-49,-51,-52,-78,-82,-54,-55,-56,-57,-59,-60,-62,-63,-64,-84,]),'PONTOS':([19,51,54,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,76,84,85,95,114,115,116,123,133,136,137,138,139,141,142,143,144,145,146,147,148,149,177,179,],[-15,-45,-46,-73,-74,-75,-76,-77,-48,-80,-81,-50,-53,-58,-61,-65,-66,-69,-17,-16,-70,-72,-79,-67,-68,-18,-71,-47,-49,-51,-52,-78,-54,-55,-56,-57,-59,-60,-62,-63,-64,181,182,]),'CASE':([26,27,28,29,30,31,32,33,34,35,36,37,38,39,77,78,79,80,82,93,120,132,160,161,164,166,171,173,174,175,180,184,],[-24,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,-23,-25,-44,-38,-85,-105,-86,-106,-87,-89,-97,172,172,-88,-98,-99,-100,-103,]),'DEFAULT':([26,27,28,29,30,31,32,33,34,35,36,37,38,39,77,78,79,80,82,93,120,132,160,161,164,170,171,173,174,175,178,180,184,],[-24,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,-23,-25,-44,-38,-85,-105,-86,-106,-87,-89,-97,177,-102,-88,-98,-99,-101,-100,-103,]),'ELSE':([26,28,29,30,31,32,33,34,35,36,37,38,39,77,79,80,82,93,120,132,160,161,164,173,174,175,180,],[-24,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-43,-23,-44,-38,-85,-105,-86,-106,167,-89,-97,-88,-98,-99,-100,]),'ATRIBUIR':([50,52,53,56,57,58,59,60,62,63,95,100,139,],[-72,97,98,-73,-74,-75,-76,-77,-80,-81,-79,-7,-78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'topLevel':([0,14,16,],[1,22,24,]),'variableDeclaration':([0,14,16,],[2,2,2,]),'functionSignature':([0,14,16,18,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,125,140,151,152,153,156,157,163,167,172,181,182,],[3,3,3,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'declaredIdentifier':([0,14,16,18,27,47,89,151,152,156,167,181,182,],[4,4,4,52,52,52,52,52,52,52,52,52,52,]),'type':([0,14,16,18,20,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,117,125,140,151,152,153,156,157,163,167,172,181,182,],[6,6,6,55,75,55,86,86,55,86,86,55,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,75,86,86,55,55,86,55,86,86,55,86,55,55,]),'functionBody':([3,],[16,]),'block':([3,18,27,47,151,152,156,167,181,182,],[17,29,29,29,29,29,29,29,29,29,]),'formalParameterList':([5,21,50,85,100,121,],[19,76,19,19,76,76,]),'statements':([18,27,181,182,],[25,78,183,184,]),'statement':([18,27,47,151,152,156,167,181,182,],[27,27,91,160,161,164,173,27,27,]),'nonLabelledStatement':([18,27,47,151,152,156,167,181,182,],[28,28,28,28,28,28,28,28,28,]),'expressionStatement':([18,27,47,151,152,156,167,181,182,],[30,30,30,30,30,30,30,30,30,]),'localVariableDeclaration':([18,27,47,89,151,152,156,167,181,182,],[31,31,31,128,31,31,31,31,31,31,]),'returnStatement':([18,27,47,151,152,156,167,181,182,],[32,32,32,32,32,32,32,32,32,]),'ifStatement':([18,27,47,151,152,156,167,181,182,],[33,33,33,33,33,33,33,33,33,]),'forStatement':([18,27,47,151,152,156,167,181,182,],[34,34,34,34,34,34,34,34,34,]),'whileStatement':([18,27,47,151,152,156,167,181,182,],[35,35,35,35,35,35,35,35,35,]),'doStatement':([18,27,47,151,152,156,167,181,182,],[36,36,36,36,36,36,36,36,36,]),'switchStatement':([18,27,47,151,152,156,167,181,182,],[37,37,37,37,37,37,37,37,37,]),'breakStatement':([18,27,47,151,152,156,167,181,182,],[38,38,38,38,38,38,38,38,38,]),'expression':([18,27,42,44,47,64,87,89,90,92,97,98,125,140,151,152,153,156,157,163,167,172,181,182,],[40,40,83,88,40,104,122,127,129,131,134,135,154,104,40,40,104,40,165,104,40,179,40,40,]),'initializedVariableDeclaration':([18,27,47,89,151,152,156,167,181,182,],[41,41,41,41,41,41,41,41,41,41,]),'orExpression':([18,27,42,44,47,64,87,89,90,92,97,98,125,140,151,152,153,156,157,163,167,172,181,182,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'literal':([18,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,125,140,151,152,153,156,157,163,167,172,181,182,],[53,53,84,84,53,84,84,53,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,53,53,84,53,84,84,53,84,53,53,]),'andExpression':([18,27,42,44,47,64,87,89,90,92,96,97,98,125,140,151,152,153,156,157,163,167,172,181,182,],[54,54,54,54,54,54,54,54,54,54,133,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'booleanLiteral':([18,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,125,140,151,152,153,156,157,163,167,172,181,182,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'listLiteralID':([18,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,125,140,151,152,153,156,157,163,167,172,181,182,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'listLiteral':([18,27,42,44,47,50,64,85,87,89,90,92,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,125,140,151,152,153,156,157,163,167,172,181,182,],[58,58,58,58,58,95,58,95,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'equalityExpression':([18,27,42,44,47,64,87,89,90,92,96,97,98,99,125,140,151,152,153,156,157,163,167,172,181,182,],[61,61,61,61,61,61,61,61,61,61,61,61,61,136,61,61,61,61,61,61,61,61,61,61,61,61,]),'relacionalExpression':([18,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,125,140,151,152,153,156,157,163,167,172,181,182,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,137,138,65,65,65,65,65,65,65,65,65,65,65,65,]),'addExpression':([18,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,105,106,107,108,125,140,151,152,153,156,157,163,167,172,181,182,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,141,142,143,144,66,66,66,66,66,66,66,66,66,66,66,66,]),'multExpression':([18,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,105,106,107,108,109,110,125,140,151,152,153,156,157,163,167,172,181,182,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,145,146,67,67,67,67,67,67,67,67,67,67,67,67,]),'unaryExpression':([18,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,125,140,151,152,153,156,157,163,167,172,181,182,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,147,148,149,68,68,68,68,68,68,68,68,68,68,68,68,]),'primary':([18,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,125,140,151,152,153,156,157,163,167,172,181,182,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'functionCall':([18,27,42,44,47,64,87,89,90,92,96,97,98,99,101,102,105,106,107,108,109,110,111,112,113,125,140,151,152,153,156,157,163,167,172,181,182,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'normalFormalParameters':([20,117,],[73,150,]),'simpleFormalParameter':([20,117,],[74,74,]),'expressionList':([64,140,153,163,],[103,159,162,168,]),'forLoopParts':([89,],[124,]),'forInitializerStatement':([89,],[125,]),'switchCaseRepetition':([166,171,],[170,178,]),'switchCase':([166,171,],[171,171,]),'defaultCase':([170,],[176,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> topLevel","S'",1,None,None,None),
  ('topLevel -> variableDeclaration PCOMMA','topLevel',2,'p_topLevelDefinition','DartParser.py',8),
  ('topLevel -> variableDeclaration PCOMMA topLevel','topLevel',3,'p_topLevelDefinition','DartParser.py',9),
  ('topLevel -> functionSignature functionBody','topLevel',2,'p_topLevelDefinition','DartParser.py',10),
  ('topLevel -> functionSignature functionBody topLevel','topLevel',3,'p_topLevelDefinition','DartParser.py',11),
  ('variableDeclaration -> declaredIdentifier','variableDeclaration',1,'p_variableDeclaration','DartParser.py',24),
  ('variableDeclaration -> variableDeclaration COMMA ID','variableDeclaration',3,'p_variableDeclaration','DartParser.py',25),
  ('declaredIdentifier -> type ID','declaredIdentifier',2,'p_declaredIdentifier','DartParser.py',33),
  ('type -> VAR','type',1,'p_type','DartParser.py',38),
  ('type -> INT','type',1,'p_type','DartParser.py',39),
  ('type -> FLOAT','type',1,'p_type','DartParser.py',40),
  ('type -> CHAR','type',1,'p_type','DartParser.py',41),
  ('type -> STRING','type',1,'p_type','DartParser.py',42),
  ('type -> VOID','type',1,'p_type','DartParser.py',43),
  ('type -> BOOLEAN','type',1,'p_type','DartParser.py',44),
  ('functionSignature -> ID formalParameterList','functionSignature',2,'p_functionSignature','DartParser.py',48),
  ('functionSignature -> type ID formalParameterList','functionSignature',3,'p_functionSignature','DartParser.py',49),
  ('formalParameterList -> LPAREN RPAREN','formalParameterList',2,'p_formalParameterList','DartParser.py',57),
  ('formalParameterList -> LPAREN normalFormalParameters RPAREN','formalParameterList',3,'p_formalParameterList','DartParser.py',58),
  ('normalFormalParameters -> simpleFormalParameter','normalFormalParameters',1,'p_normalFormalParameters','DartParser.py',66),
  ('normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters','normalFormalParameters',3,'p_normalFormalParameters','DartParser.py',67),
  ('simpleFormalParameter -> type ID','simpleFormalParameter',2,'p_simlpleFormalParameter','DartParser.py',75),
  ('functionBody -> block','functionBody',1,'p_functionBody','DartParser.py',83),
  ('block -> LCHAV statements RCHAV','block',3,'p_block','DartParser.py',88),
  ('block -> LCHAV RCHAV','block',2,'p_block','DartParser.py',89),
  ('statements -> statement statements','statements',2,'p_statements','DartParser.py',96),
  ('statements -> statement','statements',1,'p_statements','DartParser.py',97),
  ('statement -> nonLabelledStatement','statement',1,'p_statement','DartParser.py',104),
  ('nonLabelledStatement -> block','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',109),
  ('nonLabelledStatement -> expressionStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',110),
  ('nonLabelledStatement -> localVariableDeclaration','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',111),
  ('nonLabelledStatement -> returnStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',112),
  ('nonLabelledStatement -> ifStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',113),
  ('nonLabelledStatement -> forStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',114),
  ('nonLabelledStatement -> whileStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',115),
  ('nonLabelledStatement -> doStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',116),
  ('nonLabelledStatement -> switchStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',117),
  ('nonLabelledStatement -> breakStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',118),
  ('localVariableDeclaration -> initializedVariableDeclaration PCOMMA','localVariableDeclaration',2,'p_localVariableDeclaration','DartParser.py',142),
  ('initializedVariableDeclaration -> declaredIdentifier','initializedVariableDeclaration',1,'p_initializedVariableDeclaration','DartParser.py',147),
  ('initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParser.py',148),
  ('initializedVariableDeclaration -> literal ATRIBUIR expression','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParser.py',149),
  ('initializedVariableDeclaration -> initializedVariableDeclaration COMMA ID','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParser.py',150),
  ('expressionStatement -> PCOMMA','expressionStatement',1,'p_expressionStatement','DartParser.py',162),
  ('expressionStatement -> expression PCOMMA','expressionStatement',2,'p_expressionStatement','DartParser.py',163),
  ('expression -> orExpression','expression',1,'p_expression','DartParser.py',171),
  ('orExpression -> andExpression','orExpression',1,'p_orExpression','DartParser.py',175),
  ('orExpression -> orExpression OR andExpression','orExpression',3,'p_orExpression','DartParser.py',176),
  ('andExpression -> equalityExpression','andExpression',1,'p_andExpression','DartParser.py',184),
  ('andExpression -> andExpression AND equalityExpression','andExpression',3,'p_andExpression','DartParser.py',185),
  ('equalityExpression -> relacionalExpression','equalityExpression',1,'p_equalityExpression','DartParser.py',192),
  ('equalityExpression -> equalityExpression IGUAL relacionalExpression','equalityExpression',3,'p_equalityExpression','DartParser.py',193),
  ('equalityExpression -> equalityExpression NEG relacionalExpression','equalityExpression',3,'p_equalityExpression','DartParser.py',194),
  ('relacionalExpression -> addExpression','relacionalExpression',1,'p_relacionalExpression','DartParser.py',203),
  ('relacionalExpression -> relacionalExpression MENOR addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',204),
  ('relacionalExpression -> relacionalExpression MAIOR addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',205),
  ('relacionalExpression -> relacionalExpression MENORI addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',206),
  ('relacionalExpression -> relacionalExpression MAIORI addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',207),
  ('addExpression -> multExpression','addExpression',1,'p_addExpression','DartParser.py',215),
  ('addExpression -> addExpression SOMA multExpression','addExpression',3,'p_addExpression','DartParser.py',216),
  ('addExpression -> addExpression SUBTRAIR multExpression','addExpression',3,'p_addExpression','DartParser.py',217),
  ('multExpression -> unaryExpression','multExpression',1,'p_multExpression','DartParser.py',225),
  ('multExpression -> multExpression VEZES unaryExpression','multExpression',3,'p_multExpression','DartParser.py',226),
  ('multExpression -> multExpression DIVIDIR unaryExpression','multExpression',3,'p_multExpression','DartParser.py',227),
  ('multExpression -> multExpression RESTO unaryExpression','multExpression',3,'p_multExpression','DartParser.py',228),
  ('unaryExpression -> primary','unaryExpression',1,'p_unaryExpression','DartParser.py',236),
  ('unaryExpression -> functionCall','unaryExpression',1,'p_unaryExpression','DartParser.py',237),
  ('unaryExpression -> unaryExpression SOMASOMA','unaryExpression',2,'p_unaryExpression','DartParser.py',238),
  ('unaryExpression -> unaryExpression SUBSUB','unaryExpression',2,'p_unaryExpression','DartParser.py',239),
  ('functionCall -> functionSignature','functionCall',1,'p_functionCall','DartParser.py',250),
  ('primary -> literal','primary',1,'p_primary','DartParser.py',254),
  ('primary -> LPAREN expression RPAREN','primary',3,'p_primary','DartParser.py',255),
  ('literal -> ID','literal',1,'p_literal','DartParser.py',262),
  ('literal -> booleanLiteral','literal',1,'p_literal','DartParser.py',263),
  ('literal -> listLiteralID','literal',1,'p_literal','DartParser.py',264),
  ('literal -> listLiteral','literal',1,'p_literal','DartParser.py',265),
  ('literal -> NUMBER','literal',1,'p_literal','DartParser.py',266),
  ('literal -> LITERAL_STRING','literal',1,'p_literal','DartParser.py',267),
  ('listLiteral -> LCON expressionList RCON','listLiteral',3,'p_listLiteral','DartParser.py',282),
  ('listLiteralID -> ID listLiteral','listLiteralID',2,'p_listLiteralID','DartParser.py',286),
  ('booleanLiteral -> TRUE','booleanLiteral',1,'p_booleanLiteral','DartParser.py',290),
  ('booleanLiteral -> FALSE','booleanLiteral',1,'p_booleanLiteral','DartParser.py',291),
  ('expressionList -> expression COMMA','expressionList',2,'p_expresionList','DartParser.py',299),
  ('expressionList -> expression','expressionList',1,'p_expresionList','DartParser.py',300),
  ('expressionList -> expression COMMA expressionList','expressionList',3,'p_expresionList','DartParser.py',301),
  ('returnStatement -> RETURN PCOMMA','returnStatement',2,'p_returnStatement','DartParser.py',309),
  ('returnStatement -> RETURN expression PCOMMA','returnStatement',3,'p_returnStatement','DartParser.py',310),
  ('ifStatement -> IF LPAREN expression RPAREN statement','ifStatement',5,'p_ifStatement','DartParser.py',315),
  ('ifStatement -> IF LPAREN expression RPAREN statement ELSE statement','ifStatement',7,'p_ifStatement','DartParser.py',316),
  ('forStatement -> FOR LPAREN forLoopParts RPAREN statement','forStatement',5,'p_forStatement','DartParser.py',324),
  ('forLoopParts -> forInitializerStatement PCOMMA','forLoopParts',2,'p_forLoopParts','DartParser.py',329),
  ('forLoopParts -> forInitializerStatement PCOMMA expressionList','forLoopParts',3,'p_forLoopParts','DartParser.py',330),
  ('forLoopParts -> forInitializerStatement expression PCOMMA','forLoopParts',3,'p_forLoopParts','DartParser.py',331),
  ('forLoopParts -> forInitializerStatement expression PCOMMA expressionList','forLoopParts',4,'p_forLoopParts','DartParser.py',332),
  ('forInitializerStatement -> localVariableDeclaration','forInitializerStatement',1,'p_forInitializerStatement','DartParser.py',344),
  ('forInitializerStatement -> PCOMMA','forInitializerStatement',1,'p_forInitializerStatement','DartParser.py',345),
  ('forInitializerStatement -> expression PCOMMA','forInitializerStatement',2,'p_forInitializerStatement','DartParser.py',346),
  ('whileStatement -> WHILE LPAREN expression RPAREN statement','whileStatement',5,'p_whileStatement','DartParser.py',356),
  ('doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA','doStatement',7,'p_doStatement','DartParser.py',361),
  ('switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV','switchStatement',7,'p_switchStatement','DartParser.py',366),
  ('switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV','switchStatement',8,'p_switchStatement','DartParser.py',367),
  ('switchCaseRepetition -> switchCase switchCaseRepetition','switchCaseRepetition',2,'p_switchCaseRepetition','DartParser.py',375),
  ('switchCaseRepetition -> switchCase','switchCaseRepetition',1,'p_switchCaseRepetition','DartParser.py',376),
  ('switchCase -> CASE expression PONTOS statements','switchCase',4,'p_switchCase','DartParser.py',384),
  ('defaultCase -> DEFAULT PONTOS statements','defaultCase',3,'p_defaultCase','DartParser.py',389),
  ('breakStatement -> BREAK PCOMMA','breakStatement',2,'p_breakStatement','DartParser.py',397),
  ('breakStatement -> BREAK ID PCOMMA','breakStatement',3,'p_breakStatement','DartParser.py',398),
]
