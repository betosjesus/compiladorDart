
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ATRIBUIR BREAK CASE CHAR CLASS COMMA CONST DEFAULT DIVIDIR DO ELSE FALSE FINAL FLOAT FOR FUNCTION ID IF IGUAL INT INTEGER LCHAV LCON LITERAL_STRING LPAREN MAIOR MAIORI MENOR MENORI NEG NOT NULL NUMBER OR PCOMMA PONTOS RCHAV RCON RESTO RETURN RPAREN SOMA SOMASOMA STRING SUBSUB SUBTRAIR SWITCH TRUE VAR VEZES VOID WHILE topLevel : variableDeclaration PCOMMA\n                 | variableDeclaration PCOMMA topLevel\n                 | functionSignature functionBody\n                 | functionSignature functionBody topLevel\n                  variableDeclaration : declaredIdentifier\n                            | variableDeclaration COMMA ID  declaredIdentifier : voidOrType ID \n                           | expressionvoidOrType : type type : VAR\n             | INT\n             | FLOAT\n             | CHAR \n             | STRING\n             | VOID functionSignature : ID formalParameterList\n                          | voidOrType ID formalParameterList  formalParameterList : LPAREN RPAREN \n                            | LPAREN normalFormalParameters RPAREN  normalFormalParameters : simpleFormalParameter \n                               | simpleFormalParameter COMMA normalFormalParameters  simpleFormalParameter : voidOrType ID\n                              | expression functionBody : block block : LCHAV statements RCHAV              \n              | LCHAV RCHAV statements : statement statements\n                   | statement  statement : nonLabelledStatement  nonLabelledStatement : block\n                             | expressionStatement\n                             | localVariableDeclaration\n                             | returnStatement\n                             | ifStatement\n                             | forStatement\n                             | whileStatement\n                             | doStatement\n                             | switchStatement \n                             | breakStatement  localVariableDeclaration : initializedVariableDeclaration PCOMMA initializedVariableDeclaration : declaredIdentifier\n                                       | declaredIdentifier ATRIBUIR expression\n                                       | declaredIdentifier ATRIBUIR listLiteral\n                                       | literal ATRIBUIR expression\n                                        expressionStatement : PCOMMA\n                            | expression PCOMMA  expression : orExpression orExpression : andExpression\n                     | orExpression OR andExpressionandExpression : equalityExpression\n                     | andExpression AND equalityExpressionequalityExpression : relacionalExpression\n                          | equalityExpression IGUAL relacionalExpression \n                          | equalityExpression NEG relacionalExpression relacionalExpression : addExpression\n                    | relacionalExpression MENOR addExpression\n                    | relacionalExpression MAIOR addExpression\n                    | relacionalExpression MENORI addExpression\n                    | relacionalExpression MAIORI addExpressionaddExpression : multExpression \n                     | addExpression SOMA multExpression\n                     | addExpression SUBTRAIR multExpressionmultExpression : unaryExpression \n                      | multExpression VEZES unaryExpression\n                      | multExpression DIVIDIR unaryExpression\n                      | multExpression RESTO unaryExpressionunaryExpression : primary\n                       | functionCall\n                       | unaryExpression SOMASOMA\n                       | unaryExpression SUBSUBfunctionCall : functionSignature primary : literal \n                | LPAREN expression RPAREN  literal : ID \n                | booleanLiteral \n                | listLiteralID\n                | NUMBER\n                | LITERAL_STRINGlistLiteral : LCON expressionList RCON listLiteralID : ID listLiteral  booleanLiteral : TRUE \n                       | FALSE  expressionList : expression COMMA\n                       | expression\n                       | expression COMMA expressionList  returnStatement : RETURN PCOMMA \n                        | RETURN expression PCOMMAifStatement : IF LPAREN expression RPAREN statement \n                   | IF LPAREN expression RPAREN statement ELSE statement  forStatement : FOR LPAREN forLoopParts RPAREN statement  forLoopParts : forInitializerStatement PCOMMA \n                     | forInitializerStatement PCOMMA expressionList \n                     | forInitializerStatement expression PCOMMA \n                     | forInitializerStatement expression PCOMMA expressionList  forInitializerStatement : localVariableDeclaration \n                                | PCOMMA \n                                | expression PCOMMA  whileStatement : WHILE LPAREN expression RPAREN statement doStatement : DO statement WHILE LPAREN expression RPAREN PCOMMA  switchStatement : SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV\n                        | SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV switchCaseRepetition : switchCase switchCaseRepetition\n                             | switchCase  switchCase : CASE expression PONTOS statements \n                   defaultCase : DEFAULT PONTOS statements \n                     label : ID PONTOS  breakStatement : BREAK PCOMMA \n                       | BREAK ID PCOMMA'
    
_lr_action_items = {'ID':([0,6,8,10,11,12,13,14,15,25,32,33,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,60,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,87,91,95,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[5,41,-9,-10,-11,-12,-13,-14,-15,59,5,62,5,-24,88,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,114,-26,88,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,59,88,127,130,133,-25,-46,-40,-86,59,88,59,59,-107,59,59,59,59,-87,59,-96,-95,-108,88,88,59,-97,88,59,-88,-90,59,-98,88,59,-89,-99,-100,-101,88,88,]),'VAR':([0,25,32,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[10,10,10,10,-24,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-26,10,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,10,10,-25,-46,-40,-86,10,10,10,10,-107,10,10,10,10,-87,10,-96,-95,-108,10,10,10,-97,10,10,-88,-90,10,-98,10,10,-89,-99,-100,-101,10,10,]),'INT':([0,25,32,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[11,11,11,11,-24,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-26,11,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,11,11,-25,-46,-40,-86,11,11,11,11,-107,11,11,11,11,-87,11,-96,-95,-108,11,11,11,-97,11,11,-88,-90,11,-98,11,11,-89,-99,-100,-101,11,11,]),'FLOAT':([0,25,32,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[12,12,12,12,-24,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-26,12,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,12,12,-25,-46,-40,-86,12,12,12,12,-107,12,12,12,12,-87,12,-96,-95,-108,12,12,12,-97,12,12,-88,-90,12,-98,12,12,-89,-99,-100,-101,12,12,]),'CHAR':([0,25,32,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[13,13,13,13,-24,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-26,13,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,13,13,-25,-46,-40,-86,13,13,13,13,-107,13,13,13,13,-87,13,-96,-95,-108,13,13,13,-97,13,13,-88,-90,13,-98,13,13,-89,-99,-100,-101,13,13,]),'STRING':([0,25,32,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[14,14,14,14,-24,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-26,14,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,14,14,-25,-46,-40,-86,14,14,14,14,-107,14,14,14,14,-87,14,-96,-95,-108,14,14,14,-97,14,14,-88,-90,14,-98,14,14,-89,-99,-100,-101,14,14,]),'VOID':([0,25,32,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[15,15,15,15,-24,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-26,15,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,15,15,-25,-46,-40,-86,15,15,15,15,-107,15,15,15,15,-87,15,-96,-95,-108,15,15,15,-97,15,15,-88,-90,15,-98,15,15,-89,-99,-100,-101,15,15,]),'LPAREN':([0,5,25,32,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,82,83,84,85,86,88,114,115,117,118,119,121,122,123,125,126,128,129,130,132,133,135,136,139,140,142,144,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[25,39,25,25,25,-24,25,25,25,39,25,25,25,25,25,25,25,25,25,25,25,25,25,39,-26,25,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,25,121,122,123,25,125,39,39,-25,-46,-40,-86,25,25,25,25,-107,25,25,39,25,39,25,-87,25,-96,-95,158,-108,25,25,25,-97,25,25,-88,-90,25,-98,25,25,-89,-99,-100,-101,25,25,]),'NUMBER':([0,25,32,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[28,28,28,28,-24,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-26,28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,28,28,-25,-46,-40,-86,28,28,28,28,-107,28,28,28,28,-87,28,-96,-95,-108,28,28,28,-97,28,28,-88,-90,28,-98,28,28,-89,-99,-100,-101,28,28,]),'LITERAL_STRING':([0,25,32,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[29,29,29,29,-24,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-26,29,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,29,29,-25,-46,-40,-86,29,29,29,29,-107,29,29,29,29,-87,29,-96,-95,-108,29,29,29,-97,29,29,-88,-90,29,-98,29,29,-89,-99,-100,-101,29,29,]),'TRUE':([0,25,32,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[30,30,30,30,-24,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-26,30,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,30,30,-25,-46,-40,-86,30,30,30,30,-107,30,30,30,30,-87,30,-96,-95,-108,30,30,30,-97,30,30,-88,-90,30,-98,30,30,-89,-99,-100,-101,30,30,]),'FALSE':([0,25,32,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,115,117,118,119,121,122,123,125,126,128,129,132,135,136,139,140,142,146,152,153,154,156,157,158,160,161,163,164,167,172,173,174,175,180,181,182,],[31,31,31,31,-24,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-26,31,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,31,31,-25,-46,-40,-86,31,31,31,31,-107,31,31,31,31,-87,31,-96,-95,-108,31,31,31,-97,31,31,-88,-90,31,-98,31,31,-89,-99,-100,-101,31,31,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'topLevel':([0,32,34,],[1,61,63,]),'variableDeclaration':([0,32,34,],[2,2,2,]),'functionSignature':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[3,58,3,3,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'declaredIdentifier':([0,32,34,36,66,85,122,152,153,157,167,181,182,],[4,4,4,89,89,89,89,89,89,89,89,89,89,]),'voidOrType':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[6,60,6,6,91,95,60,60,60,60,60,60,60,60,60,60,60,60,60,60,91,60,91,60,91,60,60,60,60,95,60,60,91,91,60,91,60,60,91,60,91,91,]),'expression':([0,25,32,34,36,39,40,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[7,57,7,7,79,96,98,79,120,79,137,141,143,145,147,149,96,98,155,79,79,98,79,165,98,79,179,79,79,]),'type':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'orExpression':([0,25,32,34,36,39,40,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'andExpression':([0,25,32,34,36,39,40,42,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[16,16,16,16,16,16,16,100,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'equalityExpression':([0,25,32,34,36,39,40,42,43,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[17,17,17,17,17,17,17,17,101,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'relacionalExpression':([0,25,32,34,36,39,40,42,43,44,45,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[18,18,18,18,18,18,18,18,18,102,103,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'addExpression':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[19,19,19,19,19,19,19,19,19,19,19,104,105,106,107,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'multExpression':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,50,51,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,108,109,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'unaryExpression':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,110,111,112,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'primary':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'functionCall':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'literal':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[24,24,24,24,90,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,90,24,90,24,90,24,24,24,24,24,24,24,90,90,24,90,24,24,90,24,90,90,]),'booleanLiteral':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'listLiteralID':([0,25,32,34,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,66,81,85,121,122,123,125,128,129,132,135,139,152,153,154,157,158,163,167,172,181,182,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'functionBody':([3,],[34,]),'block':([3,36,66,85,152,153,157,167,181,182,],[35,68,68,68,68,68,68,68,68,68,]),'formalParameterList':([5,41,59,88,114,130,133,],[37,99,37,37,99,99,99,]),'listLiteral':([5,59,88,128,],[38,38,38,148,]),'statements':([36,66,181,182,],[64,116,183,184,]),'statement':([36,66,85,152,153,157,167,181,182,],[66,66,124,160,161,164,173,66,66,]),'nonLabelledStatement':([36,66,85,152,153,157,167,181,182,],[67,67,67,67,67,67,67,67,67,]),'expressionStatement':([36,66,85,152,153,157,167,181,182,],[69,69,69,69,69,69,69,69,69,]),'localVariableDeclaration':([36,66,85,122,152,153,157,167,181,182,],[70,70,70,142,70,70,70,70,70,70,]),'returnStatement':([36,66,85,152,153,157,167,181,182,],[71,71,71,71,71,71,71,71,71,]),'ifStatement':([36,66,85,152,153,157,167,181,182,],[72,72,72,72,72,72,72,72,72,]),'forStatement':([36,66,85,152,153,157,167,181,182,],[73,73,73,73,73,73,73,73,73,]),'whileStatement':([36,66,85,152,153,157,167,181,182,],[74,74,74,74,74,74,74,74,74,]),'doStatement':([36,66,85,152,153,157,167,181,182,],[75,75,75,75,75,75,75,75,75,]),'switchStatement':([36,66,85,152,153,157,167,181,182,],[76,76,76,76,76,76,76,76,76,]),'breakStatement':([36,66,85,152,153,157,167,181,182,],[77,77,77,77,77,77,77,77,77,]),'initializedVariableDeclaration':([36,66,85,122,152,153,157,167,181,182,],[80,80,80,80,80,80,80,80,80,80,]),'normalFormalParameters':([39,132,],[93,150,]),'simpleFormalParameter':([39,132,],[94,94,]),'expressionList':([40,135,154,163,],[97,151,162,168,]),'forLoopParts':([122,],[138,]),'forInitializerStatement':([122,],[139,]),'switchCaseRepetition':([166,171,],[170,178,]),'switchCase':([166,171,],[171,171,]),'defaultCase':([170,],[176,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> topLevel","S'",1,None,None,None),
  ('topLevel -> variableDeclaration PCOMMA','topLevel',2,'p_topLevelDefinition','DartParser.py',8),
  ('topLevel -> variableDeclaration PCOMMA topLevel','topLevel',3,'p_topLevelDefinition','DartParser.py',9),
  ('topLevel -> functionSignature functionBody','topLevel',2,'p_topLevelDefinition','DartParser.py',10),
  ('topLevel -> functionSignature functionBody topLevel','topLevel',3,'p_topLevelDefinition','DartParser.py',11),
  ('variableDeclaration -> declaredIdentifier','variableDeclaration',1,'p_variableDeclaration','DartParser.py',24),
  ('variableDeclaration -> variableDeclaration COMMA ID','variableDeclaration',3,'p_variableDeclaration','DartParser.py',25),
  ('declaredIdentifier -> voidOrType ID','declaredIdentifier',2,'p_declaredIdentifier','DartParser.py',33),
  ('declaredIdentifier -> expression','declaredIdentifier',1,'p_declaredIdentifier','DartParser.py',34),
  ('voidOrType -> type','voidOrType',1,'p_voidOrType','DartParser.py',42),
  ('type -> VAR','type',1,'p_type','DartParser.py',51),
  ('type -> INT','type',1,'p_type','DartParser.py',52),
  ('type -> FLOAT','type',1,'p_type','DartParser.py',53),
  ('type -> CHAR','type',1,'p_type','DartParser.py',54),
  ('type -> STRING','type',1,'p_type','DartParser.py',55),
  ('type -> VOID','type',1,'p_type','DartParser.py',56),
  ('functionSignature -> ID formalParameterList','functionSignature',2,'p_functionSignature','DartParser.py',60),
  ('functionSignature -> voidOrType ID formalParameterList','functionSignature',3,'p_functionSignature','DartParser.py',61),
  ('formalParameterList -> LPAREN RPAREN','formalParameterList',2,'p_formalParameterList','DartParser.py',69),
  ('formalParameterList -> LPAREN normalFormalParameters RPAREN','formalParameterList',3,'p_formalParameterList','DartParser.py',70),
  ('normalFormalParameters -> simpleFormalParameter','normalFormalParameters',1,'p_normalFormalParameters','DartParser.py',78),
  ('normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters','normalFormalParameters',3,'p_normalFormalParameters','DartParser.py',79),
  ('simpleFormalParameter -> voidOrType ID','simpleFormalParameter',2,'p_simlpleFormalParameter','DartParser.py',87),
  ('simpleFormalParameter -> expression','simpleFormalParameter',1,'p_simlpleFormalParameter','DartParser.py',88),
  ('functionBody -> block','functionBody',1,'p_functionBody','DartParser.py',96),
  ('block -> LCHAV statements RCHAV','block',3,'p_block','DartParser.py',101),
  ('block -> LCHAV RCHAV','block',2,'p_block','DartParser.py',102),
  ('statements -> statement statements','statements',2,'p_statements','DartParser.py',109),
  ('statements -> statement','statements',1,'p_statements','DartParser.py',110),
  ('statement -> nonLabelledStatement','statement',1,'p_statement','DartParser.py',117),
  ('nonLabelledStatement -> block','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',122),
  ('nonLabelledStatement -> expressionStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',123),
  ('nonLabelledStatement -> localVariableDeclaration','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',124),
  ('nonLabelledStatement -> returnStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',125),
  ('nonLabelledStatement -> ifStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',126),
  ('nonLabelledStatement -> forStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',127),
  ('nonLabelledStatement -> whileStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',128),
  ('nonLabelledStatement -> doStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',129),
  ('nonLabelledStatement -> switchStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',130),
  ('nonLabelledStatement -> breakStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParser.py',131),
  ('localVariableDeclaration -> initializedVariableDeclaration PCOMMA','localVariableDeclaration',2,'p_localVariableDeclaration','DartParser.py',155),
  ('initializedVariableDeclaration -> declaredIdentifier','initializedVariableDeclaration',1,'p_initializedVariableDeclaration','DartParser.py',160),
  ('initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParser.py',161),
  ('initializedVariableDeclaration -> declaredIdentifier ATRIBUIR listLiteral','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParser.py',162),
  ('initializedVariableDeclaration -> literal ATRIBUIR expression','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParser.py',163),
  ('expressionStatement -> PCOMMA','expressionStatement',1,'p_expressionStatement','DartParser.py',176),
  ('expressionStatement -> expression PCOMMA','expressionStatement',2,'p_expressionStatement','DartParser.py',177),
  ('expression -> orExpression','expression',1,'p_expression','DartParser.py',185),
  ('orExpression -> andExpression','orExpression',1,'p_orExpression','DartParser.py',189),
  ('orExpression -> orExpression OR andExpression','orExpression',3,'p_orExpression','DartParser.py',190),
  ('andExpression -> equalityExpression','andExpression',1,'p_andExpression','DartParser.py',198),
  ('andExpression -> andExpression AND equalityExpression','andExpression',3,'p_andExpression','DartParser.py',199),
  ('equalityExpression -> relacionalExpression','equalityExpression',1,'p_equalityExpression','DartParser.py',206),
  ('equalityExpression -> equalityExpression IGUAL relacionalExpression','equalityExpression',3,'p_equalityExpression','DartParser.py',207),
  ('equalityExpression -> equalityExpression NEG relacionalExpression','equalityExpression',3,'p_equalityExpression','DartParser.py',208),
  ('relacionalExpression -> addExpression','relacionalExpression',1,'p_relacionalExpression','DartParser.py',217),
  ('relacionalExpression -> relacionalExpression MENOR addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',218),
  ('relacionalExpression -> relacionalExpression MAIOR addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',219),
  ('relacionalExpression -> relacionalExpression MENORI addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',220),
  ('relacionalExpression -> relacionalExpression MAIORI addExpression','relacionalExpression',3,'p_relacionalExpression','DartParser.py',221),
  ('addExpression -> multExpression','addExpression',1,'p_addExpression','DartParser.py',229),
  ('addExpression -> addExpression SOMA multExpression','addExpression',3,'p_addExpression','DartParser.py',230),
  ('addExpression -> addExpression SUBTRAIR multExpression','addExpression',3,'p_addExpression','DartParser.py',231),
  ('multExpression -> unaryExpression','multExpression',1,'p_multExpression','DartParser.py',239),
  ('multExpression -> multExpression VEZES unaryExpression','multExpression',3,'p_multExpression','DartParser.py',240),
  ('multExpression -> multExpression DIVIDIR unaryExpression','multExpression',3,'p_multExpression','DartParser.py',241),
  ('multExpression -> multExpression RESTO unaryExpression','multExpression',3,'p_multExpression','DartParser.py',242),
  ('unaryExpression -> primary','unaryExpression',1,'p_unaryExpression','DartParser.py',250),
  ('unaryExpression -> functionCall','unaryExpression',1,'p_unaryExpression','DartParser.py',251),
  ('unaryExpression -> unaryExpression SOMASOMA','unaryExpression',2,'p_unaryExpression','DartParser.py',252),
  ('unaryExpression -> unaryExpression SUBSUB','unaryExpression',2,'p_unaryExpression','DartParser.py',253),
  ('functionCall -> functionSignature','functionCall',1,'p_functionCall','DartParser.py',264),
  ('primary -> literal','primary',1,'p_primary','DartParser.py',268),
  ('primary -> LPAREN expression RPAREN','primary',3,'p_primary','DartParser.py',269),
  ('literal -> ID','literal',1,'p_literal','DartParser.py',276),
  ('literal -> booleanLiteral','literal',1,'p_literal','DartParser.py',277),
  ('literal -> listLiteralID','literal',1,'p_literal','DartParser.py',278),
  ('literal -> NUMBER','literal',1,'p_literal','DartParser.py',279),
  ('literal -> LITERAL_STRING','literal',1,'p_literal','DartParser.py',280),
  ('listLiteral -> LCON expressionList RCON','listLiteral',3,'p_listLiteral','DartParser.py',292),
  ('listLiteralID -> ID listLiteral','listLiteralID',2,'p_listLiteralID','DartParser.py',296),
  ('booleanLiteral -> TRUE','booleanLiteral',1,'p_booleanLiteral','DartParser.py',300),
  ('booleanLiteral -> FALSE','booleanLiteral',1,'p_booleanLiteral','DartParser.py',301),
  ('expressionList -> expression COMMA','expressionList',2,'p_expresionList','DartParser.py',309),
  ('expressionList -> expression','expressionList',1,'p_expresionList','DartParser.py',310),
  ('expressionList -> expression COMMA expressionList','expressionList',3,'p_expresionList','DartParser.py',311),
  ('returnStatement -> RETURN PCOMMA','returnStatement',2,'p_returnStatement','DartParser.py',319),
  ('returnStatement -> RETURN expression PCOMMA','returnStatement',3,'p_returnStatement','DartParser.py',320),
  ('ifStatement -> IF LPAREN expression RPAREN statement','ifStatement',5,'p_ifStatement','DartParser.py',325),
  ('ifStatement -> IF LPAREN expression RPAREN statement ELSE statement','ifStatement',7,'p_ifStatement','DartParser.py',326),
  ('forStatement -> FOR LPAREN forLoopParts RPAREN statement','forStatement',5,'p_forStatement','DartParser.py',334),
  ('forLoopParts -> forInitializerStatement PCOMMA','forLoopParts',2,'p_forLoopParts','DartParser.py',339),
  ('forLoopParts -> forInitializerStatement PCOMMA expressionList','forLoopParts',3,'p_forLoopParts','DartParser.py',340),
  ('forLoopParts -> forInitializerStatement expression PCOMMA','forLoopParts',3,'p_forLoopParts','DartParser.py',341),
  ('forLoopParts -> forInitializerStatement expression PCOMMA expressionList','forLoopParts',4,'p_forLoopParts','DartParser.py',342),
  ('forInitializerStatement -> localVariableDeclaration','forInitializerStatement',1,'p_forInitializerStatement','DartParser.py',354),
  ('forInitializerStatement -> PCOMMA','forInitializerStatement',1,'p_forInitializerStatement','DartParser.py',355),
  ('forInitializerStatement -> expression PCOMMA','forInitializerStatement',2,'p_forInitializerStatement','DartParser.py',356),
  ('whileStatement -> WHILE LPAREN expression RPAREN statement','whileStatement',5,'p_whileStatement','DartParser.py',366),
  ('doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA','doStatement',7,'p_doStatement','DartParser.py',371),
  ('switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV','switchStatement',7,'p_switchStatement','DartParser.py',376),
  ('switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV','switchStatement',8,'p_switchStatement','DartParser.py',377),
  ('switchCaseRepetition -> switchCase switchCaseRepetition','switchCaseRepetition',2,'p_switchCaseRepetition','DartParser.py',385),
  ('switchCaseRepetition -> switchCase','switchCaseRepetition',1,'p_switchCaseRepetition','DartParser.py',386),
  ('switchCase -> CASE expression PONTOS statements','switchCase',4,'p_switchCase','DartParser.py',394),
  ('defaultCase -> DEFAULT PONTOS statements','defaultCase',3,'p_defaultCase','DartParser.py',403),
  ('label -> ID PONTOS','label',2,'p_label','DartParser.py',412),
  ('breakStatement -> BREAK PCOMMA','breakStatement',2,'p_breakStatement','DartParser.py',417),
  ('breakStatement -> BREAK ID PCOMMA','breakStatement',3,'p_breakStatement','DartParser.py',418),
]
