
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ATRIBUIR BREAK CASE CHAR CLASS COMMA CONST DEFAULT DIVIDIR DO ELSE FALSE FINAL FLOAT FOR FUNCTION ID IF IGUAL INT INTEGER LCHAV LCON LITERAL_STRING LPAREN MAIOR MAIORI MENOR MENORI NEG NOT NULL NUMBER OR PCOMMA PONTOS RCHAV RCON RESTO RETURN RPAREN SOMA SOMASOMA STRING SUBSUB SUBTRAIR SWITCH TRUE VAR VEZES VOID WHILE topLevel : variableDeclaration PCOMMA\n                 | variableDeclaration PCOMMA topLevel\n                 | functionSignature functionBody\n                 | functionSignature functionBody topLevel\n                  variableDeclaration : declaredIdentifier \n                            | variableDeclaration COMMA ID  declaredIdentifier : voidOrType ID \n                           | IDvoidOrType : type\n                  | VOID type : VAR\n             | INT\n             | FLOAT\n             | CHAR \n             | STRING functionSignature : ID formalParameterList\n                          | voidOrType ID formalParameterList formalParameterList : LPAREN RPAREN \n                            | LPAREN normalFormalParameters RPAREN  normalFormalParameters : simpleFormalParameter \n                               | simpleFormalParameter COMMA normalFormalParameters  simpleFormalParameter : ID \n                              | voidOrType ID\n                              | expression functionBody : block block : LCHAV statements RCHAV              \n              | LCHAV RCHAV statements : statement statements\n                   | statement  statement : nonLabelledStatement  nonLabelledStatement : block\n                             | expressionStatement\n                             | localVariableDeclaration\n                             | returnStatement\n                             | ifStatement\n                             | forStatement\n                             | whileStatement\n                             | doStatement\n                             | switchStatement \n                             | breakStatement  localVariableDeclaration : initializedVariableDeclaration PCOMMA initializedVariableDeclaration : declaredIdentifier\n                                       | declaredIdentifier ATRIBUIR expression\n                                       | listLiteral ATRIBUIR expression\n                                       | declaredIdentifier ATRIBUIR listLiteral\n                                       | listLiteral ATRIBUIR listLiteral\n                                        expressionStatement : PCOMMA\n                            | expression PCOMMA  expression : orExpression orExpression : andExpression\n                    | orExpression OR andExpressionandExpression : equalityExpression\n                    | andExpression AND equalityExpressionequalityExpression : relacionalExpression\n                          | equalityExpression IGUAL relacionalExpression \n                          | equalityExpression NEG relacionalExpression relacionalExpression : addExpression\n                    | relacionalExpression MENOR addExpression\n                    | relacionalExpression MAIOR addExpression\n                    | relacionalExpression MENORI addExpression\n                    | relacionalExpression MAIORI addExpressionaddExpression : multExpression \n                     | addExpression SOMA multExpression\n                     | addExpression SUBTRAIR multExpressionmultExpression : unaryExpression \n                      | multExpression VEZES unaryExpression\n                      | multExpression DIVIDIR unaryExpression\n                      | multExpression RESTO unaryExpressionunaryExpression : primary\n                       | functionCall\n                       | unaryExpression SOMASOMA\n                       | unaryExpression SUBSUBfunctionCall : functionSignature primary : literal \n                | LPAREN expression RPAREN  literal : ID \n                | listLiteral\n                | booleanLiteral \n                | NUMBER\n                | LITERAL_STRINGlistLiteral : LCON RCON\n                   | LCON expressionList RCON  booleanLiteral : TRUE \n                       | FALSE  expressionList : expression COMMA\n                       | expression\n                       | expression COMMA expressionList  returnStatement : RETURN PCOMMA \n                        | RETURN expression PCOMMAifStatement : IF LPAREN expression RPAREN statement \n                   | IF LPAREN expression RPAREN statement ELSE statement  forStatement : FOR LPAREN forLoopParts RPAREN statement  forLoopParts : forInitializerStatement PCOMMA \n                     | forInitializerStatement PCOMMA expressionList \n                     | forInitializerStatement expression PCOMMA \n                     | forInitializerStatement expression PCOMMA expressionList  forInitializerStatement : localVariableDeclaration \n                                | PCOMMA \n                                | expression PCOMMA  whileStatement : WHILE LPAREN expression RPAREN statement doStatement : DO statement WHILE LPAREN expression RPAREN PCOMMA  switchStatement : SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV \n                        | SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV switchCaseRepetition : switchCase switchCaseRepetition\n                             | switchCase  switchCase : CASE expression PONTOS statements \n                   | label switchCase defaultCase : DEFAULT PONTOS statements \n                    | label defaultCase label : ID PONTOS  breakStatement : BREAK PCOMMA \n                       | BREAK ID PCOMMA'
    
_lr_action_items = {'ID':([0,6,7,8,9,10,11,12,13,14,15,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,49,55,56,75,79,80,81,82,83,86,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,167,168,171,172,173,174,176,177,178,181,182,184,185,186,187,189,191,],[5,21,-9,-10,-11,-12,-13,-14,-15,5,23,5,-25,50,74,-27,50,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,85,85,50,94,99,85,118,-26,-28,-48,-41,-88,120,85,50,85,85,-111,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,74,-89,85,-98,-97,-112,85,50,50,85,-99,50,85,-90,-92,85,-100,175,50,175,175,85,175,-91,-101,-102,175,-104,-107,-110,-103,50,50,-106,]),'VOID':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[8,8,8,-25,8,8,-27,8,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,8,8,8,8,-26,-48,-41,-88,8,8,8,8,-111,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-89,8,-98,-97,-112,8,8,8,8,-99,8,8,-90,-92,8,-100,8,8,-91,-101,-102,-103,8,8,]),'VAR':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[9,9,9,-25,9,9,-27,9,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,9,9,9,9,-26,-48,-41,-88,9,9,9,9,-111,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-89,9,-98,-97,-112,9,9,9,9,-99,9,9,-90,-92,9,-100,9,9,-91,-101,-102,-103,9,9,]),'INT':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[10,10,10,-25,10,10,-27,10,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,10,10,10,10,-26,-48,-41,-88,10,10,10,10,-111,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-89,10,-98,-97,-112,10,10,10,10,-99,10,10,-90,-92,10,-100,10,10,-91,-101,-102,-103,10,10,]),'FLOAT':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[11,11,11,-25,11,11,-27,11,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,11,11,11,11,-26,-48,-41,-88,11,11,11,11,-111,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-89,11,-98,-97,-112,11,11,11,11,-99,11,11,-90,-92,11,-100,11,11,-91,-101,-102,-103,11,11,]),'CHAR':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[12,12,12,-25,12,12,-27,12,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,12,12,12,12,-26,-48,-41,-88,12,12,12,12,-111,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-89,12,-98,-97,-112,12,12,12,12,-99,12,12,-90,-92,12,-100,12,12,-91,-101,-102,-103,12,12,]),'STRING':([0,14,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[13,13,13,-25,13,13,-27,13,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,13,13,13,13,-26,-48,-41,-88,13,13,13,13,-111,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-89,13,-98,-97,-112,13,13,13,13,-99,13,13,-90,-92,13,-100,13,13,-91,-101,-102,-103,13,13,]),'$end':([1,14,16,17,22,24,26,79,],[0,-1,-3,-25,-2,-4,-27,-26,]),'PCOMMA':([2,4,5,18,19,21,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,49,50,51,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,77,78,79,81,82,83,84,85,89,93,94,99,100,114,115,116,119,122,124,125,126,127,131,132,133,134,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,152,153,155,156,157,161,162,165,168,170,176,177,178,186,187,189,],[14,-5,-8,39,-16,-7,-6,-27,39,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,81,82,83,39,93,-8,-49,-42,-77,-50,-52,-54,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-77,-17,-26,-48,-41,-88,119,-76,125,-111,131,-7,-81,-71,-72,-19,-89,-75,154,-98,156,-97,-112,-51,-43,-45,-46,-44,-53,-82,-55,-56,-58,-59,-60,-61,-63,-64,-66,-67,-68,39,39,164,-99,39,-90,-92,-100,39,177,-91,-101,-102,-103,39,39,]),'COMMA':([2,4,5,19,21,23,51,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,76,77,78,85,100,102,114,115,116,118,122,132,137,138,140,141,142,143,144,145,146,147,148,149,150,],[15,-5,-8,-16,-7,-6,-49,-50,-52,-54,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,117,-22,-24,-77,-17,-76,-81,139,-71,-72,-19,-23,-75,-51,-53,-82,-55,-56,-58,-59,-60,-61,-63,-64,-66,-67,-68,]),'LCHAV':([3,18,19,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,71,78,79,81,82,83,93,116,119,131,152,153,157,159,161,162,165,168,176,177,178,186,187,189,],[18,18,-16,-27,18,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,18,-18,-17,-26,-48,-41,-88,-111,-19,-89,-112,18,18,18,167,-90,-92,-100,18,-91,-101,-102,-103,18,18,]),'LPAREN':([5,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,50,56,74,79,81,82,83,85,87,89,90,92,93,95,96,97,98,99,103,104,105,106,107,108,109,110,111,112,113,117,118,119,120,124,125,127,129,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[20,44,44,20,-27,44,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,44,87,44,89,90,44,92,20,44,20,-26,-48,-41,-88,20,44,44,44,44,-111,44,44,44,44,20,44,44,44,44,44,44,44,44,44,44,44,44,20,-89,20,44,-98,-97,158,-112,44,44,44,44,-99,44,44,-90,-92,44,-100,44,44,-91,-101,-102,-103,44,44,]),'RCHAV':([18,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,79,80,81,82,83,93,119,131,161,162,165,171,172,176,177,178,179,182,184,186,188,190,191,],[26,79,-27,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,-26,-28,-48,-41,-88,-111,-89,-112,-90,-92,-100,178,-105,-91,-101,-102,186,-104,-107,-103,-109,-108,-106,]),'RETURN':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,79,81,82,83,93,119,131,152,153,157,161,162,165,168,176,177,178,186,187,189,],[42,-27,42,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,42,-26,-48,-41,-88,-111,-89,-112,42,42,42,-90,-92,-100,42,-91,-101,-102,-103,42,42,]),'IF':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,79,81,82,83,93,119,131,152,153,157,161,162,165,168,176,177,178,186,187,189,],[43,-27,43,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,43,-26,-48,-41,-88,-111,-89,-112,43,43,43,-90,-92,-100,43,-91,-101,-102,-103,43,43,]),'FOR':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,79,81,82,83,93,119,131,152,153,157,161,162,165,168,176,177,178,186,187,189,],[45,-27,45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,45,-26,-48,-41,-88,-111,-89,-112,45,45,45,-90,-92,-100,45,-91,-101,-102,-103,45,45,]),'WHILE':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,79,81,82,83,91,93,119,131,152,153,157,161,162,165,168,176,177,178,186,187,189,],[46,-27,46,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,46,-26,-48,-41,-88,129,-111,-89,-112,46,46,46,-90,-92,-100,46,-91,-101,-102,-103,46,46,]),'DO':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,79,81,82,83,93,119,131,152,153,157,161,162,165,168,176,177,178,186,187,189,],[47,-27,47,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,47,-26,-48,-41,-88,-111,-89,-112,47,47,47,-90,-92,-100,47,-91,-101,-102,-103,47,47,]),'SWITCH':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,79,81,82,83,93,119,131,152,153,157,161,162,165,168,176,177,178,186,187,189,],[48,-27,48,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,48,-26,-48,-41,-88,-111,-89,-112,48,48,48,-90,-92,-100,48,-91,-101,-102,-103,48,48,]),'BREAK':([18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,47,79,81,82,83,93,119,131,152,153,157,161,162,165,168,176,177,178,186,187,189,],[49,-27,49,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,49,-26,-48,-41,-88,-111,-89,-112,49,49,49,-90,-92,-100,49,-91,-101,-102,-103,49,49,]),'LCON':([18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[56,56,-27,56,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,56,56,56,56,-26,-48,-41,-88,56,56,56,56,-111,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-89,56,-98,-97,-112,56,56,56,56,-99,56,56,-90,-92,56,-100,56,56,-91,-101,-102,-103,56,56,]),'NUMBER':([18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[67,67,-27,67,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,67,67,67,67,-26,-48,-41,-88,67,67,67,67,-111,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-89,67,-98,-97,-112,67,67,67,67,-99,67,67,-90,-92,67,-100,67,67,-91,-101,-102,-103,67,67,]),'LITERAL_STRING':([18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[68,68,-27,68,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,68,68,68,68,-26,-48,-41,-88,68,68,68,68,-111,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-89,68,-98,-97,-112,68,68,68,68,-99,68,68,-90,-92,68,-100,68,68,-91,-101,-102,-103,68,68,]),'TRUE':([18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[69,69,-27,69,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,69,69,69,69,-26,-48,-41,-88,69,69,69,69,-111,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-89,69,-98,-97,-112,69,69,69,69,-99,69,69,-90,-92,69,-100,69,69,-91,-101,-102,-103,69,69,]),'FALSE':([18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,56,79,81,82,83,87,89,90,92,93,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,119,124,125,127,131,139,152,153,154,156,157,158,161,162,164,165,168,173,176,177,178,186,187,189,],[70,70,-27,70,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,70,70,70,70,-26,-48,-41,-88,70,70,70,70,-111,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-89,70,-98,-97,-112,70,70,70,70,-99,70,70,-90,-92,70,-100,70,70,-91,-101,-102,-103,70,70,]),'SOMASOMA':([19,50,53,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,148,149,150,],[-16,-76,-77,114,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,114,114,114,]),'SUBSUB':([19,50,53,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,148,149,150,],[-16,-76,-77,115,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,115,115,115,]),'VEZES':([19,50,53,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,146,147,148,149,150,],[-16,-76,-77,111,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,111,111,-66,-67,-68,]),'DIVIDIR':([19,50,53,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,146,147,148,149,150,],[-16,-76,-77,112,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,112,112,-66,-67,-68,]),'RESTO':([19,50,53,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,146,147,148,149,150,],[-16,-76,-77,113,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,113,113,-66,-67,-68,]),'SOMA':([19,50,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,142,143,144,145,146,147,148,149,150,],[-16,-76,-77,109,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,109,109,109,109,-63,-64,-66,-67,-68,]),'SUBTRAIR':([19,50,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,142,143,144,145,146,147,148,149,150,],[-16,-76,-77,110,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,110,110,110,110,-63,-64,-66,-67,-68,]),'MENOR':([19,50,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,140,141,142,143,144,145,146,147,148,149,150,],[-16,-76,-77,105,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,105,105,-58,-59,-60,-61,-63,-64,-66,-67,-68,]),'MAIOR':([19,50,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,140,141,142,143,144,145,146,147,148,149,150,],[-16,-76,-77,106,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,106,106,-58,-59,-60,-61,-63,-64,-66,-67,-68,]),'MENORI':([19,50,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,140,141,142,143,144,145,146,147,148,149,150,],[-16,-76,-77,107,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,107,107,-58,-59,-60,-61,-63,-64,-66,-67,-68,]),'MAIORI':([19,50,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,138,140,141,142,143,144,145,146,147,148,149,150,],[-16,-76,-77,108,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,-82,108,108,-58,-59,-60,-61,-63,-64,-66,-67,-68,]),'IGUAL':([19,50,53,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,137,138,140,141,142,143,144,145,146,147,148,149,150,],[-16,-76,-77,103,-54,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,103,-82,-55,-56,-58,-59,-60,-61,-63,-64,-66,-67,-68,]),'NEG':([19,50,53,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,134,135,137,138,140,141,142,143,144,145,146,147,148,149,150,],[-16,-76,-77,104,-54,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-77,-77,104,-82,-55,-56,-58,-59,-60,-61,-63,-64,-66,-67,-68,]),'AND':([19,50,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,132,134,135,137,138,140,141,142,143,144,145,146,147,148,149,150,],[-16,-76,-77,98,-52,-54,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,98,-77,-77,-53,-82,-55,-56,-58,-59,-60,-61,-63,-64,-66,-67,-68,]),'OR':([19,50,51,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,77,78,85,100,114,115,116,122,132,134,135,137,138,140,141,142,143,144,145,146,147,148,149,150,],[-16,-76,95,-77,-50,-52,-54,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-76,-77,-17,-76,-81,-71,-72,-19,-75,-51,-77,-77,-53,-82,-55,-56,-58,-59,-60,-61,-63,-64,-66,-67,-68,]),'RPAREN':([19,20,51,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,85,88,100,102,114,115,116,118,121,122,123,128,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,154,160,163,164,166,169,],[-16,71,-49,-50,-52,-54,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,116,-20,-22,-24,-77,-17,-76,122,-81,-86,-71,-72,-19,-23,152,-75,153,157,159,-51,-53,-82,-85,-55,-56,-58,-59,-60,-61,-63,-64,-66,-67,-68,-21,-93,-87,-94,-95,170,-96,]),'RCON':([19,51,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,77,78,85,100,101,102,114,115,116,122,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,160,],[-16,-49,-50,100,-52,-54,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-77,-17,-76,-81,138,-86,-71,-72,-19,-75,-51,-53,-82,-85,-55,-56,-58,-59,-60,-61,-63,-64,-66,-67,-68,-87,]),'PONTOS':([19,51,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,77,78,85,100,114,115,116,122,132,137,138,140,141,142,143,144,145,146,147,148,149,150,175,180,183,],[-16,-49,-50,-52,-54,-57,-62,-65,-69,-70,-74,-73,-78,-79,-80,-83,-84,-18,-77,-17,-76,-81,-71,-72,-19,-75,-51,-53,-82,-55,-56,-58,-59,-60,-61,-63,-64,-66,-67,-68,185,187,189,]),'CASE':([26,27,28,29,30,31,32,33,34,35,36,37,38,39,79,80,81,82,83,93,119,131,161,162,165,167,172,174,176,177,178,184,185,186,191,],[-27,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,-26,-28,-48,-41,-88,-111,-89,-112,-90,-92,-100,173,173,173,-91,-101,-102,-107,-110,-103,-106,]),'DEFAULT':([26,27,28,29,30,31,32,33,34,35,36,37,38,39,79,80,81,82,83,93,119,131,161,162,165,171,172,176,177,178,181,182,184,185,186,191,],[-27,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,-26,-28,-48,-41,-88,-111,-89,-112,-90,-92,-100,180,-105,-91,-101,-102,180,-104,-107,-110,-103,-106,]),'ELSE':([26,28,29,30,31,32,33,34,35,36,37,38,39,79,81,82,83,93,119,131,161,162,165,176,177,178,186,],[-27,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-47,-26,-48,-41,-88,-111,-89,-112,168,-92,-100,-91,-101,-102,-103,]),'ATRIBUIR':([50,52,53,99,100,138,],[-8,96,97,-7,-81,-82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'topLevel':([0,14,16,],[1,22,24,]),'variableDeclaration':([0,14,16,],[2,2,2,]),'functionSignature':([0,14,16,18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,124,139,152,153,154,157,158,164,168,173,187,189,],[3,3,3,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'declaredIdentifier':([0,14,16,18,27,47,89,152,153,157,168,187,189,],[4,4,4,52,52,52,52,52,52,52,52,52,52,]),'voidOrType':([0,14,16,18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,124,139,152,153,154,157,158,164,168,173,187,189,],[6,6,6,55,75,55,86,86,55,86,86,55,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,75,86,86,55,55,86,55,86,86,55,86,55,55,]),'type':([0,14,16,18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,124,139,152,153,154,157,158,164,168,173,187,189,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'functionBody':([3,],[16,]),'block':([3,18,27,47,152,153,157,168,187,189,],[17,29,29,29,29,29,29,29,29,29,]),'formalParameterList':([5,21,50,74,85,99,118,120,],[19,78,19,19,19,78,78,78,]),'statements':([18,27,187,189,],[25,80,190,191,]),'statement':([18,27,47,152,153,157,168,187,189,],[27,27,91,161,162,165,176,27,27,]),'nonLabelledStatement':([18,27,47,152,153,157,168,187,189,],[28,28,28,28,28,28,28,28,28,]),'expressionStatement':([18,27,47,152,153,157,168,187,189,],[30,30,30,30,30,30,30,30,30,]),'localVariableDeclaration':([18,27,47,89,152,153,157,168,187,189,],[31,31,31,127,31,31,31,31,31,31,]),'returnStatement':([18,27,47,152,153,157,168,187,189,],[32,32,32,32,32,32,32,32,32,]),'ifStatement':([18,27,47,152,153,157,168,187,189,],[33,33,33,33,33,33,33,33,33,]),'forStatement':([18,27,47,152,153,157,168,187,189,],[34,34,34,34,34,34,34,34,34,]),'whileStatement':([18,27,47,152,153,157,168,187,189,],[35,35,35,35,35,35,35,35,35,]),'doStatement':([18,27,47,152,153,157,168,187,189,],[36,36,36,36,36,36,36,36,36,]),'switchStatement':([18,27,47,152,153,157,168,187,189,],[37,37,37,37,37,37,37,37,37,]),'breakStatement':([18,27,47,152,153,157,168,187,189,],[38,38,38,38,38,38,38,38,38,]),'expression':([18,20,27,42,44,47,56,87,89,90,92,96,97,117,124,139,152,153,154,157,158,164,168,173,187,189,],[40,76,40,84,88,40,102,121,126,128,130,133,136,76,155,102,40,40,102,40,166,102,40,183,40,40,]),'initializedVariableDeclaration':([18,27,47,89,152,153,157,168,187,189,],[41,41,41,41,41,41,41,41,41,41,]),'orExpression':([18,20,27,42,44,47,56,87,89,90,92,96,97,117,124,139,152,153,154,157,158,164,168,173,187,189,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'listLiteral':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,124,139,152,153,154,157,158,164,168,173,187,189,],[53,77,53,77,77,53,77,77,53,77,77,77,134,135,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,53,53,77,53,77,77,53,77,53,53,]),'andExpression':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,117,124,139,152,153,154,157,158,164,168,173,187,189,],[54,54,54,54,54,54,54,54,54,54,54,132,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'equalityExpression':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,117,124,139,152,153,154,157,158,164,168,173,187,189,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,137,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'relacionalExpression':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,117,124,139,152,153,154,157,158,164,168,173,187,189,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,140,141,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'addExpression':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,117,124,139,152,153,154,157,158,164,168,173,187,189,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,142,143,144,145,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'multExpression':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,109,110,117,124,139,152,153,154,157,158,164,168,173,187,189,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,146,147,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'unaryExpression':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,124,139,152,153,154,157,158,164,168,173,187,189,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,148,149,150,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'primary':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,124,139,152,153,154,157,158,164,168,173,187,189,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'functionCall':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,124,139,152,153,154,157,158,164,168,173,187,189,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'literal':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,124,139,152,153,154,157,158,164,168,173,187,189,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'booleanLiteral':([18,20,27,42,44,47,56,87,89,90,92,95,96,97,98,103,104,105,106,107,108,109,110,111,112,113,117,124,139,152,153,154,157,158,164,168,173,187,189,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'normalFormalParameters':([20,117,],[72,151,]),'simpleFormalParameter':([20,117,],[73,73,]),'expressionList':([56,139,154,164,],[101,160,163,169,]),'forLoopParts':([89,],[123,]),'forInitializerStatement':([89,],[124,]),'switchCaseRepetition':([167,172,],[171,182,]),'switchCase':([167,172,174,],[172,172,184,]),'label':([167,171,172,174,181,],[174,181,174,174,181,]),'defaultCase':([171,181,],[179,188,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> topLevel","S'",1,None,None,None),
  ('topLevel -> variableDeclaration PCOMMA','topLevel',2,'p_topLevelDefinition','DartParserAtual.py',8),
  ('topLevel -> variableDeclaration PCOMMA topLevel','topLevel',3,'p_topLevelDefinition','DartParserAtual.py',9),
  ('topLevel -> functionSignature functionBody','topLevel',2,'p_topLevelDefinition','DartParserAtual.py',10),
  ('topLevel -> functionSignature functionBody topLevel','topLevel',3,'p_topLevelDefinition','DartParserAtual.py',11),
  ('variableDeclaration -> declaredIdentifier','variableDeclaration',1,'p_variableDeclaration','DartParserAtual.py',24),
  ('variableDeclaration -> variableDeclaration COMMA ID','variableDeclaration',3,'p_variableDeclaration','DartParserAtual.py',25),
  ('declaredIdentifier -> voidOrType ID','declaredIdentifier',2,'p_declaredIdentifier','DartParserAtual.py',33),
  ('declaredIdentifier -> ID','declaredIdentifier',1,'p_declaredIdentifier','DartParserAtual.py',34),
  ('voidOrType -> type','voidOrType',1,'p_voidOrType','DartParserAtual.py',43),
  ('voidOrType -> VOID','voidOrType',1,'p_voidOrType','DartParserAtual.py',44),
  ('type -> VAR','type',1,'p_type','DartParserAtual.py',52),
  ('type -> INT','type',1,'p_type','DartParserAtual.py',53),
  ('type -> FLOAT','type',1,'p_type','DartParserAtual.py',54),
  ('type -> CHAR','type',1,'p_type','DartParserAtual.py',55),
  ('type -> STRING','type',1,'p_type','DartParserAtual.py',56),
  ('functionSignature -> ID formalParameterList','functionSignature',2,'p_functionSignature','DartParserAtual.py',60),
  ('functionSignature -> voidOrType ID formalParameterList','functionSignature',3,'p_functionSignature','DartParserAtual.py',61),
  ('formalParameterList -> LPAREN RPAREN','formalParameterList',2,'p_formalParameterList','DartParserAtual.py',69),
  ('formalParameterList -> LPAREN normalFormalParameters RPAREN','formalParameterList',3,'p_formalParameterList','DartParserAtual.py',70),
  ('normalFormalParameters -> simpleFormalParameter','normalFormalParameters',1,'p_normalFormalParameters','DartParserAtual.py',79),
  ('normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters','normalFormalParameters',3,'p_normalFormalParameters','DartParserAtual.py',80),
  ('simpleFormalParameter -> ID','simpleFormalParameter',1,'p_simlpleFormalParameter','DartParserAtual.py',88),
  ('simpleFormalParameter -> voidOrType ID','simpleFormalParameter',2,'p_simlpleFormalParameter','DartParserAtual.py',89),
  ('simpleFormalParameter -> expression','simpleFormalParameter',1,'p_simlpleFormalParameter','DartParserAtual.py',90),
  ('functionBody -> block','functionBody',1,'p_functionBody','DartParserAtual.py',101),
  ('block -> LCHAV statements RCHAV','block',3,'p_block','DartParserAtual.py',106),
  ('block -> LCHAV RCHAV','block',2,'p_block','DartParserAtual.py',107),
  ('statements -> statement statements','statements',2,'p_statements','DartParserAtual.py',114),
  ('statements -> statement','statements',1,'p_statements','DartParserAtual.py',115),
  ('statement -> nonLabelledStatement','statement',1,'p_statement','DartParserAtual.py',122),
  ('nonLabelledStatement -> block','nonLabelledStatement',1,'p_nonLabelledStatement','DartParserAtual.py',127),
  ('nonLabelledStatement -> expressionStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParserAtual.py',128),
  ('nonLabelledStatement -> localVariableDeclaration','nonLabelledStatement',1,'p_nonLabelledStatement','DartParserAtual.py',129),
  ('nonLabelledStatement -> returnStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParserAtual.py',130),
  ('nonLabelledStatement -> ifStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParserAtual.py',131),
  ('nonLabelledStatement -> forStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParserAtual.py',132),
  ('nonLabelledStatement -> whileStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParserAtual.py',133),
  ('nonLabelledStatement -> doStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParserAtual.py',134),
  ('nonLabelledStatement -> switchStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParserAtual.py',135),
  ('nonLabelledStatement -> breakStatement','nonLabelledStatement',1,'p_nonLabelledStatement','DartParserAtual.py',136),
  ('localVariableDeclaration -> initializedVariableDeclaration PCOMMA','localVariableDeclaration',2,'p_localVariableDeclaration','DartParserAtual.py',160),
  ('initializedVariableDeclaration -> declaredIdentifier','initializedVariableDeclaration',1,'p_initializedVariableDeclaration','DartParserAtual.py',165),
  ('initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParserAtual.py',166),
  ('initializedVariableDeclaration -> listLiteral ATRIBUIR expression','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParserAtual.py',167),
  ('initializedVariableDeclaration -> declaredIdentifier ATRIBUIR listLiteral','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParserAtual.py',168),
  ('initializedVariableDeclaration -> listLiteral ATRIBUIR listLiteral','initializedVariableDeclaration',3,'p_initializedVariableDeclaration','DartParserAtual.py',169),
  ('expressionStatement -> PCOMMA','expressionStatement',1,'p_expressionStatement','DartParserAtual.py',185),
  ('expressionStatement -> expression PCOMMA','expressionStatement',2,'p_expressionStatement','DartParserAtual.py',186),
  ('expression -> orExpression','expression',1,'p_expression','DartParserAtual.py',194),
  ('orExpression -> andExpression','orExpression',1,'p_orExpression','DartParserAtual.py',198),
  ('orExpression -> orExpression OR andExpression','orExpression',3,'p_orExpression','DartParserAtual.py',199),
  ('andExpression -> equalityExpression','andExpression',1,'p_andExpression','DartParserAtual.py',207),
  ('andExpression -> andExpression AND equalityExpression','andExpression',3,'p_andExpression','DartParserAtual.py',208),
  ('equalityExpression -> relacionalExpression','equalityExpression',1,'p_equalityExpression','DartParserAtual.py',215),
  ('equalityExpression -> equalityExpression IGUAL relacionalExpression','equalityExpression',3,'p_equalityExpression','DartParserAtual.py',216),
  ('equalityExpression -> equalityExpression NEG relacionalExpression','equalityExpression',3,'p_equalityExpression','DartParserAtual.py',217),
  ('relacionalExpression -> addExpression','relacionalExpression',1,'p_relacionalExpression','DartParserAtual.py',226),
  ('relacionalExpression -> relacionalExpression MENOR addExpression','relacionalExpression',3,'p_relacionalExpression','DartParserAtual.py',227),
  ('relacionalExpression -> relacionalExpression MAIOR addExpression','relacionalExpression',3,'p_relacionalExpression','DartParserAtual.py',228),
  ('relacionalExpression -> relacionalExpression MENORI addExpression','relacionalExpression',3,'p_relacionalExpression','DartParserAtual.py',229),
  ('relacionalExpression -> relacionalExpression MAIORI addExpression','relacionalExpression',3,'p_relacionalExpression','DartParserAtual.py',230),
  ('addExpression -> multExpression','addExpression',1,'p_addExpression','DartParserAtual.py',238),
  ('addExpression -> addExpression SOMA multExpression','addExpression',3,'p_addExpression','DartParserAtual.py',239),
  ('addExpression -> addExpression SUBTRAIR multExpression','addExpression',3,'p_addExpression','DartParserAtual.py',240),
  ('multExpression -> unaryExpression','multExpression',1,'p_multExpression','DartParserAtual.py',248),
  ('multExpression -> multExpression VEZES unaryExpression','multExpression',3,'p_multExpression','DartParserAtual.py',249),
  ('multExpression -> multExpression DIVIDIR unaryExpression','multExpression',3,'p_multExpression','DartParserAtual.py',250),
  ('multExpression -> multExpression RESTO unaryExpression','multExpression',3,'p_multExpression','DartParserAtual.py',251),
  ('unaryExpression -> primary','unaryExpression',1,'p_unaryExpression','DartParserAtual.py',259),
  ('unaryExpression -> functionCall','unaryExpression',1,'p_unaryExpression','DartParserAtual.py',260),
  ('unaryExpression -> unaryExpression SOMASOMA','unaryExpression',2,'p_unaryExpression','DartParserAtual.py',261),
  ('unaryExpression -> unaryExpression SUBSUB','unaryExpression',2,'p_unaryExpression','DartParserAtual.py',262),
  ('functionCall -> functionSignature','functionCall',1,'p_functionCall','DartParserAtual.py',273),
  ('primary -> literal','primary',1,'p_primary','DartParserAtual.py',277),
  ('primary -> LPAREN expression RPAREN','primary',3,'p_primary','DartParserAtual.py',278),
  ('literal -> ID','literal',1,'p_literal','DartParserAtual.py',285),
  ('literal -> listLiteral','literal',1,'p_literal','DartParserAtual.py',286),
  ('literal -> booleanLiteral','literal',1,'p_literal','DartParserAtual.py',287),
  ('literal -> NUMBER','literal',1,'p_literal','DartParserAtual.py',288),
  ('literal -> LITERAL_STRING','literal',1,'p_literal','DartParserAtual.py',289),
  ('listLiteral -> LCON RCON','listLiteral',2,'p_listLiteral','DartParserAtual.py',302),
  ('listLiteral -> LCON expressionList RCON','listLiteral',3,'p_listLiteral','DartParserAtual.py',303),
  ('booleanLiteral -> TRUE','booleanLiteral',1,'p_booleanLiteral','DartParserAtual.py',311),
  ('booleanLiteral -> FALSE','booleanLiteral',1,'p_booleanLiteral','DartParserAtual.py',312),
  ('expressionList -> expression COMMA','expressionList',2,'p_expresionList','DartParserAtual.py',320),
  ('expressionList -> expression','expressionList',1,'p_expresionList','DartParserAtual.py',321),
  ('expressionList -> expression COMMA expressionList','expressionList',3,'p_expresionList','DartParserAtual.py',322),
  ('returnStatement -> RETURN PCOMMA','returnStatement',2,'p_returnStatement','DartParserAtual.py',330),
  ('returnStatement -> RETURN expression PCOMMA','returnStatement',3,'p_returnStatement','DartParserAtual.py',331),
  ('ifStatement -> IF LPAREN expression RPAREN statement','ifStatement',5,'p_ifStatement','DartParserAtual.py',336),
  ('ifStatement -> IF LPAREN expression RPAREN statement ELSE statement','ifStatement',7,'p_ifStatement','DartParserAtual.py',337),
  ('forStatement -> FOR LPAREN forLoopParts RPAREN statement','forStatement',5,'p_forStatement','DartParserAtual.py',345),
  ('forLoopParts -> forInitializerStatement PCOMMA','forLoopParts',2,'p_forLoopParts','DartParserAtual.py',350),
  ('forLoopParts -> forInitializerStatement PCOMMA expressionList','forLoopParts',3,'p_forLoopParts','DartParserAtual.py',351),
  ('forLoopParts -> forInitializerStatement expression PCOMMA','forLoopParts',3,'p_forLoopParts','DartParserAtual.py',352),
  ('forLoopParts -> forInitializerStatement expression PCOMMA expressionList','forLoopParts',4,'p_forLoopParts','DartParserAtual.py',353),
  ('forInitializerStatement -> localVariableDeclaration','forInitializerStatement',1,'p_forInitializerStatement','DartParserAtual.py',365),
  ('forInitializerStatement -> PCOMMA','forInitializerStatement',1,'p_forInitializerStatement','DartParserAtual.py',366),
  ('forInitializerStatement -> expression PCOMMA','forInitializerStatement',2,'p_forInitializerStatement','DartParserAtual.py',367),
  ('whileStatement -> WHILE LPAREN expression RPAREN statement','whileStatement',5,'p_whileStatement','DartParserAtual.py',377),
  ('doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA','doStatement',7,'p_doStatement','DartParserAtual.py',382),
  ('switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV','switchStatement',7,'p_switchStatement','DartParserAtual.py',387),
  ('switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV','switchStatement',8,'p_switchStatement','DartParserAtual.py',388),
  ('switchCaseRepetition -> switchCase switchCaseRepetition','switchCaseRepetition',2,'p_switchCaseRepetition','DartParserAtual.py',396),
  ('switchCaseRepetition -> switchCase','switchCaseRepetition',1,'p_switchCaseRepetition','DartParserAtual.py',397),
  ('switchCase -> CASE expression PONTOS statements','switchCase',4,'p_switchCase','DartParserAtual.py',405),
  ('switchCase -> label switchCase','switchCase',2,'p_switchCase','DartParserAtual.py',406),
  ('defaultCase -> DEFAULT PONTOS statements','defaultCase',3,'p_defaultCase','DartParserAtual.py',414),
  ('defaultCase -> label defaultCase','defaultCase',2,'p_defaultCase','DartParserAtual.py',415),
  ('label -> ID PONTOS','label',2,'p_label','DartParserAtual.py',423),
  ('breakStatement -> BREAK PCOMMA','breakStatement',2,'p_breakStatement','DartParserAtual.py',428),
  ('breakStatement -> BREAK ID PCOMMA','breakStatement',3,'p_breakStatement','DartParserAtual.py',429),
]
