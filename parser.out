Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    CONST
    FINAL
    FUNCTION
    INTEGER
    NOT
    NULL

Grammar

Rule 0     S' -> topLevel
Rule 1     topLevel -> variableDeclaration PCOMMA
Rule 2     topLevel -> variableDeclaration PCOMMA topLevel
Rule 3     topLevel -> functionSignature functionBody
Rule 4     topLevel -> functionSignature functionBody topLevel
Rule 5     variableDeclaration -> declaredIdentifier
Rule 6     variableDeclaration -> variableDeclaration COMMA ID
Rule 7     declaredIdentifier -> type ID
Rule 8     type -> VAR
Rule 9     type -> INT
Rule 10    type -> FLOAT
Rule 11    type -> CHAR
Rule 12    type -> STRING
Rule 13    type -> VOID
Rule 14    type -> BOOLEAN
Rule 15    functionSignature -> ID formalParameterList
Rule 16    functionSignature -> type ID formalParameterList
Rule 17    formalParameterList -> LPAREN RPAREN
Rule 18    formalParameterList -> LPAREN normalFormalParameters RPAREN
Rule 19    normalFormalParameters -> simpleFormalParameter
Rule 20    normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters
Rule 21    simpleFormalParameter -> type ID
Rule 22    functionBody -> block
Rule 23    block -> LCHAV statements RCHAV
Rule 24    block -> LCHAV RCHAV
Rule 25    statements -> statement statements
Rule 26    statements -> statement
Rule 27    statement -> nonLabelledStatement
Rule 28    nonLabelledStatement -> block
Rule 29    nonLabelledStatement -> expressionStatement
Rule 30    nonLabelledStatement -> localVariableDeclaration
Rule 31    nonLabelledStatement -> returnStatement
Rule 32    nonLabelledStatement -> ifStatement
Rule 33    nonLabelledStatement -> forStatement
Rule 34    nonLabelledStatement -> whileStatement
Rule 35    nonLabelledStatement -> doStatement
Rule 36    nonLabelledStatement -> switchStatement
Rule 37    nonLabelledStatement -> breakStatement
Rule 38    localVariableDeclaration -> initializedVariableDeclaration PCOMMA
Rule 39    initializedVariableDeclaration -> declaredIdentifier
Rule 40    initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression
Rule 41    initializedVariableDeclaration -> literal ATRIBUIR expression
Rule 42    initializedVariableDeclaration -> initializedVariableDeclaration COMMA ID
Rule 43    expressionStatement -> PCOMMA
Rule 44    expressionStatement -> expression PCOMMA
Rule 45    expression -> orExpression
Rule 46    orExpression -> andExpression
Rule 47    orExpression -> orExpression OR andExpression
Rule 48    andExpression -> equalityExpression
Rule 49    andExpression -> andExpression AND equalityExpression
Rule 50    equalityExpression -> relacionalExpression
Rule 51    equalityExpression -> equalityExpression IGUAL relacionalExpression
Rule 52    equalityExpression -> equalityExpression NEG relacionalExpression
Rule 53    relacionalExpression -> addExpression
Rule 54    relacionalExpression -> relacionalExpression MENOR addExpression
Rule 55    relacionalExpression -> relacionalExpression MAIOR addExpression
Rule 56    relacionalExpression -> relacionalExpression MENORI addExpression
Rule 57    relacionalExpression -> relacionalExpression MAIORI addExpression
Rule 58    addExpression -> multExpression
Rule 59    addExpression -> addExpression SOMA multExpression
Rule 60    addExpression -> addExpression SUBTRAIR multExpression
Rule 61    multExpression -> unaryExpression
Rule 62    multExpression -> multExpression VEZES unaryExpression
Rule 63    multExpression -> multExpression DIVIDIR unaryExpression
Rule 64    multExpression -> multExpression RESTO unaryExpression
Rule 65    unaryExpression -> primary
Rule 66    unaryExpression -> functionCall
Rule 67    unaryExpression -> unaryExpression SOMASOMA
Rule 68    unaryExpression -> unaryExpression SUBSUB
Rule 69    functionCall -> functionSignature
Rule 70    primary -> literal
Rule 71    primary -> LPAREN expression RPAREN
Rule 72    literal -> ID
Rule 73    literal -> booleanLiteral
Rule 74    literal -> listLiteralID
Rule 75    literal -> listLiteral
Rule 76    literal -> NUMBER
Rule 77    literal -> LITERAL_STRING
Rule 78    listLiteral -> LCON expressionList RCON
Rule 79    listLiteralID -> ID listLiteral
Rule 80    booleanLiteral -> TRUE
Rule 81    booleanLiteral -> FALSE
Rule 82    expressionList -> expression COMMA
Rule 83    expressionList -> expression
Rule 84    expressionList -> expression COMMA expressionList
Rule 85    returnStatement -> RETURN PCOMMA
Rule 86    returnStatement -> RETURN expression PCOMMA
Rule 87    ifStatement -> IF LPAREN expression RPAREN statement
Rule 88    ifStatement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 89    forStatement -> FOR LPAREN forLoopParts RPAREN statement
Rule 90    forLoopParts -> forInitializerStatement PCOMMA
Rule 91    forLoopParts -> forInitializerStatement PCOMMA expressionList
Rule 92    forLoopParts -> forInitializerStatement expression PCOMMA
Rule 93    forLoopParts -> forInitializerStatement expression PCOMMA expressionList
Rule 94    forInitializerStatement -> localVariableDeclaration
Rule 95    forInitializerStatement -> PCOMMA
Rule 96    forInitializerStatement -> expression PCOMMA
Rule 97    whileStatement -> WHILE LPAREN expression RPAREN statement
Rule 98    doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA
Rule 99    switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
Rule 100   switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
Rule 101   switchCaseRepetition -> switchCase switchCaseRepetition
Rule 102   switchCaseRepetition -> switchCase
Rule 103   switchCase -> CASE expression PONTOS statements
Rule 104   defaultCase -> DEFAULT PONTOS statements
Rule 105   breakStatement -> BREAK PCOMMA
Rule 106   breakStatement -> BREAK ID PCOMMA

Terminals, with rules where they appear

AND                  : 49
ATRIBUIR             : 40 41
BOOLEAN              : 14
BREAK                : 105 106
CASE                 : 103
CHAR                 : 11
CLASS                : 
COMMA                : 6 20 42 82 84
CONST                : 
DEFAULT              : 104
DIVIDIR              : 63
DO                   : 98
ELSE                 : 88
FALSE                : 81
FINAL                : 
FLOAT                : 10
FOR                  : 89
FUNCTION             : 
ID                   : 6 7 15 16 21 42 72 79 106
IF                   : 87 88
IGUAL                : 51
INT                  : 9
INTEGER              : 
LCHAV                : 23 24 99 100
LCON                 : 78
LITERAL_STRING       : 77
LPAREN               : 17 18 71 87 88 89 97 98 99 100
MAIOR                : 55
MAIORI               : 57
MENOR                : 54
MENORI               : 56
NEG                  : 52
NOT                  : 
NULL                 : 
NUMBER               : 76
OR                   : 47
PCOMMA               : 1 2 38 43 44 85 86 90 91 92 93 95 96 98 105 106
PONTOS               : 103 104
RCHAV                : 23 24 99 100
RCON                 : 78
RESTO                : 64
RETURN               : 85 86
RPAREN               : 17 18 71 87 88 89 97 98 99 100
SOMA                 : 59
SOMASOMA             : 67
STRING               : 12
SUBSUB               : 68
SUBTRAIR             : 60
SWITCH               : 99 100
TRUE                 : 80
VAR                  : 8
VEZES                : 62
VOID                 : 13
WHILE                : 97 98
error                : 

Nonterminals, with rules where they appear

addExpression        : 53 54 55 56 57 59 60
andExpression        : 46 47 49
block                : 22 28
booleanLiteral       : 73
breakStatement       : 37
declaredIdentifier   : 5 39 40
defaultCase          : 100
doStatement          : 35
equalityExpression   : 48 49 51 52
expression           : 40 41 44 71 82 83 84 86 87 88 92 93 96 97 98 99 100 103
expressionList       : 78 84 91 93
expressionStatement  : 29
forInitializerStatement : 90 91 92 93
forLoopParts         : 89
forStatement         : 33
formalParameterList  : 15 16
functionBody         : 3 4
functionCall         : 66
functionSignature    : 3 4 69
ifStatement          : 32
initializedVariableDeclaration : 38 42
listLiteral          : 75 79
listLiteralID        : 74
literal              : 41 70
localVariableDeclaration : 30 94
multExpression       : 58 59 60 62 63 64
nonLabelledStatement : 27
normalFormalParameters : 18 20
orExpression         : 45 47
primary              : 65
relacionalExpression : 50 51 52 54 55 56 57
returnStatement      : 31
simpleFormalParameter : 19 20
statement            : 25 26 87 88 88 89 97 98
statements           : 23 25 103 104
switchCase           : 101 102
switchCaseRepetition : 99 100 101
switchStatement      : 36
topLevel             : 2 4 0
type                 : 7 16 21
unaryExpression      : 61 62 63 64 67 68
variableDeclaration  : 1 2 6
whileStatement       : 34

Parsing method: LALR

state 0

    (0) S' -> . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (7) declaredIdentifier -> . type ID
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    ID              shift and go to state 5
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    topLevel                       shift and go to state 1
    variableDeclaration            shift and go to state 2
    functionSignature              shift and go to state 3
    declaredIdentifier             shift and go to state 4
    type                           shift and go to state 6

state 1

    (0) S' -> topLevel .



state 2

    (1) topLevel -> variableDeclaration . PCOMMA
    (2) topLevel -> variableDeclaration . PCOMMA topLevel
    (6) variableDeclaration -> variableDeclaration . COMMA ID

    PCOMMA          shift and go to state 14
    COMMA           shift and go to state 15


state 3

    (3) topLevel -> functionSignature . functionBody
    (4) topLevel -> functionSignature . functionBody topLevel
    (22) functionBody -> . block
    (23) block -> . LCHAV statements RCHAV
    (24) block -> . LCHAV RCHAV

    LCHAV           shift and go to state 18

    functionBody                   shift and go to state 16
    block                          shift and go to state 17

state 4

    (5) variableDeclaration -> declaredIdentifier .

    PCOMMA          reduce using rule 5 (variableDeclaration -> declaredIdentifier .)
    COMMA           reduce using rule 5 (variableDeclaration -> declaredIdentifier .)


state 5

    (15) functionSignature -> ID . formalParameterList
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 19

state 6

    (16) functionSignature -> type . ID formalParameterList
    (7) declaredIdentifier -> type . ID

    ID              shift and go to state 21


state 7

    (8) type -> VAR .

    ID              reduce using rule 8 (type -> VAR .)


state 8

    (9) type -> INT .

    ID              reduce using rule 9 (type -> INT .)


state 9

    (10) type -> FLOAT .

    ID              reduce using rule 10 (type -> FLOAT .)


state 10

    (11) type -> CHAR .

    ID              reduce using rule 11 (type -> CHAR .)


state 11

    (12) type -> STRING .

    ID              reduce using rule 12 (type -> STRING .)


state 12

    (13) type -> VOID .

    ID              reduce using rule 13 (type -> VOID .)


state 13

    (14) type -> BOOLEAN .

    ID              reduce using rule 14 (type -> BOOLEAN .)


state 14

    (1) topLevel -> variableDeclaration PCOMMA .
    (2) topLevel -> variableDeclaration PCOMMA . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (7) declaredIdentifier -> . type ID
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    $end            reduce using rule 1 (topLevel -> variableDeclaration PCOMMA .)
    ID              shift and go to state 5
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    variableDeclaration            shift and go to state 2
    topLevel                       shift and go to state 22
    functionSignature              shift and go to state 3
    declaredIdentifier             shift and go to state 4
    type                           shift and go to state 6

state 15

    (6) variableDeclaration -> variableDeclaration COMMA . ID

    ID              shift and go to state 23


state 16

    (3) topLevel -> functionSignature functionBody .
    (4) topLevel -> functionSignature functionBody . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (7) declaredIdentifier -> . type ID
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    $end            reduce using rule 3 (topLevel -> functionSignature functionBody .)
    ID              shift and go to state 5
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    functionSignature              shift and go to state 3
    topLevel                       shift and go to state 24
    variableDeclaration            shift and go to state 2
    declaredIdentifier             shift and go to state 4
    type                           shift and go to state 6

state 17

    (22) functionBody -> block .

    ID              reduce using rule 22 (functionBody -> block .)
    VAR             reduce using rule 22 (functionBody -> block .)
    INT             reduce using rule 22 (functionBody -> block .)
    FLOAT           reduce using rule 22 (functionBody -> block .)
    CHAR            reduce using rule 22 (functionBody -> block .)
    STRING          reduce using rule 22 (functionBody -> block .)
    VOID            reduce using rule 22 (functionBody -> block .)
    BOOLEAN         reduce using rule 22 (functionBody -> block .)
    $end            reduce using rule 22 (functionBody -> block .)


state 18

    (23) block -> LCHAV . statements RCHAV
    (24) block -> LCHAV . RCHAV
    (25) statements -> . statement statements
    (26) statements -> . statement
    (27) statement -> . nonLabelledStatement
    (28) nonLabelledStatement -> . block
    (29) nonLabelledStatement -> . expressionStatement
    (30) nonLabelledStatement -> . localVariableDeclaration
    (31) nonLabelledStatement -> . returnStatement
    (32) nonLabelledStatement -> . ifStatement
    (33) nonLabelledStatement -> . forStatement
    (34) nonLabelledStatement -> . whileStatement
    (35) nonLabelledStatement -> . doStatement
    (36) nonLabelledStatement -> . switchStatement
    (37) nonLabelledStatement -> . breakStatement
    (23) block -> . LCHAV statements RCHAV
    (24) block -> . LCHAV RCHAV
    (43) expressionStatement -> . PCOMMA
    (44) expressionStatement -> . expression PCOMMA
    (38) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (85) returnStatement -> . RETURN PCOMMA
    (86) returnStatement -> . RETURN expression PCOMMA
    (87) ifStatement -> . IF LPAREN expression RPAREN statement
    (88) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (89) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (97) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (98) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (99) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (105) breakStatement -> . BREAK PCOMMA
    (106) breakStatement -> . BREAK ID PCOMMA
    (45) expression -> . orExpression
    (39) initializedVariableDeclaration -> . declaredIdentifier
    (40) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (41) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (42) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    RCHAV           shift and go to state 26
    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    LPAREN          shift and go to state 44

    statements                     shift and go to state 25
    statement                      shift and go to state 27
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71

state 19

    (15) functionSignature -> ID formalParameterList .

    LCHAV           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    SOMASOMA        reduce using rule 15 (functionSignature -> ID formalParameterList .)
    SUBSUB          reduce using rule 15 (functionSignature -> ID formalParameterList .)
    VEZES           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    DIVIDIR         reduce using rule 15 (functionSignature -> ID formalParameterList .)
    RESTO           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    SOMA            reduce using rule 15 (functionSignature -> ID formalParameterList .)
    SUBTRAIR        reduce using rule 15 (functionSignature -> ID formalParameterList .)
    MENOR           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    MAIOR           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    MENORI          reduce using rule 15 (functionSignature -> ID formalParameterList .)
    MAIORI          reduce using rule 15 (functionSignature -> ID formalParameterList .)
    IGUAL           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    NEG             reduce using rule 15 (functionSignature -> ID formalParameterList .)
    AND             reduce using rule 15 (functionSignature -> ID formalParameterList .)
    OR              reduce using rule 15 (functionSignature -> ID formalParameterList .)
    PCOMMA          reduce using rule 15 (functionSignature -> ID formalParameterList .)
    RPAREN          reduce using rule 15 (functionSignature -> ID formalParameterList .)
    COMMA           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    RCON            reduce using rule 15 (functionSignature -> ID formalParameterList .)
    PONTOS          reduce using rule 15 (functionSignature -> ID formalParameterList .)


state 20

    (17) formalParameterList -> LPAREN . RPAREN
    (18) formalParameterList -> LPAREN . normalFormalParameters RPAREN
    (19) normalFormalParameters -> . simpleFormalParameter
    (20) normalFormalParameters -> . simpleFormalParameter COMMA normalFormalParameters
    (21) simpleFormalParameter -> . type ID
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    RPAREN          shift and go to state 72
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    normalFormalParameters         shift and go to state 73
    simpleFormalParameter          shift and go to state 74
    type                           shift and go to state 75

state 21

    (16) functionSignature -> type ID . formalParameterList
    (7) declaredIdentifier -> type ID .
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    PCOMMA          reduce using rule 7 (declaredIdentifier -> type ID .)
    COMMA           reduce using rule 7 (declaredIdentifier -> type ID .)
    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 76

state 22

    (2) topLevel -> variableDeclaration PCOMMA topLevel .

    $end            reduce using rule 2 (topLevel -> variableDeclaration PCOMMA topLevel .)


state 23

    (6) variableDeclaration -> variableDeclaration COMMA ID .

    PCOMMA          reduce using rule 6 (variableDeclaration -> variableDeclaration COMMA ID .)
    COMMA           reduce using rule 6 (variableDeclaration -> variableDeclaration COMMA ID .)


state 24

    (4) topLevel -> functionSignature functionBody topLevel .

    $end            reduce using rule 4 (topLevel -> functionSignature functionBody topLevel .)


state 25

    (23) block -> LCHAV statements . RCHAV

    RCHAV           shift and go to state 77


state 26

    (24) block -> LCHAV RCHAV .

    ID              reduce using rule 24 (block -> LCHAV RCHAV .)
    VAR             reduce using rule 24 (block -> LCHAV RCHAV .)
    INT             reduce using rule 24 (block -> LCHAV RCHAV .)
    FLOAT           reduce using rule 24 (block -> LCHAV RCHAV .)
    CHAR            reduce using rule 24 (block -> LCHAV RCHAV .)
    STRING          reduce using rule 24 (block -> LCHAV RCHAV .)
    VOID            reduce using rule 24 (block -> LCHAV RCHAV .)
    BOOLEAN         reduce using rule 24 (block -> LCHAV RCHAV .)
    $end            reduce using rule 24 (block -> LCHAV RCHAV .)
    LCHAV           reduce using rule 24 (block -> LCHAV RCHAV .)
    PCOMMA          reduce using rule 24 (block -> LCHAV RCHAV .)
    RETURN          reduce using rule 24 (block -> LCHAV RCHAV .)
    IF              reduce using rule 24 (block -> LCHAV RCHAV .)
    FOR             reduce using rule 24 (block -> LCHAV RCHAV .)
    WHILE           reduce using rule 24 (block -> LCHAV RCHAV .)
    DO              reduce using rule 24 (block -> LCHAV RCHAV .)
    SWITCH          reduce using rule 24 (block -> LCHAV RCHAV .)
    BREAK           reduce using rule 24 (block -> LCHAV RCHAV .)
    NUMBER          reduce using rule 24 (block -> LCHAV RCHAV .)
    LITERAL_STRING  reduce using rule 24 (block -> LCHAV RCHAV .)
    TRUE            reduce using rule 24 (block -> LCHAV RCHAV .)
    FALSE           reduce using rule 24 (block -> LCHAV RCHAV .)
    LCON            reduce using rule 24 (block -> LCHAV RCHAV .)
    LPAREN          reduce using rule 24 (block -> LCHAV RCHAV .)
    RCHAV           reduce using rule 24 (block -> LCHAV RCHAV .)
    CASE            reduce using rule 24 (block -> LCHAV RCHAV .)
    DEFAULT         reduce using rule 24 (block -> LCHAV RCHAV .)
    ELSE            reduce using rule 24 (block -> LCHAV RCHAV .)


state 27

    (25) statements -> statement . statements
    (26) statements -> statement .
    (25) statements -> . statement statements
    (26) statements -> . statement
    (27) statement -> . nonLabelledStatement
    (28) nonLabelledStatement -> . block
    (29) nonLabelledStatement -> . expressionStatement
    (30) nonLabelledStatement -> . localVariableDeclaration
    (31) nonLabelledStatement -> . returnStatement
    (32) nonLabelledStatement -> . ifStatement
    (33) nonLabelledStatement -> . forStatement
    (34) nonLabelledStatement -> . whileStatement
    (35) nonLabelledStatement -> . doStatement
    (36) nonLabelledStatement -> . switchStatement
    (37) nonLabelledStatement -> . breakStatement
    (23) block -> . LCHAV statements RCHAV
    (24) block -> . LCHAV RCHAV
    (43) expressionStatement -> . PCOMMA
    (44) expressionStatement -> . expression PCOMMA
    (38) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (85) returnStatement -> . RETURN PCOMMA
    (86) returnStatement -> . RETURN expression PCOMMA
    (87) ifStatement -> . IF LPAREN expression RPAREN statement
    (88) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (89) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (97) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (98) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (99) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (105) breakStatement -> . BREAK PCOMMA
    (106) breakStatement -> . BREAK ID PCOMMA
    (45) expression -> . orExpression
    (39) initializedVariableDeclaration -> . declaredIdentifier
    (40) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (41) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (42) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    RCHAV           reduce using rule 26 (statements -> statement .)
    CASE            reduce using rule 26 (statements -> statement .)
    DEFAULT         reduce using rule 26 (statements -> statement .)
    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    LPAREN          shift and go to state 44

    statement                      shift and go to state 27
    statements                     shift and go to state 78
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71

state 28

    (27) statement -> nonLabelledStatement .

    LCHAV           reduce using rule 27 (statement -> nonLabelledStatement .)
    PCOMMA          reduce using rule 27 (statement -> nonLabelledStatement .)
    RETURN          reduce using rule 27 (statement -> nonLabelledStatement .)
    IF              reduce using rule 27 (statement -> nonLabelledStatement .)
    FOR             reduce using rule 27 (statement -> nonLabelledStatement .)
    WHILE           reduce using rule 27 (statement -> nonLabelledStatement .)
    DO              reduce using rule 27 (statement -> nonLabelledStatement .)
    SWITCH          reduce using rule 27 (statement -> nonLabelledStatement .)
    BREAK           reduce using rule 27 (statement -> nonLabelledStatement .)
    ID              reduce using rule 27 (statement -> nonLabelledStatement .)
    NUMBER          reduce using rule 27 (statement -> nonLabelledStatement .)
    LITERAL_STRING  reduce using rule 27 (statement -> nonLabelledStatement .)
    VAR             reduce using rule 27 (statement -> nonLabelledStatement .)
    INT             reduce using rule 27 (statement -> nonLabelledStatement .)
    FLOAT           reduce using rule 27 (statement -> nonLabelledStatement .)
    CHAR            reduce using rule 27 (statement -> nonLabelledStatement .)
    STRING          reduce using rule 27 (statement -> nonLabelledStatement .)
    VOID            reduce using rule 27 (statement -> nonLabelledStatement .)
    BOOLEAN         reduce using rule 27 (statement -> nonLabelledStatement .)
    TRUE            reduce using rule 27 (statement -> nonLabelledStatement .)
    FALSE           reduce using rule 27 (statement -> nonLabelledStatement .)
    LCON            reduce using rule 27 (statement -> nonLabelledStatement .)
    LPAREN          reduce using rule 27 (statement -> nonLabelledStatement .)
    RCHAV           reduce using rule 27 (statement -> nonLabelledStatement .)
    CASE            reduce using rule 27 (statement -> nonLabelledStatement .)
    DEFAULT         reduce using rule 27 (statement -> nonLabelledStatement .)
    ELSE            reduce using rule 27 (statement -> nonLabelledStatement .)


state 29

    (28) nonLabelledStatement -> block .

    LCHAV           reduce using rule 28 (nonLabelledStatement -> block .)
    PCOMMA          reduce using rule 28 (nonLabelledStatement -> block .)
    RETURN          reduce using rule 28 (nonLabelledStatement -> block .)
    IF              reduce using rule 28 (nonLabelledStatement -> block .)
    FOR             reduce using rule 28 (nonLabelledStatement -> block .)
    WHILE           reduce using rule 28 (nonLabelledStatement -> block .)
    DO              reduce using rule 28 (nonLabelledStatement -> block .)
    SWITCH          reduce using rule 28 (nonLabelledStatement -> block .)
    BREAK           reduce using rule 28 (nonLabelledStatement -> block .)
    ID              reduce using rule 28 (nonLabelledStatement -> block .)
    NUMBER          reduce using rule 28 (nonLabelledStatement -> block .)
    LITERAL_STRING  reduce using rule 28 (nonLabelledStatement -> block .)
    VAR             reduce using rule 28 (nonLabelledStatement -> block .)
    INT             reduce using rule 28 (nonLabelledStatement -> block .)
    FLOAT           reduce using rule 28 (nonLabelledStatement -> block .)
    CHAR            reduce using rule 28 (nonLabelledStatement -> block .)
    STRING          reduce using rule 28 (nonLabelledStatement -> block .)
    VOID            reduce using rule 28 (nonLabelledStatement -> block .)
    BOOLEAN         reduce using rule 28 (nonLabelledStatement -> block .)
    TRUE            reduce using rule 28 (nonLabelledStatement -> block .)
    FALSE           reduce using rule 28 (nonLabelledStatement -> block .)
    LCON            reduce using rule 28 (nonLabelledStatement -> block .)
    LPAREN          reduce using rule 28 (nonLabelledStatement -> block .)
    RCHAV           reduce using rule 28 (nonLabelledStatement -> block .)
    CASE            reduce using rule 28 (nonLabelledStatement -> block .)
    DEFAULT         reduce using rule 28 (nonLabelledStatement -> block .)
    ELSE            reduce using rule 28 (nonLabelledStatement -> block .)


state 30

    (29) nonLabelledStatement -> expressionStatement .

    LCHAV           reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    PCOMMA          reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    RETURN          reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    IF              reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    FOR             reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    WHILE           reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    DO              reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    SWITCH          reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    BREAK           reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    ID              reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    NUMBER          reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    LITERAL_STRING  reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    VAR             reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    INT             reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    FLOAT           reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    CHAR            reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    STRING          reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    VOID            reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    BOOLEAN         reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    TRUE            reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    FALSE           reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    LCON            reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    LPAREN          reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    RCHAV           reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    CASE            reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    DEFAULT         reduce using rule 29 (nonLabelledStatement -> expressionStatement .)
    ELSE            reduce using rule 29 (nonLabelledStatement -> expressionStatement .)


state 31

    (30) nonLabelledStatement -> localVariableDeclaration .

    LCHAV           reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    PCOMMA          reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    RETURN          reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    IF              reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    FOR             reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    WHILE           reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    DO              reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    SWITCH          reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    BREAK           reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    ID              reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    NUMBER          reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    LITERAL_STRING  reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    VAR             reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    INT             reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    FLOAT           reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    CHAR            reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    STRING          reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    VOID            reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    BOOLEAN         reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    TRUE            reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    FALSE           reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    LCON            reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    LPAREN          reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    RCHAV           reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    CASE            reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    DEFAULT         reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)
    ELSE            reduce using rule 30 (nonLabelledStatement -> localVariableDeclaration .)


state 32

    (31) nonLabelledStatement -> returnStatement .

    LCHAV           reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    PCOMMA          reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    RETURN          reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    IF              reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    FOR             reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    WHILE           reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    DO              reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    SWITCH          reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    BREAK           reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    ID              reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    NUMBER          reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    LITERAL_STRING  reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    VAR             reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    INT             reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    FLOAT           reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    CHAR            reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    STRING          reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    VOID            reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    BOOLEAN         reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    TRUE            reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    FALSE           reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    LCON            reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    LPAREN          reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    RCHAV           reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    CASE            reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    DEFAULT         reduce using rule 31 (nonLabelledStatement -> returnStatement .)
    ELSE            reduce using rule 31 (nonLabelledStatement -> returnStatement .)


state 33

    (32) nonLabelledStatement -> ifStatement .

    LCHAV           reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    PCOMMA          reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    RETURN          reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    IF              reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    FOR             reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    WHILE           reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    DO              reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    SWITCH          reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    BREAK           reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    ID              reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    NUMBER          reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    LITERAL_STRING  reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    VAR             reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    INT             reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    FLOAT           reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    CHAR            reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    STRING          reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    VOID            reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    BOOLEAN         reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    TRUE            reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    FALSE           reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    LCON            reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    LPAREN          reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    RCHAV           reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    CASE            reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    DEFAULT         reduce using rule 32 (nonLabelledStatement -> ifStatement .)
    ELSE            reduce using rule 32 (nonLabelledStatement -> ifStatement .)


state 34

    (33) nonLabelledStatement -> forStatement .

    LCHAV           reduce using rule 33 (nonLabelledStatement -> forStatement .)
    PCOMMA          reduce using rule 33 (nonLabelledStatement -> forStatement .)
    RETURN          reduce using rule 33 (nonLabelledStatement -> forStatement .)
    IF              reduce using rule 33 (nonLabelledStatement -> forStatement .)
    FOR             reduce using rule 33 (nonLabelledStatement -> forStatement .)
    WHILE           reduce using rule 33 (nonLabelledStatement -> forStatement .)
    DO              reduce using rule 33 (nonLabelledStatement -> forStatement .)
    SWITCH          reduce using rule 33 (nonLabelledStatement -> forStatement .)
    BREAK           reduce using rule 33 (nonLabelledStatement -> forStatement .)
    ID              reduce using rule 33 (nonLabelledStatement -> forStatement .)
    NUMBER          reduce using rule 33 (nonLabelledStatement -> forStatement .)
    LITERAL_STRING  reduce using rule 33 (nonLabelledStatement -> forStatement .)
    VAR             reduce using rule 33 (nonLabelledStatement -> forStatement .)
    INT             reduce using rule 33 (nonLabelledStatement -> forStatement .)
    FLOAT           reduce using rule 33 (nonLabelledStatement -> forStatement .)
    CHAR            reduce using rule 33 (nonLabelledStatement -> forStatement .)
    STRING          reduce using rule 33 (nonLabelledStatement -> forStatement .)
    VOID            reduce using rule 33 (nonLabelledStatement -> forStatement .)
    BOOLEAN         reduce using rule 33 (nonLabelledStatement -> forStatement .)
    TRUE            reduce using rule 33 (nonLabelledStatement -> forStatement .)
    FALSE           reduce using rule 33 (nonLabelledStatement -> forStatement .)
    LCON            reduce using rule 33 (nonLabelledStatement -> forStatement .)
    LPAREN          reduce using rule 33 (nonLabelledStatement -> forStatement .)
    RCHAV           reduce using rule 33 (nonLabelledStatement -> forStatement .)
    CASE            reduce using rule 33 (nonLabelledStatement -> forStatement .)
    DEFAULT         reduce using rule 33 (nonLabelledStatement -> forStatement .)
    ELSE            reduce using rule 33 (nonLabelledStatement -> forStatement .)


state 35

    (34) nonLabelledStatement -> whileStatement .

    LCHAV           reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    PCOMMA          reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    RETURN          reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    IF              reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    FOR             reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    WHILE           reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    DO              reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    SWITCH          reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    BREAK           reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    ID              reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    NUMBER          reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    LITERAL_STRING  reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    VAR             reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    INT             reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    FLOAT           reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    CHAR            reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    STRING          reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    VOID            reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    BOOLEAN         reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    TRUE            reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    FALSE           reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    LCON            reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    LPAREN          reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    RCHAV           reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    CASE            reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    DEFAULT         reduce using rule 34 (nonLabelledStatement -> whileStatement .)
    ELSE            reduce using rule 34 (nonLabelledStatement -> whileStatement .)


state 36

    (35) nonLabelledStatement -> doStatement .

    LCHAV           reduce using rule 35 (nonLabelledStatement -> doStatement .)
    PCOMMA          reduce using rule 35 (nonLabelledStatement -> doStatement .)
    RETURN          reduce using rule 35 (nonLabelledStatement -> doStatement .)
    IF              reduce using rule 35 (nonLabelledStatement -> doStatement .)
    FOR             reduce using rule 35 (nonLabelledStatement -> doStatement .)
    WHILE           reduce using rule 35 (nonLabelledStatement -> doStatement .)
    DO              reduce using rule 35 (nonLabelledStatement -> doStatement .)
    SWITCH          reduce using rule 35 (nonLabelledStatement -> doStatement .)
    BREAK           reduce using rule 35 (nonLabelledStatement -> doStatement .)
    ID              reduce using rule 35 (nonLabelledStatement -> doStatement .)
    NUMBER          reduce using rule 35 (nonLabelledStatement -> doStatement .)
    LITERAL_STRING  reduce using rule 35 (nonLabelledStatement -> doStatement .)
    VAR             reduce using rule 35 (nonLabelledStatement -> doStatement .)
    INT             reduce using rule 35 (nonLabelledStatement -> doStatement .)
    FLOAT           reduce using rule 35 (nonLabelledStatement -> doStatement .)
    CHAR            reduce using rule 35 (nonLabelledStatement -> doStatement .)
    STRING          reduce using rule 35 (nonLabelledStatement -> doStatement .)
    VOID            reduce using rule 35 (nonLabelledStatement -> doStatement .)
    BOOLEAN         reduce using rule 35 (nonLabelledStatement -> doStatement .)
    TRUE            reduce using rule 35 (nonLabelledStatement -> doStatement .)
    FALSE           reduce using rule 35 (nonLabelledStatement -> doStatement .)
    LCON            reduce using rule 35 (nonLabelledStatement -> doStatement .)
    LPAREN          reduce using rule 35 (nonLabelledStatement -> doStatement .)
    RCHAV           reduce using rule 35 (nonLabelledStatement -> doStatement .)
    CASE            reduce using rule 35 (nonLabelledStatement -> doStatement .)
    DEFAULT         reduce using rule 35 (nonLabelledStatement -> doStatement .)
    ELSE            reduce using rule 35 (nonLabelledStatement -> doStatement .)


state 37

    (36) nonLabelledStatement -> switchStatement .

    LCHAV           reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    PCOMMA          reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    RETURN          reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    IF              reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    FOR             reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    WHILE           reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    DO              reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    SWITCH          reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    BREAK           reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    ID              reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    NUMBER          reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    LITERAL_STRING  reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    VAR             reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    INT             reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    FLOAT           reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    CHAR            reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    STRING          reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    VOID            reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    BOOLEAN         reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    TRUE            reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    FALSE           reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    LCON            reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    LPAREN          reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    RCHAV           reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    CASE            reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    DEFAULT         reduce using rule 36 (nonLabelledStatement -> switchStatement .)
    ELSE            reduce using rule 36 (nonLabelledStatement -> switchStatement .)


state 38

    (37) nonLabelledStatement -> breakStatement .

    LCHAV           reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    PCOMMA          reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    RETURN          reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    IF              reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    FOR             reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    WHILE           reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    DO              reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    SWITCH          reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    BREAK           reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    ID              reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    NUMBER          reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    LITERAL_STRING  reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    VAR             reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    INT             reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    FLOAT           reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    CHAR            reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    STRING          reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    VOID            reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    BOOLEAN         reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    TRUE            reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    FALSE           reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    LCON            reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    LPAREN          reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    RCHAV           reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    CASE            reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    DEFAULT         reduce using rule 37 (nonLabelledStatement -> breakStatement .)
    ELSE            reduce using rule 37 (nonLabelledStatement -> breakStatement .)


state 39

    (43) expressionStatement -> PCOMMA .

    LCHAV           reduce using rule 43 (expressionStatement -> PCOMMA .)
    PCOMMA          reduce using rule 43 (expressionStatement -> PCOMMA .)
    RETURN          reduce using rule 43 (expressionStatement -> PCOMMA .)
    IF              reduce using rule 43 (expressionStatement -> PCOMMA .)
    FOR             reduce using rule 43 (expressionStatement -> PCOMMA .)
    WHILE           reduce using rule 43 (expressionStatement -> PCOMMA .)
    DO              reduce using rule 43 (expressionStatement -> PCOMMA .)
    SWITCH          reduce using rule 43 (expressionStatement -> PCOMMA .)
    BREAK           reduce using rule 43 (expressionStatement -> PCOMMA .)
    ID              reduce using rule 43 (expressionStatement -> PCOMMA .)
    NUMBER          reduce using rule 43 (expressionStatement -> PCOMMA .)
    LITERAL_STRING  reduce using rule 43 (expressionStatement -> PCOMMA .)
    VAR             reduce using rule 43 (expressionStatement -> PCOMMA .)
    INT             reduce using rule 43 (expressionStatement -> PCOMMA .)
    FLOAT           reduce using rule 43 (expressionStatement -> PCOMMA .)
    CHAR            reduce using rule 43 (expressionStatement -> PCOMMA .)
    STRING          reduce using rule 43 (expressionStatement -> PCOMMA .)
    VOID            reduce using rule 43 (expressionStatement -> PCOMMA .)
    BOOLEAN         reduce using rule 43 (expressionStatement -> PCOMMA .)
    TRUE            reduce using rule 43 (expressionStatement -> PCOMMA .)
    FALSE           reduce using rule 43 (expressionStatement -> PCOMMA .)
    LCON            reduce using rule 43 (expressionStatement -> PCOMMA .)
    LPAREN          reduce using rule 43 (expressionStatement -> PCOMMA .)
    RCHAV           reduce using rule 43 (expressionStatement -> PCOMMA .)
    CASE            reduce using rule 43 (expressionStatement -> PCOMMA .)
    DEFAULT         reduce using rule 43 (expressionStatement -> PCOMMA .)
    ELSE            reduce using rule 43 (expressionStatement -> PCOMMA .)


state 40

    (44) expressionStatement -> expression . PCOMMA

    PCOMMA          shift and go to state 79


state 41

    (38) localVariableDeclaration -> initializedVariableDeclaration . PCOMMA
    (42) initializedVariableDeclaration -> initializedVariableDeclaration . COMMA ID

    PCOMMA          shift and go to state 80
    COMMA           shift and go to state 81


state 42

    (85) returnStatement -> RETURN . PCOMMA
    (86) returnStatement -> RETURN . expression PCOMMA
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    PCOMMA          shift and go to state 82
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 83
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 43

    (87) ifStatement -> IF . LPAREN expression RPAREN statement
    (88) ifStatement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 87


state 44

    (71) primary -> LPAREN . expression RPAREN
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 88
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 45

    (89) forStatement -> FOR . LPAREN forLoopParts RPAREN statement

    LPAREN          shift and go to state 89


state 46

    (97) whileStatement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 90


state 47

    (98) doStatement -> DO . statement WHILE LPAREN expression RPAREN PCOMMA
    (27) statement -> . nonLabelledStatement
    (28) nonLabelledStatement -> . block
    (29) nonLabelledStatement -> . expressionStatement
    (30) nonLabelledStatement -> . localVariableDeclaration
    (31) nonLabelledStatement -> . returnStatement
    (32) nonLabelledStatement -> . ifStatement
    (33) nonLabelledStatement -> . forStatement
    (34) nonLabelledStatement -> . whileStatement
    (35) nonLabelledStatement -> . doStatement
    (36) nonLabelledStatement -> . switchStatement
    (37) nonLabelledStatement -> . breakStatement
    (23) block -> . LCHAV statements RCHAV
    (24) block -> . LCHAV RCHAV
    (43) expressionStatement -> . PCOMMA
    (44) expressionStatement -> . expression PCOMMA
    (38) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (85) returnStatement -> . RETURN PCOMMA
    (86) returnStatement -> . RETURN expression PCOMMA
    (87) ifStatement -> . IF LPAREN expression RPAREN statement
    (88) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (89) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (97) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (98) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (99) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (105) breakStatement -> . BREAK PCOMMA
    (106) breakStatement -> . BREAK ID PCOMMA
    (45) expression -> . orExpression
    (39) initializedVariableDeclaration -> . declaredIdentifier
    (40) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (41) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (42) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    LPAREN          shift and go to state 44

    statement                      shift and go to state 91
    expression                     shift and go to state 40
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71

state 48

    (99) switchStatement -> SWITCH . LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> SWITCH . LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV

    LPAREN          shift and go to state 92


state 49

    (105) breakStatement -> BREAK . PCOMMA
    (106) breakStatement -> BREAK . ID PCOMMA

    PCOMMA          shift and go to state 93
    ID              shift and go to state 94


state 50

    (72) literal -> ID .
    (79) listLiteralID -> ID . listLiteral
    (15) functionSignature -> ID . formalParameterList
    (78) listLiteral -> . LCON expressionList RCON
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    ATRIBUIR        reduce using rule 72 (literal -> ID .)
    SOMASOMA        reduce using rule 72 (literal -> ID .)
    SUBSUB          reduce using rule 72 (literal -> ID .)
    VEZES           reduce using rule 72 (literal -> ID .)
    DIVIDIR         reduce using rule 72 (literal -> ID .)
    RESTO           reduce using rule 72 (literal -> ID .)
    SOMA            reduce using rule 72 (literal -> ID .)
    SUBTRAIR        reduce using rule 72 (literal -> ID .)
    MENOR           reduce using rule 72 (literal -> ID .)
    MAIOR           reduce using rule 72 (literal -> ID .)
    MENORI          reduce using rule 72 (literal -> ID .)
    MAIORI          reduce using rule 72 (literal -> ID .)
    IGUAL           reduce using rule 72 (literal -> ID .)
    NEG             reduce using rule 72 (literal -> ID .)
    AND             reduce using rule 72 (literal -> ID .)
    OR              reduce using rule 72 (literal -> ID .)
    PCOMMA          reduce using rule 72 (literal -> ID .)
    LCON            shift and go to state 64
    LPAREN          shift and go to state 20

    listLiteral                    shift and go to state 95
    formalParameterList            shift and go to state 19

state 51

    (45) expression -> orExpression .
    (47) orExpression -> orExpression . OR andExpression

    PCOMMA          reduce using rule 45 (expression -> orExpression .)
    RPAREN          reduce using rule 45 (expression -> orExpression .)
    COMMA           reduce using rule 45 (expression -> orExpression .)
    RCON            reduce using rule 45 (expression -> orExpression .)
    PONTOS          reduce using rule 45 (expression -> orExpression .)
    OR              shift and go to state 96


state 52

    (39) initializedVariableDeclaration -> declaredIdentifier .
    (40) initializedVariableDeclaration -> declaredIdentifier . ATRIBUIR expression

    PCOMMA          reduce using rule 39 (initializedVariableDeclaration -> declaredIdentifier .)
    COMMA           reduce using rule 39 (initializedVariableDeclaration -> declaredIdentifier .)
    ATRIBUIR        shift and go to state 97


state 53

    (41) initializedVariableDeclaration -> literal . ATRIBUIR expression
    (70) primary -> literal .

    ATRIBUIR        shift and go to state 98
    SOMASOMA        reduce using rule 70 (primary -> literal .)
    SUBSUB          reduce using rule 70 (primary -> literal .)
    VEZES           reduce using rule 70 (primary -> literal .)
    DIVIDIR         reduce using rule 70 (primary -> literal .)
    RESTO           reduce using rule 70 (primary -> literal .)
    SOMA            reduce using rule 70 (primary -> literal .)
    SUBTRAIR        reduce using rule 70 (primary -> literal .)
    MENOR           reduce using rule 70 (primary -> literal .)
    MAIOR           reduce using rule 70 (primary -> literal .)
    MENORI          reduce using rule 70 (primary -> literal .)
    MAIORI          reduce using rule 70 (primary -> literal .)
    IGUAL           reduce using rule 70 (primary -> literal .)
    NEG             reduce using rule 70 (primary -> literal .)
    AND             reduce using rule 70 (primary -> literal .)
    OR              reduce using rule 70 (primary -> literal .)
    PCOMMA          reduce using rule 70 (primary -> literal .)


state 54

    (46) orExpression -> andExpression .
    (49) andExpression -> andExpression . AND equalityExpression

    OR              reduce using rule 46 (orExpression -> andExpression .)
    PCOMMA          reduce using rule 46 (orExpression -> andExpression .)
    RPAREN          reduce using rule 46 (orExpression -> andExpression .)
    COMMA           reduce using rule 46 (orExpression -> andExpression .)
    RCON            reduce using rule 46 (orExpression -> andExpression .)
    PONTOS          reduce using rule 46 (orExpression -> andExpression .)
    AND             shift and go to state 99


state 55

    (7) declaredIdentifier -> type . ID
    (16) functionSignature -> type . ID formalParameterList

    ID              shift and go to state 100


state 56

    (73) literal -> booleanLiteral .

    ATRIBUIR        reduce using rule 73 (literal -> booleanLiteral .)
    SOMASOMA        reduce using rule 73 (literal -> booleanLiteral .)
    SUBSUB          reduce using rule 73 (literal -> booleanLiteral .)
    VEZES           reduce using rule 73 (literal -> booleanLiteral .)
    DIVIDIR         reduce using rule 73 (literal -> booleanLiteral .)
    RESTO           reduce using rule 73 (literal -> booleanLiteral .)
    SOMA            reduce using rule 73 (literal -> booleanLiteral .)
    SUBTRAIR        reduce using rule 73 (literal -> booleanLiteral .)
    MENOR           reduce using rule 73 (literal -> booleanLiteral .)
    MAIOR           reduce using rule 73 (literal -> booleanLiteral .)
    MENORI          reduce using rule 73 (literal -> booleanLiteral .)
    MAIORI          reduce using rule 73 (literal -> booleanLiteral .)
    IGUAL           reduce using rule 73 (literal -> booleanLiteral .)
    NEG             reduce using rule 73 (literal -> booleanLiteral .)
    AND             reduce using rule 73 (literal -> booleanLiteral .)
    OR              reduce using rule 73 (literal -> booleanLiteral .)
    PCOMMA          reduce using rule 73 (literal -> booleanLiteral .)
    RPAREN          reduce using rule 73 (literal -> booleanLiteral .)
    COMMA           reduce using rule 73 (literal -> booleanLiteral .)
    RCON            reduce using rule 73 (literal -> booleanLiteral .)
    PONTOS          reduce using rule 73 (literal -> booleanLiteral .)


state 57

    (74) literal -> listLiteralID .

    ATRIBUIR        reduce using rule 74 (literal -> listLiteralID .)
    SOMASOMA        reduce using rule 74 (literal -> listLiteralID .)
    SUBSUB          reduce using rule 74 (literal -> listLiteralID .)
    VEZES           reduce using rule 74 (literal -> listLiteralID .)
    DIVIDIR         reduce using rule 74 (literal -> listLiteralID .)
    RESTO           reduce using rule 74 (literal -> listLiteralID .)
    SOMA            reduce using rule 74 (literal -> listLiteralID .)
    SUBTRAIR        reduce using rule 74 (literal -> listLiteralID .)
    MENOR           reduce using rule 74 (literal -> listLiteralID .)
    MAIOR           reduce using rule 74 (literal -> listLiteralID .)
    MENORI          reduce using rule 74 (literal -> listLiteralID .)
    MAIORI          reduce using rule 74 (literal -> listLiteralID .)
    IGUAL           reduce using rule 74 (literal -> listLiteralID .)
    NEG             reduce using rule 74 (literal -> listLiteralID .)
    AND             reduce using rule 74 (literal -> listLiteralID .)
    OR              reduce using rule 74 (literal -> listLiteralID .)
    PCOMMA          reduce using rule 74 (literal -> listLiteralID .)
    RPAREN          reduce using rule 74 (literal -> listLiteralID .)
    COMMA           reduce using rule 74 (literal -> listLiteralID .)
    RCON            reduce using rule 74 (literal -> listLiteralID .)
    PONTOS          reduce using rule 74 (literal -> listLiteralID .)


state 58

    (75) literal -> listLiteral .

    ATRIBUIR        reduce using rule 75 (literal -> listLiteral .)
    SOMASOMA        reduce using rule 75 (literal -> listLiteral .)
    SUBSUB          reduce using rule 75 (literal -> listLiteral .)
    VEZES           reduce using rule 75 (literal -> listLiteral .)
    DIVIDIR         reduce using rule 75 (literal -> listLiteral .)
    RESTO           reduce using rule 75 (literal -> listLiteral .)
    SOMA            reduce using rule 75 (literal -> listLiteral .)
    SUBTRAIR        reduce using rule 75 (literal -> listLiteral .)
    MENOR           reduce using rule 75 (literal -> listLiteral .)
    MAIOR           reduce using rule 75 (literal -> listLiteral .)
    MENORI          reduce using rule 75 (literal -> listLiteral .)
    MAIORI          reduce using rule 75 (literal -> listLiteral .)
    IGUAL           reduce using rule 75 (literal -> listLiteral .)
    NEG             reduce using rule 75 (literal -> listLiteral .)
    AND             reduce using rule 75 (literal -> listLiteral .)
    OR              reduce using rule 75 (literal -> listLiteral .)
    PCOMMA          reduce using rule 75 (literal -> listLiteral .)
    RPAREN          reduce using rule 75 (literal -> listLiteral .)
    COMMA           reduce using rule 75 (literal -> listLiteral .)
    RCON            reduce using rule 75 (literal -> listLiteral .)
    PONTOS          reduce using rule 75 (literal -> listLiteral .)


state 59

    (76) literal -> NUMBER .

    ATRIBUIR        reduce using rule 76 (literal -> NUMBER .)
    SOMASOMA        reduce using rule 76 (literal -> NUMBER .)
    SUBSUB          reduce using rule 76 (literal -> NUMBER .)
    VEZES           reduce using rule 76 (literal -> NUMBER .)
    DIVIDIR         reduce using rule 76 (literal -> NUMBER .)
    RESTO           reduce using rule 76 (literal -> NUMBER .)
    SOMA            reduce using rule 76 (literal -> NUMBER .)
    SUBTRAIR        reduce using rule 76 (literal -> NUMBER .)
    MENOR           reduce using rule 76 (literal -> NUMBER .)
    MAIOR           reduce using rule 76 (literal -> NUMBER .)
    MENORI          reduce using rule 76 (literal -> NUMBER .)
    MAIORI          reduce using rule 76 (literal -> NUMBER .)
    IGUAL           reduce using rule 76 (literal -> NUMBER .)
    NEG             reduce using rule 76 (literal -> NUMBER .)
    AND             reduce using rule 76 (literal -> NUMBER .)
    OR              reduce using rule 76 (literal -> NUMBER .)
    PCOMMA          reduce using rule 76 (literal -> NUMBER .)
    RPAREN          reduce using rule 76 (literal -> NUMBER .)
    COMMA           reduce using rule 76 (literal -> NUMBER .)
    RCON            reduce using rule 76 (literal -> NUMBER .)
    PONTOS          reduce using rule 76 (literal -> NUMBER .)


state 60

    (77) literal -> LITERAL_STRING .

    ATRIBUIR        reduce using rule 77 (literal -> LITERAL_STRING .)
    SOMASOMA        reduce using rule 77 (literal -> LITERAL_STRING .)
    SUBSUB          reduce using rule 77 (literal -> LITERAL_STRING .)
    VEZES           reduce using rule 77 (literal -> LITERAL_STRING .)
    DIVIDIR         reduce using rule 77 (literal -> LITERAL_STRING .)
    RESTO           reduce using rule 77 (literal -> LITERAL_STRING .)
    SOMA            reduce using rule 77 (literal -> LITERAL_STRING .)
    SUBTRAIR        reduce using rule 77 (literal -> LITERAL_STRING .)
    MENOR           reduce using rule 77 (literal -> LITERAL_STRING .)
    MAIOR           reduce using rule 77 (literal -> LITERAL_STRING .)
    MENORI          reduce using rule 77 (literal -> LITERAL_STRING .)
    MAIORI          reduce using rule 77 (literal -> LITERAL_STRING .)
    IGUAL           reduce using rule 77 (literal -> LITERAL_STRING .)
    NEG             reduce using rule 77 (literal -> LITERAL_STRING .)
    AND             reduce using rule 77 (literal -> LITERAL_STRING .)
    OR              reduce using rule 77 (literal -> LITERAL_STRING .)
    PCOMMA          reduce using rule 77 (literal -> LITERAL_STRING .)
    RPAREN          reduce using rule 77 (literal -> LITERAL_STRING .)
    COMMA           reduce using rule 77 (literal -> LITERAL_STRING .)
    RCON            reduce using rule 77 (literal -> LITERAL_STRING .)
    PONTOS          reduce using rule 77 (literal -> LITERAL_STRING .)


state 61

    (48) andExpression -> equalityExpression .
    (51) equalityExpression -> equalityExpression . IGUAL relacionalExpression
    (52) equalityExpression -> equalityExpression . NEG relacionalExpression

    AND             reduce using rule 48 (andExpression -> equalityExpression .)
    OR              reduce using rule 48 (andExpression -> equalityExpression .)
    PCOMMA          reduce using rule 48 (andExpression -> equalityExpression .)
    RPAREN          reduce using rule 48 (andExpression -> equalityExpression .)
    COMMA           reduce using rule 48 (andExpression -> equalityExpression .)
    RCON            reduce using rule 48 (andExpression -> equalityExpression .)
    PONTOS          reduce using rule 48 (andExpression -> equalityExpression .)
    IGUAL           shift and go to state 101
    NEG             shift and go to state 102


state 62

    (80) booleanLiteral -> TRUE .

    ATRIBUIR        reduce using rule 80 (booleanLiteral -> TRUE .)
    SOMASOMA        reduce using rule 80 (booleanLiteral -> TRUE .)
    SUBSUB          reduce using rule 80 (booleanLiteral -> TRUE .)
    VEZES           reduce using rule 80 (booleanLiteral -> TRUE .)
    DIVIDIR         reduce using rule 80 (booleanLiteral -> TRUE .)
    RESTO           reduce using rule 80 (booleanLiteral -> TRUE .)
    SOMA            reduce using rule 80 (booleanLiteral -> TRUE .)
    SUBTRAIR        reduce using rule 80 (booleanLiteral -> TRUE .)
    MENOR           reduce using rule 80 (booleanLiteral -> TRUE .)
    MAIOR           reduce using rule 80 (booleanLiteral -> TRUE .)
    MENORI          reduce using rule 80 (booleanLiteral -> TRUE .)
    MAIORI          reduce using rule 80 (booleanLiteral -> TRUE .)
    IGUAL           reduce using rule 80 (booleanLiteral -> TRUE .)
    NEG             reduce using rule 80 (booleanLiteral -> TRUE .)
    AND             reduce using rule 80 (booleanLiteral -> TRUE .)
    OR              reduce using rule 80 (booleanLiteral -> TRUE .)
    PCOMMA          reduce using rule 80 (booleanLiteral -> TRUE .)
    RPAREN          reduce using rule 80 (booleanLiteral -> TRUE .)
    COMMA           reduce using rule 80 (booleanLiteral -> TRUE .)
    RCON            reduce using rule 80 (booleanLiteral -> TRUE .)
    PONTOS          reduce using rule 80 (booleanLiteral -> TRUE .)


state 63

    (81) booleanLiteral -> FALSE .

    ATRIBUIR        reduce using rule 81 (booleanLiteral -> FALSE .)
    SOMASOMA        reduce using rule 81 (booleanLiteral -> FALSE .)
    SUBSUB          reduce using rule 81 (booleanLiteral -> FALSE .)
    VEZES           reduce using rule 81 (booleanLiteral -> FALSE .)
    DIVIDIR         reduce using rule 81 (booleanLiteral -> FALSE .)
    RESTO           reduce using rule 81 (booleanLiteral -> FALSE .)
    SOMA            reduce using rule 81 (booleanLiteral -> FALSE .)
    SUBTRAIR        reduce using rule 81 (booleanLiteral -> FALSE .)
    MENOR           reduce using rule 81 (booleanLiteral -> FALSE .)
    MAIOR           reduce using rule 81 (booleanLiteral -> FALSE .)
    MENORI          reduce using rule 81 (booleanLiteral -> FALSE .)
    MAIORI          reduce using rule 81 (booleanLiteral -> FALSE .)
    IGUAL           reduce using rule 81 (booleanLiteral -> FALSE .)
    NEG             reduce using rule 81 (booleanLiteral -> FALSE .)
    AND             reduce using rule 81 (booleanLiteral -> FALSE .)
    OR              reduce using rule 81 (booleanLiteral -> FALSE .)
    PCOMMA          reduce using rule 81 (booleanLiteral -> FALSE .)
    RPAREN          reduce using rule 81 (booleanLiteral -> FALSE .)
    COMMA           reduce using rule 81 (booleanLiteral -> FALSE .)
    RCON            reduce using rule 81 (booleanLiteral -> FALSE .)
    PONTOS          reduce using rule 81 (booleanLiteral -> FALSE .)


state 64

    (78) listLiteral -> LCON . expressionList RCON
    (82) expressionList -> . expression COMMA
    (83) expressionList -> . expression
    (84) expressionList -> . expression COMMA expressionList
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expressionList                 shift and go to state 103
    expression                     shift and go to state 104
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 65

    (50) equalityExpression -> relacionalExpression .
    (54) relacionalExpression -> relacionalExpression . MENOR addExpression
    (55) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (56) relacionalExpression -> relacionalExpression . MENORI addExpression
    (57) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 50 (equalityExpression -> relacionalExpression .)
    NEG             reduce using rule 50 (equalityExpression -> relacionalExpression .)
    AND             reduce using rule 50 (equalityExpression -> relacionalExpression .)
    OR              reduce using rule 50 (equalityExpression -> relacionalExpression .)
    PCOMMA          reduce using rule 50 (equalityExpression -> relacionalExpression .)
    RPAREN          reduce using rule 50 (equalityExpression -> relacionalExpression .)
    COMMA           reduce using rule 50 (equalityExpression -> relacionalExpression .)
    RCON            reduce using rule 50 (equalityExpression -> relacionalExpression .)
    PONTOS          reduce using rule 50 (equalityExpression -> relacionalExpression .)
    MENOR           shift and go to state 105
    MAIOR           shift and go to state 106
    MENORI          shift and go to state 107
    MAIORI          shift and go to state 108


state 66

    (53) relacionalExpression -> addExpression .
    (59) addExpression -> addExpression . SOMA multExpression
    (60) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 53 (relacionalExpression -> addExpression .)
    MAIOR           reduce using rule 53 (relacionalExpression -> addExpression .)
    MENORI          reduce using rule 53 (relacionalExpression -> addExpression .)
    MAIORI          reduce using rule 53 (relacionalExpression -> addExpression .)
    IGUAL           reduce using rule 53 (relacionalExpression -> addExpression .)
    NEG             reduce using rule 53 (relacionalExpression -> addExpression .)
    AND             reduce using rule 53 (relacionalExpression -> addExpression .)
    OR              reduce using rule 53 (relacionalExpression -> addExpression .)
    PCOMMA          reduce using rule 53 (relacionalExpression -> addExpression .)
    RPAREN          reduce using rule 53 (relacionalExpression -> addExpression .)
    COMMA           reduce using rule 53 (relacionalExpression -> addExpression .)
    RCON            reduce using rule 53 (relacionalExpression -> addExpression .)
    PONTOS          reduce using rule 53 (relacionalExpression -> addExpression .)
    SOMA            shift and go to state 109
    SUBTRAIR        shift and go to state 110


state 67

    (58) addExpression -> multExpression .
    (62) multExpression -> multExpression . VEZES unaryExpression
    (63) multExpression -> multExpression . DIVIDIR unaryExpression
    (64) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 58 (addExpression -> multExpression .)
    SUBTRAIR        reduce using rule 58 (addExpression -> multExpression .)
    MENOR           reduce using rule 58 (addExpression -> multExpression .)
    MAIOR           reduce using rule 58 (addExpression -> multExpression .)
    MENORI          reduce using rule 58 (addExpression -> multExpression .)
    MAIORI          reduce using rule 58 (addExpression -> multExpression .)
    IGUAL           reduce using rule 58 (addExpression -> multExpression .)
    NEG             reduce using rule 58 (addExpression -> multExpression .)
    AND             reduce using rule 58 (addExpression -> multExpression .)
    OR              reduce using rule 58 (addExpression -> multExpression .)
    PCOMMA          reduce using rule 58 (addExpression -> multExpression .)
    RPAREN          reduce using rule 58 (addExpression -> multExpression .)
    COMMA           reduce using rule 58 (addExpression -> multExpression .)
    RCON            reduce using rule 58 (addExpression -> multExpression .)
    PONTOS          reduce using rule 58 (addExpression -> multExpression .)
    VEZES           shift and go to state 111
    DIVIDIR         shift and go to state 112
    RESTO           shift and go to state 113


state 68

    (61) multExpression -> unaryExpression .
    (67) unaryExpression -> unaryExpression . SOMASOMA
    (68) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 61 (multExpression -> unaryExpression .)
    DIVIDIR         reduce using rule 61 (multExpression -> unaryExpression .)
    RESTO           reduce using rule 61 (multExpression -> unaryExpression .)
    SOMA            reduce using rule 61 (multExpression -> unaryExpression .)
    SUBTRAIR        reduce using rule 61 (multExpression -> unaryExpression .)
    MENOR           reduce using rule 61 (multExpression -> unaryExpression .)
    MAIOR           reduce using rule 61 (multExpression -> unaryExpression .)
    MENORI          reduce using rule 61 (multExpression -> unaryExpression .)
    MAIORI          reduce using rule 61 (multExpression -> unaryExpression .)
    IGUAL           reduce using rule 61 (multExpression -> unaryExpression .)
    NEG             reduce using rule 61 (multExpression -> unaryExpression .)
    AND             reduce using rule 61 (multExpression -> unaryExpression .)
    OR              reduce using rule 61 (multExpression -> unaryExpression .)
    PCOMMA          reduce using rule 61 (multExpression -> unaryExpression .)
    RPAREN          reduce using rule 61 (multExpression -> unaryExpression .)
    COMMA           reduce using rule 61 (multExpression -> unaryExpression .)
    RCON            reduce using rule 61 (multExpression -> unaryExpression .)
    PONTOS          reduce using rule 61 (multExpression -> unaryExpression .)
    SOMASOMA        shift and go to state 114
    SUBSUB          shift and go to state 115


state 69

    (65) unaryExpression -> primary .

    SOMASOMA        reduce using rule 65 (unaryExpression -> primary .)
    SUBSUB          reduce using rule 65 (unaryExpression -> primary .)
    VEZES           reduce using rule 65 (unaryExpression -> primary .)
    DIVIDIR         reduce using rule 65 (unaryExpression -> primary .)
    RESTO           reduce using rule 65 (unaryExpression -> primary .)
    SOMA            reduce using rule 65 (unaryExpression -> primary .)
    SUBTRAIR        reduce using rule 65 (unaryExpression -> primary .)
    MENOR           reduce using rule 65 (unaryExpression -> primary .)
    MAIOR           reduce using rule 65 (unaryExpression -> primary .)
    MENORI          reduce using rule 65 (unaryExpression -> primary .)
    MAIORI          reduce using rule 65 (unaryExpression -> primary .)
    IGUAL           reduce using rule 65 (unaryExpression -> primary .)
    NEG             reduce using rule 65 (unaryExpression -> primary .)
    AND             reduce using rule 65 (unaryExpression -> primary .)
    OR              reduce using rule 65 (unaryExpression -> primary .)
    PCOMMA          reduce using rule 65 (unaryExpression -> primary .)
    RPAREN          reduce using rule 65 (unaryExpression -> primary .)
    COMMA           reduce using rule 65 (unaryExpression -> primary .)
    RCON            reduce using rule 65 (unaryExpression -> primary .)
    PONTOS          reduce using rule 65 (unaryExpression -> primary .)


state 70

    (66) unaryExpression -> functionCall .

    SOMASOMA        reduce using rule 66 (unaryExpression -> functionCall .)
    SUBSUB          reduce using rule 66 (unaryExpression -> functionCall .)
    VEZES           reduce using rule 66 (unaryExpression -> functionCall .)
    DIVIDIR         reduce using rule 66 (unaryExpression -> functionCall .)
    RESTO           reduce using rule 66 (unaryExpression -> functionCall .)
    SOMA            reduce using rule 66 (unaryExpression -> functionCall .)
    SUBTRAIR        reduce using rule 66 (unaryExpression -> functionCall .)
    MENOR           reduce using rule 66 (unaryExpression -> functionCall .)
    MAIOR           reduce using rule 66 (unaryExpression -> functionCall .)
    MENORI          reduce using rule 66 (unaryExpression -> functionCall .)
    MAIORI          reduce using rule 66 (unaryExpression -> functionCall .)
    IGUAL           reduce using rule 66 (unaryExpression -> functionCall .)
    NEG             reduce using rule 66 (unaryExpression -> functionCall .)
    AND             reduce using rule 66 (unaryExpression -> functionCall .)
    OR              reduce using rule 66 (unaryExpression -> functionCall .)
    PCOMMA          reduce using rule 66 (unaryExpression -> functionCall .)
    RPAREN          reduce using rule 66 (unaryExpression -> functionCall .)
    COMMA           reduce using rule 66 (unaryExpression -> functionCall .)
    RCON            reduce using rule 66 (unaryExpression -> functionCall .)
    PONTOS          reduce using rule 66 (unaryExpression -> functionCall .)


state 71

    (69) functionCall -> functionSignature .

    SOMASOMA        reduce using rule 69 (functionCall -> functionSignature .)
    SUBSUB          reduce using rule 69 (functionCall -> functionSignature .)
    VEZES           reduce using rule 69 (functionCall -> functionSignature .)
    DIVIDIR         reduce using rule 69 (functionCall -> functionSignature .)
    RESTO           reduce using rule 69 (functionCall -> functionSignature .)
    SOMA            reduce using rule 69 (functionCall -> functionSignature .)
    SUBTRAIR        reduce using rule 69 (functionCall -> functionSignature .)
    MENOR           reduce using rule 69 (functionCall -> functionSignature .)
    MAIOR           reduce using rule 69 (functionCall -> functionSignature .)
    MENORI          reduce using rule 69 (functionCall -> functionSignature .)
    MAIORI          reduce using rule 69 (functionCall -> functionSignature .)
    IGUAL           reduce using rule 69 (functionCall -> functionSignature .)
    NEG             reduce using rule 69 (functionCall -> functionSignature .)
    AND             reduce using rule 69 (functionCall -> functionSignature .)
    OR              reduce using rule 69 (functionCall -> functionSignature .)
    PCOMMA          reduce using rule 69 (functionCall -> functionSignature .)
    RPAREN          reduce using rule 69 (functionCall -> functionSignature .)
    COMMA           reduce using rule 69 (functionCall -> functionSignature .)
    RCON            reduce using rule 69 (functionCall -> functionSignature .)
    PONTOS          reduce using rule 69 (functionCall -> functionSignature .)


state 72

    (17) formalParameterList -> LPAREN RPAREN .

    LCHAV           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    SOMASOMA        reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    SUBSUB          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    VEZES           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    DIVIDIR         reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    RESTO           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    SOMA            reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    SUBTRAIR        reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    MENOR           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    MAIOR           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    MENORI          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    MAIORI          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    IGUAL           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    NEG             reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    AND             reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    OR              reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    PCOMMA          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    RPAREN          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    COMMA           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    RCON            reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    PONTOS          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)


state 73

    (18) formalParameterList -> LPAREN normalFormalParameters . RPAREN

    RPAREN          shift and go to state 116


state 74

    (19) normalFormalParameters -> simpleFormalParameter .
    (20) normalFormalParameters -> simpleFormalParameter . COMMA normalFormalParameters

    RPAREN          reduce using rule 19 (normalFormalParameters -> simpleFormalParameter .)
    COMMA           shift and go to state 117


state 75

    (21) simpleFormalParameter -> type . ID

    ID              shift and go to state 118


state 76

    (16) functionSignature -> type ID formalParameterList .

    LCHAV           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    SOMASOMA        reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    SUBSUB          reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    VEZES           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    DIVIDIR         reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    RESTO           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    SOMA            reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    SUBTRAIR        reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    MENOR           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    MAIOR           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    MENORI          reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    MAIORI          reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    IGUAL           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    NEG             reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    AND             reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    OR              reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    PCOMMA          reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    RPAREN          reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    COMMA           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    RCON            reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    PONTOS          reduce using rule 16 (functionSignature -> type ID formalParameterList .)


state 77

    (23) block -> LCHAV statements RCHAV .

    ID              reduce using rule 23 (block -> LCHAV statements RCHAV .)
    VAR             reduce using rule 23 (block -> LCHAV statements RCHAV .)
    INT             reduce using rule 23 (block -> LCHAV statements RCHAV .)
    FLOAT           reduce using rule 23 (block -> LCHAV statements RCHAV .)
    CHAR            reduce using rule 23 (block -> LCHAV statements RCHAV .)
    STRING          reduce using rule 23 (block -> LCHAV statements RCHAV .)
    VOID            reduce using rule 23 (block -> LCHAV statements RCHAV .)
    BOOLEAN         reduce using rule 23 (block -> LCHAV statements RCHAV .)
    $end            reduce using rule 23 (block -> LCHAV statements RCHAV .)
    LCHAV           reduce using rule 23 (block -> LCHAV statements RCHAV .)
    PCOMMA          reduce using rule 23 (block -> LCHAV statements RCHAV .)
    RETURN          reduce using rule 23 (block -> LCHAV statements RCHAV .)
    IF              reduce using rule 23 (block -> LCHAV statements RCHAV .)
    FOR             reduce using rule 23 (block -> LCHAV statements RCHAV .)
    WHILE           reduce using rule 23 (block -> LCHAV statements RCHAV .)
    DO              reduce using rule 23 (block -> LCHAV statements RCHAV .)
    SWITCH          reduce using rule 23 (block -> LCHAV statements RCHAV .)
    BREAK           reduce using rule 23 (block -> LCHAV statements RCHAV .)
    NUMBER          reduce using rule 23 (block -> LCHAV statements RCHAV .)
    LITERAL_STRING  reduce using rule 23 (block -> LCHAV statements RCHAV .)
    TRUE            reduce using rule 23 (block -> LCHAV statements RCHAV .)
    FALSE           reduce using rule 23 (block -> LCHAV statements RCHAV .)
    LCON            reduce using rule 23 (block -> LCHAV statements RCHAV .)
    LPAREN          reduce using rule 23 (block -> LCHAV statements RCHAV .)
    RCHAV           reduce using rule 23 (block -> LCHAV statements RCHAV .)
    CASE            reduce using rule 23 (block -> LCHAV statements RCHAV .)
    DEFAULT         reduce using rule 23 (block -> LCHAV statements RCHAV .)
    ELSE            reduce using rule 23 (block -> LCHAV statements RCHAV .)


state 78

    (25) statements -> statement statements .

    RCHAV           reduce using rule 25 (statements -> statement statements .)
    CASE            reduce using rule 25 (statements -> statement statements .)
    DEFAULT         reduce using rule 25 (statements -> statement statements .)


state 79

    (44) expressionStatement -> expression PCOMMA .

    LCHAV           reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    PCOMMA          reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    RETURN          reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    IF              reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    FOR             reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    WHILE           reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    DO              reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    SWITCH          reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    BREAK           reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    ID              reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    NUMBER          reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    LITERAL_STRING  reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    VAR             reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    INT             reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    FLOAT           reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    CHAR            reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    STRING          reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    VOID            reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    BOOLEAN         reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    TRUE            reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    FALSE           reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    LCON            reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    LPAREN          reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    RCHAV           reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    CASE            reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    DEFAULT         reduce using rule 44 (expressionStatement -> expression PCOMMA .)
    ELSE            reduce using rule 44 (expressionStatement -> expression PCOMMA .)


state 80

    (38) localVariableDeclaration -> initializedVariableDeclaration PCOMMA .

    LCHAV           reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    PCOMMA          reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    RETURN          reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    IF              reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FOR             reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    WHILE           reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    DO              reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    SWITCH          reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    BREAK           reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    ID              reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    NUMBER          reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LITERAL_STRING  reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    VAR             reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    INT             reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FLOAT           reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    CHAR            reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    STRING          reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    VOID            reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    BOOLEAN         reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    TRUE            reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FALSE           reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LCON            reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LPAREN          reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    RCHAV           reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    CASE            reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    DEFAULT         reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    ELSE            reduce using rule 38 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)


state 81

    (42) initializedVariableDeclaration -> initializedVariableDeclaration COMMA . ID

    ID              shift and go to state 119


state 82

    (85) returnStatement -> RETURN PCOMMA .

    LCHAV           reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    PCOMMA          reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    RETURN          reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    IF              reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    FOR             reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    WHILE           reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    DO              reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    SWITCH          reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    BREAK           reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    ID              reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    NUMBER          reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    LITERAL_STRING  reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    VAR             reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    INT             reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    FLOAT           reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    CHAR            reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    STRING          reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    VOID            reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    BOOLEAN         reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    TRUE            reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    FALSE           reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    LCON            reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    LPAREN          reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    RCHAV           reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    CASE            reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    DEFAULT         reduce using rule 85 (returnStatement -> RETURN PCOMMA .)
    ELSE            reduce using rule 85 (returnStatement -> RETURN PCOMMA .)


state 83

    (86) returnStatement -> RETURN expression . PCOMMA

    PCOMMA          shift and go to state 120


state 84

    (70) primary -> literal .

    SOMASOMA        reduce using rule 70 (primary -> literal .)
    SUBSUB          reduce using rule 70 (primary -> literal .)
    VEZES           reduce using rule 70 (primary -> literal .)
    DIVIDIR         reduce using rule 70 (primary -> literal .)
    RESTO           reduce using rule 70 (primary -> literal .)
    SOMA            reduce using rule 70 (primary -> literal .)
    SUBTRAIR        reduce using rule 70 (primary -> literal .)
    MENOR           reduce using rule 70 (primary -> literal .)
    MAIOR           reduce using rule 70 (primary -> literal .)
    MENORI          reduce using rule 70 (primary -> literal .)
    MAIORI          reduce using rule 70 (primary -> literal .)
    IGUAL           reduce using rule 70 (primary -> literal .)
    NEG             reduce using rule 70 (primary -> literal .)
    AND             reduce using rule 70 (primary -> literal .)
    OR              reduce using rule 70 (primary -> literal .)
    PCOMMA          reduce using rule 70 (primary -> literal .)
    RPAREN          reduce using rule 70 (primary -> literal .)
    COMMA           reduce using rule 70 (primary -> literal .)
    RCON            reduce using rule 70 (primary -> literal .)
    PONTOS          reduce using rule 70 (primary -> literal .)


state 85

    (72) literal -> ID .
    (15) functionSignature -> ID . formalParameterList
    (79) listLiteralID -> ID . listLiteral
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN
    (78) listLiteral -> . LCON expressionList RCON

    SOMASOMA        reduce using rule 72 (literal -> ID .)
    SUBSUB          reduce using rule 72 (literal -> ID .)
    VEZES           reduce using rule 72 (literal -> ID .)
    DIVIDIR         reduce using rule 72 (literal -> ID .)
    RESTO           reduce using rule 72 (literal -> ID .)
    SOMA            reduce using rule 72 (literal -> ID .)
    SUBTRAIR        reduce using rule 72 (literal -> ID .)
    MENOR           reduce using rule 72 (literal -> ID .)
    MAIOR           reduce using rule 72 (literal -> ID .)
    MENORI          reduce using rule 72 (literal -> ID .)
    MAIORI          reduce using rule 72 (literal -> ID .)
    IGUAL           reduce using rule 72 (literal -> ID .)
    NEG             reduce using rule 72 (literal -> ID .)
    AND             reduce using rule 72 (literal -> ID .)
    OR              reduce using rule 72 (literal -> ID .)
    PCOMMA          reduce using rule 72 (literal -> ID .)
    RPAREN          reduce using rule 72 (literal -> ID .)
    COMMA           reduce using rule 72 (literal -> ID .)
    RCON            reduce using rule 72 (literal -> ID .)
    PONTOS          reduce using rule 72 (literal -> ID .)
    LPAREN          shift and go to state 20
    LCON            shift and go to state 64

    formalParameterList            shift and go to state 19
    listLiteral                    shift and go to state 95

state 86

    (16) functionSignature -> type . ID formalParameterList

    ID              shift and go to state 121


state 87

    (87) ifStatement -> IF LPAREN . expression RPAREN statement
    (88) ifStatement -> IF LPAREN . expression RPAREN statement ELSE statement
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 122
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 88

    (71) primary -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 123


state 89

    (89) forStatement -> FOR LPAREN . forLoopParts RPAREN statement
    (90) forLoopParts -> . forInitializerStatement PCOMMA
    (91) forLoopParts -> . forInitializerStatement PCOMMA expressionList
    (92) forLoopParts -> . forInitializerStatement expression PCOMMA
    (93) forLoopParts -> . forInitializerStatement expression PCOMMA expressionList
    (94) forInitializerStatement -> . localVariableDeclaration
    (95) forInitializerStatement -> . PCOMMA
    (96) forInitializerStatement -> . expression PCOMMA
    (38) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (45) expression -> . orExpression
    (39) initializedVariableDeclaration -> . declaredIdentifier
    (40) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (41) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (42) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    PCOMMA          shift and go to state 126
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    LPAREN          shift and go to state 44

    forLoopParts                   shift and go to state 124
    forInitializerStatement        shift and go to state 125
    expression                     shift and go to state 127
    localVariableDeclaration       shift and go to state 128
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71

state 90

    (97) whileStatement -> WHILE LPAREN . expression RPAREN statement
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 129
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 91

    (98) doStatement -> DO statement . WHILE LPAREN expression RPAREN PCOMMA

    WHILE           shift and go to state 130


state 92

    (99) switchStatement -> SWITCH LPAREN . expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> SWITCH LPAREN . expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 131
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 93

    (105) breakStatement -> BREAK PCOMMA .

    LCHAV           reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    PCOMMA          reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    RETURN          reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    IF              reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    FOR             reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    WHILE           reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    DO              reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    SWITCH          reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    BREAK           reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    ID              reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    NUMBER          reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    LITERAL_STRING  reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    VAR             reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    INT             reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    FLOAT           reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    CHAR            reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    STRING          reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    VOID            reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    BOOLEAN         reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    TRUE            reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    FALSE           reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    LCON            reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    LPAREN          reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    RCHAV           reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    CASE            reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    DEFAULT         reduce using rule 105 (breakStatement -> BREAK PCOMMA .)
    ELSE            reduce using rule 105 (breakStatement -> BREAK PCOMMA .)


state 94

    (106) breakStatement -> BREAK ID . PCOMMA

    PCOMMA          shift and go to state 132


state 95

    (79) listLiteralID -> ID listLiteral .

    ATRIBUIR        reduce using rule 79 (listLiteralID -> ID listLiteral .)
    SOMASOMA        reduce using rule 79 (listLiteralID -> ID listLiteral .)
    SUBSUB          reduce using rule 79 (listLiteralID -> ID listLiteral .)
    VEZES           reduce using rule 79 (listLiteralID -> ID listLiteral .)
    DIVIDIR         reduce using rule 79 (listLiteralID -> ID listLiteral .)
    RESTO           reduce using rule 79 (listLiteralID -> ID listLiteral .)
    SOMA            reduce using rule 79 (listLiteralID -> ID listLiteral .)
    SUBTRAIR        reduce using rule 79 (listLiteralID -> ID listLiteral .)
    MENOR           reduce using rule 79 (listLiteralID -> ID listLiteral .)
    MAIOR           reduce using rule 79 (listLiteralID -> ID listLiteral .)
    MENORI          reduce using rule 79 (listLiteralID -> ID listLiteral .)
    MAIORI          reduce using rule 79 (listLiteralID -> ID listLiteral .)
    IGUAL           reduce using rule 79 (listLiteralID -> ID listLiteral .)
    NEG             reduce using rule 79 (listLiteralID -> ID listLiteral .)
    AND             reduce using rule 79 (listLiteralID -> ID listLiteral .)
    OR              reduce using rule 79 (listLiteralID -> ID listLiteral .)
    PCOMMA          reduce using rule 79 (listLiteralID -> ID listLiteral .)
    RPAREN          reduce using rule 79 (listLiteralID -> ID listLiteral .)
    COMMA           reduce using rule 79 (listLiteralID -> ID listLiteral .)
    RCON            reduce using rule 79 (listLiteralID -> ID listLiteral .)
    PONTOS          reduce using rule 79 (listLiteralID -> ID listLiteral .)


state 96

    (47) orExpression -> orExpression OR . andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    andExpression                  shift and go to state 133
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 97

    (40) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR . expression
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 134
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 98

    (41) initializedVariableDeclaration -> literal ATRIBUIR . expression
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    literal                        shift and go to state 84
    expression                     shift and go to state 135
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 99

    (49) andExpression -> andExpression AND . equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    equalityExpression             shift and go to state 136
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 100

    (7) declaredIdentifier -> type ID .
    (16) functionSignature -> type ID . formalParameterList
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    ATRIBUIR        reduce using rule 7 (declaredIdentifier -> type ID .)
    PCOMMA          reduce using rule 7 (declaredIdentifier -> type ID .)
    COMMA           reduce using rule 7 (declaredIdentifier -> type ID .)
    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 76

state 101

    (51) equalityExpression -> equalityExpression IGUAL . relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    relacionalExpression           shift and go to state 137
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 102

    (52) equalityExpression -> equalityExpression NEG . relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    relacionalExpression           shift and go to state 138
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 103

    (78) listLiteral -> LCON expressionList . RCON

    RCON            shift and go to state 139


state 104

    (82) expressionList -> expression . COMMA
    (83) expressionList -> expression .
    (84) expressionList -> expression . COMMA expressionList

    COMMA           shift and go to state 140
    RCON            reduce using rule 83 (expressionList -> expression .)
    RPAREN          reduce using rule 83 (expressionList -> expression .)


state 105

    (54) relacionalExpression -> relacionalExpression MENOR . addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    addExpression                  shift and go to state 141
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 106

    (55) relacionalExpression -> relacionalExpression MAIOR . addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    addExpression                  shift and go to state 142
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 107

    (56) relacionalExpression -> relacionalExpression MENORI . addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    addExpression                  shift and go to state 143
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 108

    (57) relacionalExpression -> relacionalExpression MAIORI . addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    addExpression                  shift and go to state 144
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 109

    (59) addExpression -> addExpression SOMA . multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    multExpression                 shift and go to state 145
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 110

    (60) addExpression -> addExpression SUBTRAIR . multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    multExpression                 shift and go to state 146
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 111

    (62) multExpression -> multExpression VEZES . unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    unaryExpression                shift and go to state 147
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 112

    (63) multExpression -> multExpression DIVIDIR . unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    unaryExpression                shift and go to state 148
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 113

    (64) multExpression -> multExpression RESTO . unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    unaryExpression                shift and go to state 149
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 114

    (67) unaryExpression -> unaryExpression SOMASOMA .

    SOMASOMA        reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    SUBSUB          reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    VEZES           reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    DIVIDIR         reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    RESTO           reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    SOMA            reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    SUBTRAIR        reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    MENOR           reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    MAIOR           reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    MENORI          reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    MAIORI          reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    IGUAL           reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    NEG             reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    AND             reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    OR              reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    PCOMMA          reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    RPAREN          reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    COMMA           reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    RCON            reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)
    PONTOS          reduce using rule 67 (unaryExpression -> unaryExpression SOMASOMA .)


state 115

    (68) unaryExpression -> unaryExpression SUBSUB .

    SOMASOMA        reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    SUBSUB          reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    VEZES           reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    DIVIDIR         reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    RESTO           reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    SOMA            reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    SUBTRAIR        reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    MENOR           reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    MAIOR           reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    MENORI          reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    MAIORI          reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    IGUAL           reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    NEG             reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    AND             reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    OR              reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    PCOMMA          reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    RPAREN          reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    COMMA           reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    RCON            reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)
    PONTOS          reduce using rule 68 (unaryExpression -> unaryExpression SUBSUB .)


state 116

    (18) formalParameterList -> LPAREN normalFormalParameters RPAREN .

    LCHAV           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SOMASOMA        reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SUBSUB          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    VEZES           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    DIVIDIR         reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RESTO           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SOMA            reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SUBTRAIR        reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MENOR           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MAIOR           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MENORI          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MAIORI          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    IGUAL           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    NEG             reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    AND             reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    OR              reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    PCOMMA          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RPAREN          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    COMMA           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RCON            reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    PONTOS          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)


state 117

    (20) normalFormalParameters -> simpleFormalParameter COMMA . normalFormalParameters
    (19) normalFormalParameters -> . simpleFormalParameter
    (20) normalFormalParameters -> . simpleFormalParameter COMMA normalFormalParameters
    (21) simpleFormalParameter -> . type ID
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    simpleFormalParameter          shift and go to state 74
    normalFormalParameters         shift and go to state 150
    type                           shift and go to state 75

state 118

    (21) simpleFormalParameter -> type ID .

    COMMA           reduce using rule 21 (simpleFormalParameter -> type ID .)
    RPAREN          reduce using rule 21 (simpleFormalParameter -> type ID .)


state 119

    (42) initializedVariableDeclaration -> initializedVariableDeclaration COMMA ID .

    PCOMMA          reduce using rule 42 (initializedVariableDeclaration -> initializedVariableDeclaration COMMA ID .)
    COMMA           reduce using rule 42 (initializedVariableDeclaration -> initializedVariableDeclaration COMMA ID .)


state 120

    (86) returnStatement -> RETURN expression PCOMMA .

    LCHAV           reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    PCOMMA          reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    RETURN          reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    IF              reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    FOR             reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    WHILE           reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    DO              reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    SWITCH          reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    BREAK           reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    ID              reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    NUMBER          reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    LITERAL_STRING  reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    VAR             reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    INT             reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    FLOAT           reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    CHAR            reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    STRING          reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    VOID            reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    BOOLEAN         reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    TRUE            reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    FALSE           reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    LCON            reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    LPAREN          reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    RCHAV           reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    CASE            reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    DEFAULT         reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)
    ELSE            reduce using rule 86 (returnStatement -> RETURN expression PCOMMA .)


state 121

    (16) functionSignature -> type ID . formalParameterList
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 76

state 122

    (87) ifStatement -> IF LPAREN expression . RPAREN statement
    (88) ifStatement -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 151


state 123

    (71) primary -> LPAREN expression RPAREN .

    SOMASOMA        reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    SUBSUB          reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    VEZES           reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    DIVIDIR         reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    RESTO           reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    SOMA            reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    SUBTRAIR        reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    MENORI          reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    MAIORI          reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    IGUAL           reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    NEG             reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    AND             reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    OR              reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    PCOMMA          reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    RCON            reduce using rule 71 (primary -> LPAREN expression RPAREN .)
    PONTOS          reduce using rule 71 (primary -> LPAREN expression RPAREN .)


state 124

    (89) forStatement -> FOR LPAREN forLoopParts . RPAREN statement

    RPAREN          shift and go to state 152


state 125

    (90) forLoopParts -> forInitializerStatement . PCOMMA
    (91) forLoopParts -> forInitializerStatement . PCOMMA expressionList
    (92) forLoopParts -> forInitializerStatement . expression PCOMMA
    (93) forLoopParts -> forInitializerStatement . expression PCOMMA expressionList
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    PCOMMA          shift and go to state 153
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 154
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 126

    (95) forInitializerStatement -> PCOMMA .

    PCOMMA          reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    LPAREN          reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    ID              reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    NUMBER          reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    LITERAL_STRING  reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    TRUE            reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    FALSE           reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    LCON            reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    VAR             reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    INT             reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    FLOAT           reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    CHAR            reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    STRING          reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    VOID            reduce using rule 95 (forInitializerStatement -> PCOMMA .)
    BOOLEAN         reduce using rule 95 (forInitializerStatement -> PCOMMA .)


state 127

    (96) forInitializerStatement -> expression . PCOMMA

    PCOMMA          shift and go to state 155


state 128

    (94) forInitializerStatement -> localVariableDeclaration .

    PCOMMA          reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    LPAREN          reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    ID              reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    NUMBER          reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    LITERAL_STRING  reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    TRUE            reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    FALSE           reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    LCON            reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    VAR             reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    INT             reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    FLOAT           reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    CHAR            reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    STRING          reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    VOID            reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)
    BOOLEAN         reduce using rule 94 (forInitializerStatement -> localVariableDeclaration .)


state 129

    (97) whileStatement -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 156


state 130

    (98) doStatement -> DO statement WHILE . LPAREN expression RPAREN PCOMMA

    LPAREN          shift and go to state 157


state 131

    (99) switchStatement -> SWITCH LPAREN expression . RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> SWITCH LPAREN expression . RPAREN LCHAV switchCaseRepetition defaultCase RCHAV

    RPAREN          shift and go to state 158


state 132

    (106) breakStatement -> BREAK ID PCOMMA .

    LCHAV           reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    PCOMMA          reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    RETURN          reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    IF              reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    FOR             reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    WHILE           reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    DO              reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    SWITCH          reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    BREAK           reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    ID              reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    NUMBER          reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    LITERAL_STRING  reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    VAR             reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    INT             reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    FLOAT           reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    CHAR            reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    STRING          reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    VOID            reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    BOOLEAN         reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    TRUE            reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    FALSE           reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    LCON            reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    LPAREN          reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    RCHAV           reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    CASE            reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    DEFAULT         reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)
    ELSE            reduce using rule 106 (breakStatement -> BREAK ID PCOMMA .)


state 133

    (47) orExpression -> orExpression OR andExpression .
    (49) andExpression -> andExpression . AND equalityExpression

    OR              reduce using rule 47 (orExpression -> orExpression OR andExpression .)
    PCOMMA          reduce using rule 47 (orExpression -> orExpression OR andExpression .)
    RPAREN          reduce using rule 47 (orExpression -> orExpression OR andExpression .)
    COMMA           reduce using rule 47 (orExpression -> orExpression OR andExpression .)
    RCON            reduce using rule 47 (orExpression -> orExpression OR andExpression .)
    PONTOS          reduce using rule 47 (orExpression -> orExpression OR andExpression .)
    AND             shift and go to state 99


state 134

    (40) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression .

    PCOMMA          reduce using rule 40 (initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression .)
    COMMA           reduce using rule 40 (initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression .)


state 135

    (41) initializedVariableDeclaration -> literal ATRIBUIR expression .

    PCOMMA          reduce using rule 41 (initializedVariableDeclaration -> literal ATRIBUIR expression .)
    COMMA           reduce using rule 41 (initializedVariableDeclaration -> literal ATRIBUIR expression .)


state 136

    (49) andExpression -> andExpression AND equalityExpression .
    (51) equalityExpression -> equalityExpression . IGUAL relacionalExpression
    (52) equalityExpression -> equalityExpression . NEG relacionalExpression

    AND             reduce using rule 49 (andExpression -> andExpression AND equalityExpression .)
    OR              reduce using rule 49 (andExpression -> andExpression AND equalityExpression .)
    PCOMMA          reduce using rule 49 (andExpression -> andExpression AND equalityExpression .)
    RPAREN          reduce using rule 49 (andExpression -> andExpression AND equalityExpression .)
    COMMA           reduce using rule 49 (andExpression -> andExpression AND equalityExpression .)
    RCON            reduce using rule 49 (andExpression -> andExpression AND equalityExpression .)
    PONTOS          reduce using rule 49 (andExpression -> andExpression AND equalityExpression .)
    IGUAL           shift and go to state 101
    NEG             shift and go to state 102


state 137

    (51) equalityExpression -> equalityExpression IGUAL relacionalExpression .
    (54) relacionalExpression -> relacionalExpression . MENOR addExpression
    (55) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (56) relacionalExpression -> relacionalExpression . MENORI addExpression
    (57) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 51 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    NEG             reduce using rule 51 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    AND             reduce using rule 51 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    OR              reduce using rule 51 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    PCOMMA          reduce using rule 51 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    RPAREN          reduce using rule 51 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    COMMA           reduce using rule 51 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    RCON            reduce using rule 51 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    PONTOS          reduce using rule 51 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    MENOR           shift and go to state 105
    MAIOR           shift and go to state 106
    MENORI          shift and go to state 107
    MAIORI          shift and go to state 108


state 138

    (52) equalityExpression -> equalityExpression NEG relacionalExpression .
    (54) relacionalExpression -> relacionalExpression . MENOR addExpression
    (55) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (56) relacionalExpression -> relacionalExpression . MENORI addExpression
    (57) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 52 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    NEG             reduce using rule 52 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    AND             reduce using rule 52 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    OR              reduce using rule 52 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    PCOMMA          reduce using rule 52 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    RPAREN          reduce using rule 52 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    COMMA           reduce using rule 52 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    RCON            reduce using rule 52 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    PONTOS          reduce using rule 52 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    MENOR           shift and go to state 105
    MAIOR           shift and go to state 106
    MENORI          shift and go to state 107
    MAIORI          shift and go to state 108


state 139

    (78) listLiteral -> LCON expressionList RCON .

    ATRIBUIR        reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    SOMASOMA        reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    SUBSUB          reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    VEZES           reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    DIVIDIR         reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    RESTO           reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    SOMA            reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    SUBTRAIR        reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    MENOR           reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    MAIOR           reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    MENORI          reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    MAIORI          reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    IGUAL           reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    NEG             reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    AND             reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    OR              reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    PCOMMA          reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    RPAREN          reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    COMMA           reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    RCON            reduce using rule 78 (listLiteral -> LCON expressionList RCON .)
    PONTOS          reduce using rule 78 (listLiteral -> LCON expressionList RCON .)


state 140

    (82) expressionList -> expression COMMA .
    (84) expressionList -> expression COMMA . expressionList
    (82) expressionList -> . expression COMMA
    (83) expressionList -> . expression
    (84) expressionList -> . expression COMMA expressionList
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    RCON            reduce using rule 82 (expressionList -> expression COMMA .)
    RPAREN          reduce using rule 82 (expressionList -> expression COMMA .)
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 104
    expressionList                 shift and go to state 159
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 141

    (54) relacionalExpression -> relacionalExpression MENOR addExpression .
    (59) addExpression -> addExpression . SOMA multExpression
    (60) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MAIOR           reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MENORI          reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MAIORI          reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    IGUAL           reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    NEG             reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    AND             reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    OR              reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    PCOMMA          reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    RPAREN          reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    COMMA           reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    RCON            reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    PONTOS          reduce using rule 54 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    SOMA            shift and go to state 109
    SUBTRAIR        shift and go to state 110


state 142

    (55) relacionalExpression -> relacionalExpression MAIOR addExpression .
    (59) addExpression -> addExpression . SOMA multExpression
    (60) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MAIOR           reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MENORI          reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MAIORI          reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    IGUAL           reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    NEG             reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    AND             reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    OR              reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    PCOMMA          reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    RPAREN          reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    COMMA           reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    RCON            reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    PONTOS          reduce using rule 55 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    SOMA            shift and go to state 109
    SUBTRAIR        shift and go to state 110


state 143

    (56) relacionalExpression -> relacionalExpression MENORI addExpression .
    (59) addExpression -> addExpression . SOMA multExpression
    (60) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MAIOR           reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MENORI          reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MAIORI          reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    IGUAL           reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    NEG             reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    AND             reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    OR              reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    PCOMMA          reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    RPAREN          reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    COMMA           reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    RCON            reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    PONTOS          reduce using rule 56 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    SOMA            shift and go to state 109
    SUBTRAIR        shift and go to state 110


state 144

    (57) relacionalExpression -> relacionalExpression MAIORI addExpression .
    (59) addExpression -> addExpression . SOMA multExpression
    (60) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MAIOR           reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MENORI          reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MAIORI          reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    IGUAL           reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    NEG             reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    AND             reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    OR              reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    PCOMMA          reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    RPAREN          reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    COMMA           reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    RCON            reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    PONTOS          reduce using rule 57 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    SOMA            shift and go to state 109
    SUBTRAIR        shift and go to state 110


state 145

    (59) addExpression -> addExpression SOMA multExpression .
    (62) multExpression -> multExpression . VEZES unaryExpression
    (63) multExpression -> multExpression . DIVIDIR unaryExpression
    (64) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    SUBTRAIR        reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    MENOR           reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    MAIOR           reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    MENORI          reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    MAIORI          reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    IGUAL           reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    NEG             reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    AND             reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    OR              reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    PCOMMA          reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    RPAREN          reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    COMMA           reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    RCON            reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    PONTOS          reduce using rule 59 (addExpression -> addExpression SOMA multExpression .)
    VEZES           shift and go to state 111
    DIVIDIR         shift and go to state 112
    RESTO           shift and go to state 113


state 146

    (60) addExpression -> addExpression SUBTRAIR multExpression .
    (62) multExpression -> multExpression . VEZES unaryExpression
    (63) multExpression -> multExpression . DIVIDIR unaryExpression
    (64) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    SUBTRAIR        reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    MENOR           reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    MAIOR           reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    MENORI          reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    MAIORI          reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    IGUAL           reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    NEG             reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    AND             reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    OR              reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    PCOMMA          reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    RPAREN          reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    COMMA           reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    RCON            reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    PONTOS          reduce using rule 60 (addExpression -> addExpression SUBTRAIR multExpression .)
    VEZES           shift and go to state 111
    DIVIDIR         shift and go to state 112
    RESTO           shift and go to state 113


state 147

    (62) multExpression -> multExpression VEZES unaryExpression .
    (67) unaryExpression -> unaryExpression . SOMASOMA
    (68) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    DIVIDIR         reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    RESTO           reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    SOMA            reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    SUBTRAIR        reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    MENOR           reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    MAIOR           reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    MENORI          reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    MAIORI          reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    IGUAL           reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    NEG             reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    AND             reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    OR              reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    PCOMMA          reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    RPAREN          reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    COMMA           reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    RCON            reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    PONTOS          reduce using rule 62 (multExpression -> multExpression VEZES unaryExpression .)
    SOMASOMA        shift and go to state 114
    SUBSUB          shift and go to state 115


state 148

    (63) multExpression -> multExpression DIVIDIR unaryExpression .
    (67) unaryExpression -> unaryExpression . SOMASOMA
    (68) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    DIVIDIR         reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RESTO           reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SOMA            reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SUBTRAIR        reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MENOR           reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MAIOR           reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MENORI          reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MAIORI          reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    IGUAL           reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    NEG             reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    AND             reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    OR              reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    PCOMMA          reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RPAREN          reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    COMMA           reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RCON            reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    PONTOS          reduce using rule 63 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SOMASOMA        shift and go to state 114
    SUBSUB          shift and go to state 115


state 149

    (64) multExpression -> multExpression RESTO unaryExpression .
    (67) unaryExpression -> unaryExpression . SOMASOMA
    (68) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    DIVIDIR         reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    RESTO           reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    SOMA            reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    SUBTRAIR        reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    MENOR           reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    MAIOR           reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    MENORI          reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    MAIORI          reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    IGUAL           reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    NEG             reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    AND             reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    OR              reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    PCOMMA          reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    RPAREN          reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    COMMA           reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    RCON            reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    PONTOS          reduce using rule 64 (multExpression -> multExpression RESTO unaryExpression .)
    SOMASOMA        shift and go to state 114
    SUBSUB          shift and go to state 115


state 150

    (20) normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters .

    RPAREN          reduce using rule 20 (normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters .)


state 151

    (87) ifStatement -> IF LPAREN expression RPAREN . statement
    (88) ifStatement -> IF LPAREN expression RPAREN . statement ELSE statement
    (27) statement -> . nonLabelledStatement
    (28) nonLabelledStatement -> . block
    (29) nonLabelledStatement -> . expressionStatement
    (30) nonLabelledStatement -> . localVariableDeclaration
    (31) nonLabelledStatement -> . returnStatement
    (32) nonLabelledStatement -> . ifStatement
    (33) nonLabelledStatement -> . forStatement
    (34) nonLabelledStatement -> . whileStatement
    (35) nonLabelledStatement -> . doStatement
    (36) nonLabelledStatement -> . switchStatement
    (37) nonLabelledStatement -> . breakStatement
    (23) block -> . LCHAV statements RCHAV
    (24) block -> . LCHAV RCHAV
    (43) expressionStatement -> . PCOMMA
    (44) expressionStatement -> . expression PCOMMA
    (38) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (85) returnStatement -> . RETURN PCOMMA
    (86) returnStatement -> . RETURN expression PCOMMA
    (87) ifStatement -> . IF LPAREN expression RPAREN statement
    (88) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (89) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (97) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (98) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (99) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (105) breakStatement -> . BREAK PCOMMA
    (106) breakStatement -> . BREAK ID PCOMMA
    (45) expression -> . orExpression
    (39) initializedVariableDeclaration -> . declaredIdentifier
    (40) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (41) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (42) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    LPAREN          shift and go to state 44

    expression                     shift and go to state 40
    statement                      shift and go to state 160
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71

state 152

    (89) forStatement -> FOR LPAREN forLoopParts RPAREN . statement
    (27) statement -> . nonLabelledStatement
    (28) nonLabelledStatement -> . block
    (29) nonLabelledStatement -> . expressionStatement
    (30) nonLabelledStatement -> . localVariableDeclaration
    (31) nonLabelledStatement -> . returnStatement
    (32) nonLabelledStatement -> . ifStatement
    (33) nonLabelledStatement -> . forStatement
    (34) nonLabelledStatement -> . whileStatement
    (35) nonLabelledStatement -> . doStatement
    (36) nonLabelledStatement -> . switchStatement
    (37) nonLabelledStatement -> . breakStatement
    (23) block -> . LCHAV statements RCHAV
    (24) block -> . LCHAV RCHAV
    (43) expressionStatement -> . PCOMMA
    (44) expressionStatement -> . expression PCOMMA
    (38) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (85) returnStatement -> . RETURN PCOMMA
    (86) returnStatement -> . RETURN expression PCOMMA
    (87) ifStatement -> . IF LPAREN expression RPAREN statement
    (88) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (89) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (97) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (98) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (99) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (105) breakStatement -> . BREAK PCOMMA
    (106) breakStatement -> . BREAK ID PCOMMA
    (45) expression -> . orExpression
    (39) initializedVariableDeclaration -> . declaredIdentifier
    (40) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (41) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (42) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    LPAREN          shift and go to state 44

    statement                      shift and go to state 161
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71

state 153

    (90) forLoopParts -> forInitializerStatement PCOMMA .
    (91) forLoopParts -> forInitializerStatement PCOMMA . expressionList
    (82) expressionList -> . expression COMMA
    (83) expressionList -> . expression
    (84) expressionList -> . expression COMMA expressionList
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    RPAREN          reduce using rule 90 (forLoopParts -> forInitializerStatement PCOMMA .)
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expressionList                 shift and go to state 162
    expression                     shift and go to state 104
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 154

    (92) forLoopParts -> forInitializerStatement expression . PCOMMA
    (93) forLoopParts -> forInitializerStatement expression . PCOMMA expressionList

    PCOMMA          shift and go to state 163


state 155

    (96) forInitializerStatement -> expression PCOMMA .

    PCOMMA          reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    LPAREN          reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    ID              reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    NUMBER          reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    LITERAL_STRING  reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    TRUE            reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    FALSE           reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    LCON            reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    VAR             reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    INT             reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    FLOAT           reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    CHAR            reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    STRING          reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    VOID            reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)
    BOOLEAN         reduce using rule 96 (forInitializerStatement -> expression PCOMMA .)


state 156

    (97) whileStatement -> WHILE LPAREN expression RPAREN . statement
    (27) statement -> . nonLabelledStatement
    (28) nonLabelledStatement -> . block
    (29) nonLabelledStatement -> . expressionStatement
    (30) nonLabelledStatement -> . localVariableDeclaration
    (31) nonLabelledStatement -> . returnStatement
    (32) nonLabelledStatement -> . ifStatement
    (33) nonLabelledStatement -> . forStatement
    (34) nonLabelledStatement -> . whileStatement
    (35) nonLabelledStatement -> . doStatement
    (36) nonLabelledStatement -> . switchStatement
    (37) nonLabelledStatement -> . breakStatement
    (23) block -> . LCHAV statements RCHAV
    (24) block -> . LCHAV RCHAV
    (43) expressionStatement -> . PCOMMA
    (44) expressionStatement -> . expression PCOMMA
    (38) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (85) returnStatement -> . RETURN PCOMMA
    (86) returnStatement -> . RETURN expression PCOMMA
    (87) ifStatement -> . IF LPAREN expression RPAREN statement
    (88) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (89) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (97) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (98) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (99) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (105) breakStatement -> . BREAK PCOMMA
    (106) breakStatement -> . BREAK ID PCOMMA
    (45) expression -> . orExpression
    (39) initializedVariableDeclaration -> . declaredIdentifier
    (40) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (41) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (42) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    LPAREN          shift and go to state 44

    expression                     shift and go to state 40
    statement                      shift and go to state 164
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71

state 157

    (98) doStatement -> DO statement WHILE LPAREN . expression RPAREN PCOMMA
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 165
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 158

    (99) switchStatement -> SWITCH LPAREN expression RPAREN . LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> SWITCH LPAREN expression RPAREN . LCHAV switchCaseRepetition defaultCase RCHAV

    LCHAV           shift and go to state 166


state 159

    (84) expressionList -> expression COMMA expressionList .

    RCON            reduce using rule 84 (expressionList -> expression COMMA expressionList .)
    RPAREN          reduce using rule 84 (expressionList -> expression COMMA expressionList .)


state 160

    (87) ifStatement -> IF LPAREN expression RPAREN statement .
    (88) ifStatement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LCHAV           reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    PCOMMA          reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LITERAL_STRING  reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    BOOLEAN         reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LCON            reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    RCHAV           reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 167

  ! ELSE            [ reduce using rule 87 (ifStatement -> IF LPAREN expression RPAREN statement .) ]


state 161

    (89) forStatement -> FOR LPAREN forLoopParts RPAREN statement .

    LCHAV           reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    PCOMMA          reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    RETURN          reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    IF              reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FOR             reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    WHILE           reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    DO              reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    SWITCH          reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    BREAK           reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    ID              reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    NUMBER          reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LITERAL_STRING  reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    VAR             reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    INT             reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FLOAT           reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    CHAR            reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    STRING          reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    VOID            reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    BOOLEAN         reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    TRUE            reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FALSE           reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LCON            reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LPAREN          reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    RCHAV           reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    CASE            reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    DEFAULT         reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    ELSE            reduce using rule 89 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)


state 162

    (91) forLoopParts -> forInitializerStatement PCOMMA expressionList .

    RPAREN          reduce using rule 91 (forLoopParts -> forInitializerStatement PCOMMA expressionList .)


state 163

    (92) forLoopParts -> forInitializerStatement expression PCOMMA .
    (93) forLoopParts -> forInitializerStatement expression PCOMMA . expressionList
    (82) expressionList -> . expression COMMA
    (83) expressionList -> . expression
    (84) expressionList -> . expression COMMA expressionList
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    RPAREN          reduce using rule 92 (forLoopParts -> forInitializerStatement expression PCOMMA .)
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 104
    expressionList                 shift and go to state 168
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 164

    (97) whileStatement -> WHILE LPAREN expression RPAREN statement .

    LCHAV           reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    PCOMMA          reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LITERAL_STRING  reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    VAR             reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    BOOLEAN         reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LCON            reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    RCHAV           reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 97 (whileStatement -> WHILE LPAREN expression RPAREN statement .)


state 165

    (98) doStatement -> DO statement WHILE LPAREN expression . RPAREN PCOMMA

    RPAREN          shift and go to state 169


state 166

    (99) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV . switchCaseRepetition RCHAV
    (100) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV . switchCaseRepetition defaultCase RCHAV
    (101) switchCaseRepetition -> . switchCase switchCaseRepetition
    (102) switchCaseRepetition -> . switchCase
    (103) switchCase -> . CASE expression PONTOS statements

    CASE            shift and go to state 172

    switchCaseRepetition           shift and go to state 170
    switchCase                     shift and go to state 171

state 167

    (88) ifStatement -> IF LPAREN expression RPAREN statement ELSE . statement
    (27) statement -> . nonLabelledStatement
    (28) nonLabelledStatement -> . block
    (29) nonLabelledStatement -> . expressionStatement
    (30) nonLabelledStatement -> . localVariableDeclaration
    (31) nonLabelledStatement -> . returnStatement
    (32) nonLabelledStatement -> . ifStatement
    (33) nonLabelledStatement -> . forStatement
    (34) nonLabelledStatement -> . whileStatement
    (35) nonLabelledStatement -> . doStatement
    (36) nonLabelledStatement -> . switchStatement
    (37) nonLabelledStatement -> . breakStatement
    (23) block -> . LCHAV statements RCHAV
    (24) block -> . LCHAV RCHAV
    (43) expressionStatement -> . PCOMMA
    (44) expressionStatement -> . expression PCOMMA
    (38) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (85) returnStatement -> . RETURN PCOMMA
    (86) returnStatement -> . RETURN expression PCOMMA
    (87) ifStatement -> . IF LPAREN expression RPAREN statement
    (88) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (89) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (97) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (98) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (99) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (105) breakStatement -> . BREAK PCOMMA
    (106) breakStatement -> . BREAK ID PCOMMA
    (45) expression -> . orExpression
    (39) initializedVariableDeclaration -> . declaredIdentifier
    (40) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (41) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (42) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    LPAREN          shift and go to state 44

    expression                     shift and go to state 40
    statement                      shift and go to state 173
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71

state 168

    (93) forLoopParts -> forInitializerStatement expression PCOMMA expressionList .

    RPAREN          reduce using rule 93 (forLoopParts -> forInitializerStatement expression PCOMMA expressionList .)


state 169

    (98) doStatement -> DO statement WHILE LPAREN expression RPAREN . PCOMMA

    PCOMMA          shift and go to state 174


state 170

    (99) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition . RCHAV
    (100) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition . defaultCase RCHAV
    (104) defaultCase -> . DEFAULT PONTOS statements

    RCHAV           shift and go to state 175
    DEFAULT         shift and go to state 177

    defaultCase                    shift and go to state 176

state 171

    (101) switchCaseRepetition -> switchCase . switchCaseRepetition
    (102) switchCaseRepetition -> switchCase .
    (101) switchCaseRepetition -> . switchCase switchCaseRepetition
    (102) switchCaseRepetition -> . switchCase
    (103) switchCase -> . CASE expression PONTOS statements

    RCHAV           reduce using rule 102 (switchCaseRepetition -> switchCase .)
    DEFAULT         reduce using rule 102 (switchCaseRepetition -> switchCase .)
    CASE            shift and go to state 172

    switchCase                     shift and go to state 171
    switchCaseRepetition           shift and go to state 178

state 172

    (103) switchCase -> CASE . expression PONTOS statements
    (45) expression -> . orExpression
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 179
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    literal                        shift and go to state 84
    functionSignature              shift and go to state 71
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 86

state 173

    (88) ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .

    LCHAV           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PCOMMA          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LITERAL_STRING  reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BOOLEAN         reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCON            reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RCHAV           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 174

    (98) doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .

    LCHAV           reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    PCOMMA          reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    RETURN          reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    IF              reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FOR             reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    WHILE           reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    DO              reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    SWITCH          reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    BREAK           reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    ID              reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    NUMBER          reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LITERAL_STRING  reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    VAR             reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    INT             reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FLOAT           reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    CHAR            reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    STRING          reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    VOID            reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    BOOLEAN         reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    TRUE            reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FALSE           reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LCON            reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LPAREN          reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    RCHAV           reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    CASE            reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    DEFAULT         reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    ELSE            reduce using rule 98 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)


state 175

    (99) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .

    LCHAV           reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    PCOMMA          reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    RETURN          reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    IF              reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FOR             reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    WHILE           reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    DO              reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    SWITCH          reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    BREAK           reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    ID              reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    NUMBER          reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LITERAL_STRING  reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    VAR             reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    INT             reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FLOAT           reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    CHAR            reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    STRING          reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    VOID            reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    BOOLEAN         reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    TRUE            reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FALSE           reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LCON            reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LPAREN          reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    RCHAV           reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    CASE            reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    DEFAULT         reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    ELSE            reduce using rule 99 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)


state 176

    (100) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase . RCHAV

    RCHAV           shift and go to state 180


state 177

    (104) defaultCase -> DEFAULT . PONTOS statements

    PONTOS          shift and go to state 181


state 178

    (101) switchCaseRepetition -> switchCase switchCaseRepetition .

    RCHAV           reduce using rule 101 (switchCaseRepetition -> switchCase switchCaseRepetition .)
    DEFAULT         reduce using rule 101 (switchCaseRepetition -> switchCase switchCaseRepetition .)


state 179

    (103) switchCase -> CASE expression . PONTOS statements

    PONTOS          shift and go to state 182


state 180

    (100) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .

    LCHAV           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    PCOMMA          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    RETURN          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    IF              reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FOR             reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    WHILE           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    DO              reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    SWITCH          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    BREAK           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    ID              reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    NUMBER          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LITERAL_STRING  reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    VAR             reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    INT             reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FLOAT           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    CHAR            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    STRING          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    VOID            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    BOOLEAN         reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    TRUE            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FALSE           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LCON            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LPAREN          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    RCHAV           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    CASE            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    DEFAULT         reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    ELSE            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)


state 181

    (104) defaultCase -> DEFAULT PONTOS . statements
    (25) statements -> . statement statements
    (26) statements -> . statement
    (27) statement -> . nonLabelledStatement
    (28) nonLabelledStatement -> . block
    (29) nonLabelledStatement -> . expressionStatement
    (30) nonLabelledStatement -> . localVariableDeclaration
    (31) nonLabelledStatement -> . returnStatement
    (32) nonLabelledStatement -> . ifStatement
    (33) nonLabelledStatement -> . forStatement
    (34) nonLabelledStatement -> . whileStatement
    (35) nonLabelledStatement -> . doStatement
    (36) nonLabelledStatement -> . switchStatement
    (37) nonLabelledStatement -> . breakStatement
    (23) block -> . LCHAV statements RCHAV
    (24) block -> . LCHAV RCHAV
    (43) expressionStatement -> . PCOMMA
    (44) expressionStatement -> . expression PCOMMA
    (38) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (85) returnStatement -> . RETURN PCOMMA
    (86) returnStatement -> . RETURN expression PCOMMA
    (87) ifStatement -> . IF LPAREN expression RPAREN statement
    (88) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (89) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (97) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (98) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (99) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (105) breakStatement -> . BREAK PCOMMA
    (106) breakStatement -> . BREAK ID PCOMMA
    (45) expression -> . orExpression
    (39) initializedVariableDeclaration -> . declaredIdentifier
    (40) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (41) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (42) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    LPAREN          shift and go to state 44

    statements                     shift and go to state 183
    statement                      shift and go to state 27
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71

state 182

    (103) switchCase -> CASE expression PONTOS . statements
    (25) statements -> . statement statements
    (26) statements -> . statement
    (27) statement -> . nonLabelledStatement
    (28) nonLabelledStatement -> . block
    (29) nonLabelledStatement -> . expressionStatement
    (30) nonLabelledStatement -> . localVariableDeclaration
    (31) nonLabelledStatement -> . returnStatement
    (32) nonLabelledStatement -> . ifStatement
    (33) nonLabelledStatement -> . forStatement
    (34) nonLabelledStatement -> . whileStatement
    (35) nonLabelledStatement -> . doStatement
    (36) nonLabelledStatement -> . switchStatement
    (37) nonLabelledStatement -> . breakStatement
    (23) block -> . LCHAV statements RCHAV
    (24) block -> . LCHAV RCHAV
    (43) expressionStatement -> . PCOMMA
    (44) expressionStatement -> . expression PCOMMA
    (38) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (85) returnStatement -> . RETURN PCOMMA
    (86) returnStatement -> . RETURN expression PCOMMA
    (87) ifStatement -> . IF LPAREN expression RPAREN statement
    (88) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (89) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (97) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (98) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (99) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (105) breakStatement -> . BREAK PCOMMA
    (106) breakStatement -> . BREAK ID PCOMMA
    (45) expression -> . orExpression
    (39) initializedVariableDeclaration -> . declaredIdentifier
    (40) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (41) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (42) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (46) orExpression -> . andExpression
    (47) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (72) literal -> . ID
    (73) literal -> . booleanLiteral
    (74) literal -> . listLiteralID
    (75) literal -> . listLiteral
    (76) literal -> . NUMBER
    (77) literal -> . LITERAL_STRING
    (48) andExpression -> . equalityExpression
    (49) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (80) booleanLiteral -> . TRUE
    (81) booleanLiteral -> . FALSE
    (79) listLiteralID -> . ID listLiteral
    (78) listLiteral -> . LCON expressionList RCON
    (50) equalityExpression -> . relacionalExpression
    (51) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (52) equalityExpression -> . equalityExpression NEG relacionalExpression
    (53) relacionalExpression -> . addExpression
    (54) relacionalExpression -> . relacionalExpression MENOR addExpression
    (55) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (56) relacionalExpression -> . relacionalExpression MENORI addExpression
    (57) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (58) addExpression -> . multExpression
    (59) addExpression -> . addExpression SOMA multExpression
    (60) addExpression -> . addExpression SUBTRAIR multExpression
    (61) multExpression -> . unaryExpression
    (62) multExpression -> . multExpression VEZES unaryExpression
    (63) multExpression -> . multExpression DIVIDIR unaryExpression
    (64) multExpression -> . multExpression RESTO unaryExpression
    (65) unaryExpression -> . primary
    (66) unaryExpression -> . functionCall
    (67) unaryExpression -> . unaryExpression SOMASOMA
    (68) unaryExpression -> . unaryExpression SUBSUB
    (70) primary -> . literal
    (71) primary -> . LPAREN expression RPAREN
    (69) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 60
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    LCON            shift and go to state 64
    LPAREN          shift and go to state 44

    expression                     shift and go to state 40
    statements                     shift and go to state 184
    statement                      shift and go to state 27
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 61
    relacionalExpression           shift and go to state 65
    addExpression                  shift and go to state 66
    multExpression                 shift and go to state 67
    unaryExpression                shift and go to state 68
    primary                        shift and go to state 69
    functionCall                   shift and go to state 70
    functionSignature              shift and go to state 71

state 183

    (104) defaultCase -> DEFAULT PONTOS statements .

    RCHAV           reduce using rule 104 (defaultCase -> DEFAULT PONTOS statements .)


state 184

    (103) switchCase -> CASE expression PONTOS statements .

    CASE            reduce using rule 103 (switchCase -> CASE expression PONTOS statements .)
    RCHAV           reduce using rule 103 (switchCase -> CASE expression PONTOS statements .)
    DEFAULT         reduce using rule 103 (switchCase -> CASE expression PONTOS statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 160 resolved as shift
