Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    CONST
    FINAL
    FUNCTION
    INTEGER
    NOT
    NULL

Grammar

Rule 0     S' -> topLevel
Rule 1     topLevel -> variableDeclaration PCOMMA
Rule 2     topLevel -> variableDeclaration PCOMMA topLevel
Rule 3     topLevel -> functionSignature functionBody
Rule 4     topLevel -> functionSignature functionBody topLevel
Rule 5     variableDeclaration -> declaredIdentifier
Rule 6     variableDeclaration -> variableDeclaration COMMA ID
Rule 7     declaredIdentifier -> voidOrType ID
Rule 8     declaredIdentifier -> expression
Rule 9     voidOrType -> type
Rule 10    type -> VAR
Rule 11    type -> INT
Rule 12    type -> FLOAT
Rule 13    type -> CHAR
Rule 14    type -> STRING
Rule 15    type -> VOID
Rule 16    functionSignature -> ID formalParameterList
Rule 17    functionSignature -> voidOrType ID formalParameterList
Rule 18    formalParameterList -> LPAREN RPAREN
Rule 19    formalParameterList -> LPAREN normalFormalParameters RPAREN
Rule 20    normalFormalParameters -> simpleFormalParameter
Rule 21    normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters
Rule 22    simpleFormalParameter -> voidOrType ID
Rule 23    simpleFormalParameter -> expression
Rule 24    functionBody -> block
Rule 25    block -> LCHAV statements RCHAV
Rule 26    block -> LCHAV RCHAV
Rule 27    statements -> statement statements
Rule 28    statements -> statement
Rule 29    statement -> nonLabelledStatement
Rule 30    nonLabelledStatement -> block
Rule 31    nonLabelledStatement -> expressionStatement
Rule 32    nonLabelledStatement -> localVariableDeclaration
Rule 33    nonLabelledStatement -> returnStatement
Rule 34    nonLabelledStatement -> ifStatement
Rule 35    nonLabelledStatement -> forStatement
Rule 36    nonLabelledStatement -> whileStatement
Rule 37    nonLabelledStatement -> doStatement
Rule 38    nonLabelledStatement -> switchStatement
Rule 39    nonLabelledStatement -> breakStatement
Rule 40    localVariableDeclaration -> initializedVariableDeclaration PCOMMA
Rule 41    initializedVariableDeclaration -> declaredIdentifier
Rule 42    initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression
Rule 43    initializedVariableDeclaration -> declaredIdentifier ATRIBUIR listLiteral
Rule 44    initializedVariableDeclaration -> literal ATRIBUIR expression
Rule 45    expressionStatement -> PCOMMA
Rule 46    expressionStatement -> expression PCOMMA
Rule 47    expression -> orExpression
Rule 48    orExpression -> andExpression
Rule 49    orExpression -> orExpression OR andExpression
Rule 50    andExpression -> equalityExpression
Rule 51    andExpression -> andExpression AND equalityExpression
Rule 52    equalityExpression -> relacionalExpression
Rule 53    equalityExpression -> equalityExpression IGUAL relacionalExpression
Rule 54    equalityExpression -> equalityExpression NEG relacionalExpression
Rule 55    relacionalExpression -> addExpression
Rule 56    relacionalExpression -> relacionalExpression MENOR addExpression
Rule 57    relacionalExpression -> relacionalExpression MAIOR addExpression
Rule 58    relacionalExpression -> relacionalExpression MENORI addExpression
Rule 59    relacionalExpression -> relacionalExpression MAIORI addExpression
Rule 60    addExpression -> multExpression
Rule 61    addExpression -> addExpression SOMA multExpression
Rule 62    addExpression -> addExpression SUBTRAIR multExpression
Rule 63    multExpression -> unaryExpression
Rule 64    multExpression -> multExpression VEZES unaryExpression
Rule 65    multExpression -> multExpression DIVIDIR unaryExpression
Rule 66    multExpression -> multExpression RESTO unaryExpression
Rule 67    unaryExpression -> primary
Rule 68    unaryExpression -> functionCall
Rule 69    unaryExpression -> unaryExpression SOMASOMA
Rule 70    unaryExpression -> unaryExpression SUBSUB
Rule 71    functionCall -> functionSignature
Rule 72    primary -> literal
Rule 73    primary -> LPAREN expression RPAREN
Rule 74    literal -> ID
Rule 75    literal -> booleanLiteral
Rule 76    literal -> listLiteralID
Rule 77    literal -> NUMBER
Rule 78    literal -> LITERAL_STRING
Rule 79    listLiteral -> LCON expressionList RCON
Rule 80    listLiteralID -> ID listLiteral
Rule 81    booleanLiteral -> TRUE
Rule 82    booleanLiteral -> FALSE
Rule 83    expressionList -> expression COMMA
Rule 84    expressionList -> expression
Rule 85    expressionList -> expression COMMA expressionList
Rule 86    returnStatement -> RETURN PCOMMA
Rule 87    returnStatement -> RETURN expression PCOMMA
Rule 88    ifStatement -> IF LPAREN expression RPAREN statement
Rule 89    ifStatement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 90    forStatement -> FOR LPAREN forLoopParts RPAREN statement
Rule 91    forLoopParts -> forInitializerStatement PCOMMA
Rule 92    forLoopParts -> forInitializerStatement PCOMMA expressionList
Rule 93    forLoopParts -> forInitializerStatement expression PCOMMA
Rule 94    forLoopParts -> forInitializerStatement expression PCOMMA expressionList
Rule 95    forInitializerStatement -> localVariableDeclaration
Rule 96    forInitializerStatement -> PCOMMA
Rule 97    forInitializerStatement -> expression PCOMMA
Rule 98    whileStatement -> WHILE LPAREN expression RPAREN statement
Rule 99    doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA
Rule 100   switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
Rule 101   switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
Rule 102   switchCaseRepetition -> switchCase switchCaseRepetition
Rule 103   switchCaseRepetition -> switchCase
Rule 104   switchCase -> CASE expression PONTOS statements
Rule 105   defaultCase -> DEFAULT PONTOS statements
Rule 106   label -> ID PONTOS
Rule 107   breakStatement -> BREAK PCOMMA
Rule 108   breakStatement -> BREAK ID PCOMMA

Terminals, with rules where they appear

AND                  : 51
ATRIBUIR             : 42 43 44
BREAK                : 107 108
CASE                 : 104
CHAR                 : 13
CLASS                : 
COMMA                : 6 21 83 85
CONST                : 
DEFAULT              : 105
DIVIDIR              : 65
DO                   : 99
ELSE                 : 89
FALSE                : 82
FINAL                : 
FLOAT                : 12
FOR                  : 90
FUNCTION             : 
ID                   : 6 7 16 17 22 74 80 106 108
IF                   : 88 89
IGUAL                : 53
INT                  : 11
INTEGER              : 
LCHAV                : 25 26 100 101
LCON                 : 79
LITERAL_STRING       : 78
LPAREN               : 18 19 73 88 89 90 98 99 100 101
MAIOR                : 57
MAIORI               : 59
MENOR                : 56
MENORI               : 58
NEG                  : 54
NOT                  : 
NULL                 : 
NUMBER               : 77
OR                   : 49
PCOMMA               : 1 2 40 45 46 86 87 91 92 93 94 96 97 99 107 108
PONTOS               : 104 105 106
RCHAV                : 25 26 100 101
RCON                 : 79
RESTO                : 66
RETURN               : 86 87
RPAREN               : 18 19 73 88 89 90 98 99 100 101
SOMA                 : 61
SOMASOMA             : 69
STRING               : 14
SUBSUB               : 70
SUBTRAIR             : 62
SWITCH               : 100 101
TRUE                 : 81
VAR                  : 10
VEZES                : 64
VOID                 : 15
WHILE                : 98 99
error                : 

Nonterminals, with rules where they appear

addExpression        : 55 56 57 58 59 61 62
andExpression        : 48 49 51
block                : 24 30
booleanLiteral       : 75
breakStatement       : 39
declaredIdentifier   : 5 41 42 43
defaultCase          : 101
doStatement          : 37
equalityExpression   : 50 51 53 54
expression           : 8 23 42 44 46 73 83 84 85 87 88 89 93 94 97 98 99 100 101 104
expressionList       : 79 85 92 94
expressionStatement  : 31
forInitializerStatement : 91 92 93 94
forLoopParts         : 90
forStatement         : 35
formalParameterList  : 16 17
functionBody         : 3 4
functionCall         : 68
functionSignature    : 3 4 71
ifStatement          : 34
initializedVariableDeclaration : 40
label                : 
listLiteral          : 43 80
listLiteralID        : 76
literal              : 44 72
localVariableDeclaration : 32 95
multExpression       : 60 61 62 64 65 66
nonLabelledStatement : 29
normalFormalParameters : 19 21
orExpression         : 47 49
primary              : 67
relacionalExpression : 52 53 54 56 57 58 59
returnStatement      : 33
simpleFormalParameter : 20 21
statement            : 27 28 88 89 89 90 98 99
statements           : 25 27 104 105
switchCase           : 102 103
switchCaseRepetition : 100 101 102
switchStatement      : 38
topLevel             : 2 4 0
type                 : 9
unaryExpression      : 63 64 65 66 69 70
variableDeclaration  : 1 2 6
voidOrType           : 7 17 22
whileStatement       : 36

Parsing method: LALR

state 0

    (0) S' -> . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (9) voidOrType -> . type
    (47) expression -> . orExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral

    ID              shift and go to state 5
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31

    topLevel                       shift and go to state 1
    variableDeclaration            shift and go to state 2
    functionSignature              shift and go to state 3
    declaredIdentifier             shift and go to state 4
    voidOrType                     shift and go to state 6
    expression                     shift and go to state 7
    type                           shift and go to state 8
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27

state 1

    (0) S' -> topLevel .



state 2

    (1) topLevel -> variableDeclaration . PCOMMA
    (2) topLevel -> variableDeclaration . PCOMMA topLevel
    (6) variableDeclaration -> variableDeclaration . COMMA ID

    PCOMMA          shift and go to state 32
    COMMA           shift and go to state 33


state 3

    (3) topLevel -> functionSignature . functionBody
    (4) topLevel -> functionSignature . functionBody topLevel
    (71) functionCall -> functionSignature .
    (24) functionBody -> . block
    (25) block -> . LCHAV statements RCHAV
    (26) block -> . LCHAV RCHAV

    SOMASOMA        reduce using rule 71 (functionCall -> functionSignature .)
    SUBSUB          reduce using rule 71 (functionCall -> functionSignature .)
    VEZES           reduce using rule 71 (functionCall -> functionSignature .)
    DIVIDIR         reduce using rule 71 (functionCall -> functionSignature .)
    RESTO           reduce using rule 71 (functionCall -> functionSignature .)
    SOMA            reduce using rule 71 (functionCall -> functionSignature .)
    SUBTRAIR        reduce using rule 71 (functionCall -> functionSignature .)
    MENOR           reduce using rule 71 (functionCall -> functionSignature .)
    MAIOR           reduce using rule 71 (functionCall -> functionSignature .)
    MENORI          reduce using rule 71 (functionCall -> functionSignature .)
    MAIORI          reduce using rule 71 (functionCall -> functionSignature .)
    IGUAL           reduce using rule 71 (functionCall -> functionSignature .)
    NEG             reduce using rule 71 (functionCall -> functionSignature .)
    AND             reduce using rule 71 (functionCall -> functionSignature .)
    OR              reduce using rule 71 (functionCall -> functionSignature .)
    PCOMMA          reduce using rule 71 (functionCall -> functionSignature .)
    COMMA           reduce using rule 71 (functionCall -> functionSignature .)
    LCHAV           shift and go to state 36

    functionBody                   shift and go to state 34
    block                          shift and go to state 35

state 4

    (5) variableDeclaration -> declaredIdentifier .

    PCOMMA          reduce using rule 5 (variableDeclaration -> declaredIdentifier .)
    COMMA           reduce using rule 5 (variableDeclaration -> declaredIdentifier .)


state 5

    (16) functionSignature -> ID . formalParameterList
    (74) literal -> ID .
    (80) listLiteralID -> ID . listLiteral
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN
    (79) listLiteral -> . LCON expressionList RCON

    SOMASOMA        reduce using rule 74 (literal -> ID .)
    SUBSUB          reduce using rule 74 (literal -> ID .)
    VEZES           reduce using rule 74 (literal -> ID .)
    DIVIDIR         reduce using rule 74 (literal -> ID .)
    RESTO           reduce using rule 74 (literal -> ID .)
    SOMA            reduce using rule 74 (literal -> ID .)
    SUBTRAIR        reduce using rule 74 (literal -> ID .)
    MENOR           reduce using rule 74 (literal -> ID .)
    MAIOR           reduce using rule 74 (literal -> ID .)
    MENORI          reduce using rule 74 (literal -> ID .)
    MAIORI          reduce using rule 74 (literal -> ID .)
    IGUAL           reduce using rule 74 (literal -> ID .)
    NEG             reduce using rule 74 (literal -> ID .)
    AND             reduce using rule 74 (literal -> ID .)
    OR              reduce using rule 74 (literal -> ID .)
    PCOMMA          reduce using rule 74 (literal -> ID .)
    COMMA           reduce using rule 74 (literal -> ID .)
    LPAREN          shift and go to state 39
    LCON            shift and go to state 40

    formalParameterList            shift and go to state 37
    listLiteral                    shift and go to state 38

state 6

    (17) functionSignature -> voidOrType . ID formalParameterList
    (7) declaredIdentifier -> voidOrType . ID

    ID              shift and go to state 41


state 7

    (8) declaredIdentifier -> expression .

    PCOMMA          reduce using rule 8 (declaredIdentifier -> expression .)
    COMMA           reduce using rule 8 (declaredIdentifier -> expression .)


state 8

    (9) voidOrType -> type .

    ID              reduce using rule 9 (voidOrType -> type .)


state 9

    (47) expression -> orExpression .
    (49) orExpression -> orExpression . OR andExpression

    PCOMMA          reduce using rule 47 (expression -> orExpression .)
    COMMA           reduce using rule 47 (expression -> orExpression .)
    RPAREN          reduce using rule 47 (expression -> orExpression .)
    ATRIBUIR        reduce using rule 47 (expression -> orExpression .)
    RCON            reduce using rule 47 (expression -> orExpression .)
    PONTOS          reduce using rule 47 (expression -> orExpression .)
    OR              shift and go to state 42


state 10

    (10) type -> VAR .

    ID              reduce using rule 10 (type -> VAR .)


state 11

    (11) type -> INT .

    ID              reduce using rule 11 (type -> INT .)


state 12

    (12) type -> FLOAT .

    ID              reduce using rule 12 (type -> FLOAT .)


state 13

    (13) type -> CHAR .

    ID              reduce using rule 13 (type -> CHAR .)


state 14

    (14) type -> STRING .

    ID              reduce using rule 14 (type -> STRING .)


state 15

    (15) type -> VOID .

    ID              reduce using rule 15 (type -> VOID .)


state 16

    (48) orExpression -> andExpression .
    (51) andExpression -> andExpression . AND equalityExpression

    OR              reduce using rule 48 (orExpression -> andExpression .)
    PCOMMA          reduce using rule 48 (orExpression -> andExpression .)
    COMMA           reduce using rule 48 (orExpression -> andExpression .)
    RPAREN          reduce using rule 48 (orExpression -> andExpression .)
    ATRIBUIR        reduce using rule 48 (orExpression -> andExpression .)
    RCON            reduce using rule 48 (orExpression -> andExpression .)
    PONTOS          reduce using rule 48 (orExpression -> andExpression .)
    AND             shift and go to state 43


state 17

    (50) andExpression -> equalityExpression .
    (53) equalityExpression -> equalityExpression . IGUAL relacionalExpression
    (54) equalityExpression -> equalityExpression . NEG relacionalExpression

    AND             reduce using rule 50 (andExpression -> equalityExpression .)
    OR              reduce using rule 50 (andExpression -> equalityExpression .)
    PCOMMA          reduce using rule 50 (andExpression -> equalityExpression .)
    COMMA           reduce using rule 50 (andExpression -> equalityExpression .)
    RPAREN          reduce using rule 50 (andExpression -> equalityExpression .)
    ATRIBUIR        reduce using rule 50 (andExpression -> equalityExpression .)
    RCON            reduce using rule 50 (andExpression -> equalityExpression .)
    PONTOS          reduce using rule 50 (andExpression -> equalityExpression .)
    IGUAL           shift and go to state 44
    NEG             shift and go to state 45


state 18

    (52) equalityExpression -> relacionalExpression .
    (56) relacionalExpression -> relacionalExpression . MENOR addExpression
    (57) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (58) relacionalExpression -> relacionalExpression . MENORI addExpression
    (59) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 52 (equalityExpression -> relacionalExpression .)
    NEG             reduce using rule 52 (equalityExpression -> relacionalExpression .)
    AND             reduce using rule 52 (equalityExpression -> relacionalExpression .)
    OR              reduce using rule 52 (equalityExpression -> relacionalExpression .)
    PCOMMA          reduce using rule 52 (equalityExpression -> relacionalExpression .)
    COMMA           reduce using rule 52 (equalityExpression -> relacionalExpression .)
    RPAREN          reduce using rule 52 (equalityExpression -> relacionalExpression .)
    ATRIBUIR        reduce using rule 52 (equalityExpression -> relacionalExpression .)
    RCON            reduce using rule 52 (equalityExpression -> relacionalExpression .)
    PONTOS          reduce using rule 52 (equalityExpression -> relacionalExpression .)
    MENOR           shift and go to state 46
    MAIOR           shift and go to state 47
    MENORI          shift and go to state 48
    MAIORI          shift and go to state 49


state 19

    (55) relacionalExpression -> addExpression .
    (61) addExpression -> addExpression . SOMA multExpression
    (62) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 55 (relacionalExpression -> addExpression .)
    MAIOR           reduce using rule 55 (relacionalExpression -> addExpression .)
    MENORI          reduce using rule 55 (relacionalExpression -> addExpression .)
    MAIORI          reduce using rule 55 (relacionalExpression -> addExpression .)
    IGUAL           reduce using rule 55 (relacionalExpression -> addExpression .)
    NEG             reduce using rule 55 (relacionalExpression -> addExpression .)
    AND             reduce using rule 55 (relacionalExpression -> addExpression .)
    OR              reduce using rule 55 (relacionalExpression -> addExpression .)
    PCOMMA          reduce using rule 55 (relacionalExpression -> addExpression .)
    COMMA           reduce using rule 55 (relacionalExpression -> addExpression .)
    RPAREN          reduce using rule 55 (relacionalExpression -> addExpression .)
    ATRIBUIR        reduce using rule 55 (relacionalExpression -> addExpression .)
    RCON            reduce using rule 55 (relacionalExpression -> addExpression .)
    PONTOS          reduce using rule 55 (relacionalExpression -> addExpression .)
    SOMA            shift and go to state 50
    SUBTRAIR        shift and go to state 51


state 20

    (60) addExpression -> multExpression .
    (64) multExpression -> multExpression . VEZES unaryExpression
    (65) multExpression -> multExpression . DIVIDIR unaryExpression
    (66) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 60 (addExpression -> multExpression .)
    SUBTRAIR        reduce using rule 60 (addExpression -> multExpression .)
    MENOR           reduce using rule 60 (addExpression -> multExpression .)
    MAIOR           reduce using rule 60 (addExpression -> multExpression .)
    MENORI          reduce using rule 60 (addExpression -> multExpression .)
    MAIORI          reduce using rule 60 (addExpression -> multExpression .)
    IGUAL           reduce using rule 60 (addExpression -> multExpression .)
    NEG             reduce using rule 60 (addExpression -> multExpression .)
    AND             reduce using rule 60 (addExpression -> multExpression .)
    OR              reduce using rule 60 (addExpression -> multExpression .)
    PCOMMA          reduce using rule 60 (addExpression -> multExpression .)
    COMMA           reduce using rule 60 (addExpression -> multExpression .)
    RPAREN          reduce using rule 60 (addExpression -> multExpression .)
    ATRIBUIR        reduce using rule 60 (addExpression -> multExpression .)
    RCON            reduce using rule 60 (addExpression -> multExpression .)
    PONTOS          reduce using rule 60 (addExpression -> multExpression .)
    VEZES           shift and go to state 52
    DIVIDIR         shift and go to state 53
    RESTO           shift and go to state 54


state 21

    (63) multExpression -> unaryExpression .
    (69) unaryExpression -> unaryExpression . SOMASOMA
    (70) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 63 (multExpression -> unaryExpression .)
    DIVIDIR         reduce using rule 63 (multExpression -> unaryExpression .)
    RESTO           reduce using rule 63 (multExpression -> unaryExpression .)
    SOMA            reduce using rule 63 (multExpression -> unaryExpression .)
    SUBTRAIR        reduce using rule 63 (multExpression -> unaryExpression .)
    MENOR           reduce using rule 63 (multExpression -> unaryExpression .)
    MAIOR           reduce using rule 63 (multExpression -> unaryExpression .)
    MENORI          reduce using rule 63 (multExpression -> unaryExpression .)
    MAIORI          reduce using rule 63 (multExpression -> unaryExpression .)
    IGUAL           reduce using rule 63 (multExpression -> unaryExpression .)
    NEG             reduce using rule 63 (multExpression -> unaryExpression .)
    AND             reduce using rule 63 (multExpression -> unaryExpression .)
    OR              reduce using rule 63 (multExpression -> unaryExpression .)
    PCOMMA          reduce using rule 63 (multExpression -> unaryExpression .)
    COMMA           reduce using rule 63 (multExpression -> unaryExpression .)
    RPAREN          reduce using rule 63 (multExpression -> unaryExpression .)
    ATRIBUIR        reduce using rule 63 (multExpression -> unaryExpression .)
    RCON            reduce using rule 63 (multExpression -> unaryExpression .)
    PONTOS          reduce using rule 63 (multExpression -> unaryExpression .)
    SOMASOMA        shift and go to state 55
    SUBSUB          shift and go to state 56


state 22

    (67) unaryExpression -> primary .

    SOMASOMA        reduce using rule 67 (unaryExpression -> primary .)
    SUBSUB          reduce using rule 67 (unaryExpression -> primary .)
    VEZES           reduce using rule 67 (unaryExpression -> primary .)
    DIVIDIR         reduce using rule 67 (unaryExpression -> primary .)
    RESTO           reduce using rule 67 (unaryExpression -> primary .)
    SOMA            reduce using rule 67 (unaryExpression -> primary .)
    SUBTRAIR        reduce using rule 67 (unaryExpression -> primary .)
    MENOR           reduce using rule 67 (unaryExpression -> primary .)
    MAIOR           reduce using rule 67 (unaryExpression -> primary .)
    MENORI          reduce using rule 67 (unaryExpression -> primary .)
    MAIORI          reduce using rule 67 (unaryExpression -> primary .)
    IGUAL           reduce using rule 67 (unaryExpression -> primary .)
    NEG             reduce using rule 67 (unaryExpression -> primary .)
    AND             reduce using rule 67 (unaryExpression -> primary .)
    OR              reduce using rule 67 (unaryExpression -> primary .)
    PCOMMA          reduce using rule 67 (unaryExpression -> primary .)
    COMMA           reduce using rule 67 (unaryExpression -> primary .)
    RPAREN          reduce using rule 67 (unaryExpression -> primary .)
    ATRIBUIR        reduce using rule 67 (unaryExpression -> primary .)
    RCON            reduce using rule 67 (unaryExpression -> primary .)
    PONTOS          reduce using rule 67 (unaryExpression -> primary .)


state 23

    (68) unaryExpression -> functionCall .

    SOMASOMA        reduce using rule 68 (unaryExpression -> functionCall .)
    SUBSUB          reduce using rule 68 (unaryExpression -> functionCall .)
    VEZES           reduce using rule 68 (unaryExpression -> functionCall .)
    DIVIDIR         reduce using rule 68 (unaryExpression -> functionCall .)
    RESTO           reduce using rule 68 (unaryExpression -> functionCall .)
    SOMA            reduce using rule 68 (unaryExpression -> functionCall .)
    SUBTRAIR        reduce using rule 68 (unaryExpression -> functionCall .)
    MENOR           reduce using rule 68 (unaryExpression -> functionCall .)
    MAIOR           reduce using rule 68 (unaryExpression -> functionCall .)
    MENORI          reduce using rule 68 (unaryExpression -> functionCall .)
    MAIORI          reduce using rule 68 (unaryExpression -> functionCall .)
    IGUAL           reduce using rule 68 (unaryExpression -> functionCall .)
    NEG             reduce using rule 68 (unaryExpression -> functionCall .)
    AND             reduce using rule 68 (unaryExpression -> functionCall .)
    OR              reduce using rule 68 (unaryExpression -> functionCall .)
    PCOMMA          reduce using rule 68 (unaryExpression -> functionCall .)
    COMMA           reduce using rule 68 (unaryExpression -> functionCall .)
    RPAREN          reduce using rule 68 (unaryExpression -> functionCall .)
    ATRIBUIR        reduce using rule 68 (unaryExpression -> functionCall .)
    RCON            reduce using rule 68 (unaryExpression -> functionCall .)
    PONTOS          reduce using rule 68 (unaryExpression -> functionCall .)


state 24

    (72) primary -> literal .

    SOMASOMA        reduce using rule 72 (primary -> literal .)
    SUBSUB          reduce using rule 72 (primary -> literal .)
    VEZES           reduce using rule 72 (primary -> literal .)
    DIVIDIR         reduce using rule 72 (primary -> literal .)
    RESTO           reduce using rule 72 (primary -> literal .)
    SOMA            reduce using rule 72 (primary -> literal .)
    SUBTRAIR        reduce using rule 72 (primary -> literal .)
    MENOR           reduce using rule 72 (primary -> literal .)
    MAIOR           reduce using rule 72 (primary -> literal .)
    MENORI          reduce using rule 72 (primary -> literal .)
    MAIORI          reduce using rule 72 (primary -> literal .)
    IGUAL           reduce using rule 72 (primary -> literal .)
    NEG             reduce using rule 72 (primary -> literal .)
    AND             reduce using rule 72 (primary -> literal .)
    OR              reduce using rule 72 (primary -> literal .)
    PCOMMA          reduce using rule 72 (primary -> literal .)
    COMMA           reduce using rule 72 (primary -> literal .)
    RPAREN          reduce using rule 72 (primary -> literal .)
    RCON            reduce using rule 72 (primary -> literal .)
    ATRIBUIR        reduce using rule 72 (primary -> literal .)
    PONTOS          reduce using rule 72 (primary -> literal .)


state 25

    (73) primary -> LPAREN . expression RPAREN
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 57
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 26

    (75) literal -> booleanLiteral .

    SOMASOMA        reduce using rule 75 (literal -> booleanLiteral .)
    SUBSUB          reduce using rule 75 (literal -> booleanLiteral .)
    VEZES           reduce using rule 75 (literal -> booleanLiteral .)
    DIVIDIR         reduce using rule 75 (literal -> booleanLiteral .)
    RESTO           reduce using rule 75 (literal -> booleanLiteral .)
    SOMA            reduce using rule 75 (literal -> booleanLiteral .)
    SUBTRAIR        reduce using rule 75 (literal -> booleanLiteral .)
    MENOR           reduce using rule 75 (literal -> booleanLiteral .)
    MAIOR           reduce using rule 75 (literal -> booleanLiteral .)
    MENORI          reduce using rule 75 (literal -> booleanLiteral .)
    MAIORI          reduce using rule 75 (literal -> booleanLiteral .)
    IGUAL           reduce using rule 75 (literal -> booleanLiteral .)
    NEG             reduce using rule 75 (literal -> booleanLiteral .)
    AND             reduce using rule 75 (literal -> booleanLiteral .)
    OR              reduce using rule 75 (literal -> booleanLiteral .)
    PCOMMA          reduce using rule 75 (literal -> booleanLiteral .)
    COMMA           reduce using rule 75 (literal -> booleanLiteral .)
    RPAREN          reduce using rule 75 (literal -> booleanLiteral .)
    ATRIBUIR        reduce using rule 75 (literal -> booleanLiteral .)
    RCON            reduce using rule 75 (literal -> booleanLiteral .)
    PONTOS          reduce using rule 75 (literal -> booleanLiteral .)


state 27

    (76) literal -> listLiteralID .

    SOMASOMA        reduce using rule 76 (literal -> listLiteralID .)
    SUBSUB          reduce using rule 76 (literal -> listLiteralID .)
    VEZES           reduce using rule 76 (literal -> listLiteralID .)
    DIVIDIR         reduce using rule 76 (literal -> listLiteralID .)
    RESTO           reduce using rule 76 (literal -> listLiteralID .)
    SOMA            reduce using rule 76 (literal -> listLiteralID .)
    SUBTRAIR        reduce using rule 76 (literal -> listLiteralID .)
    MENOR           reduce using rule 76 (literal -> listLiteralID .)
    MAIOR           reduce using rule 76 (literal -> listLiteralID .)
    MENORI          reduce using rule 76 (literal -> listLiteralID .)
    MAIORI          reduce using rule 76 (literal -> listLiteralID .)
    IGUAL           reduce using rule 76 (literal -> listLiteralID .)
    NEG             reduce using rule 76 (literal -> listLiteralID .)
    AND             reduce using rule 76 (literal -> listLiteralID .)
    OR              reduce using rule 76 (literal -> listLiteralID .)
    PCOMMA          reduce using rule 76 (literal -> listLiteralID .)
    COMMA           reduce using rule 76 (literal -> listLiteralID .)
    RPAREN          reduce using rule 76 (literal -> listLiteralID .)
    ATRIBUIR        reduce using rule 76 (literal -> listLiteralID .)
    RCON            reduce using rule 76 (literal -> listLiteralID .)
    PONTOS          reduce using rule 76 (literal -> listLiteralID .)


state 28

    (77) literal -> NUMBER .

    SOMASOMA        reduce using rule 77 (literal -> NUMBER .)
    SUBSUB          reduce using rule 77 (literal -> NUMBER .)
    VEZES           reduce using rule 77 (literal -> NUMBER .)
    DIVIDIR         reduce using rule 77 (literal -> NUMBER .)
    RESTO           reduce using rule 77 (literal -> NUMBER .)
    SOMA            reduce using rule 77 (literal -> NUMBER .)
    SUBTRAIR        reduce using rule 77 (literal -> NUMBER .)
    MENOR           reduce using rule 77 (literal -> NUMBER .)
    MAIOR           reduce using rule 77 (literal -> NUMBER .)
    MENORI          reduce using rule 77 (literal -> NUMBER .)
    MAIORI          reduce using rule 77 (literal -> NUMBER .)
    IGUAL           reduce using rule 77 (literal -> NUMBER .)
    NEG             reduce using rule 77 (literal -> NUMBER .)
    AND             reduce using rule 77 (literal -> NUMBER .)
    OR              reduce using rule 77 (literal -> NUMBER .)
    PCOMMA          reduce using rule 77 (literal -> NUMBER .)
    COMMA           reduce using rule 77 (literal -> NUMBER .)
    RPAREN          reduce using rule 77 (literal -> NUMBER .)
    ATRIBUIR        reduce using rule 77 (literal -> NUMBER .)
    RCON            reduce using rule 77 (literal -> NUMBER .)
    PONTOS          reduce using rule 77 (literal -> NUMBER .)


state 29

    (78) literal -> LITERAL_STRING .

    SOMASOMA        reduce using rule 78 (literal -> LITERAL_STRING .)
    SUBSUB          reduce using rule 78 (literal -> LITERAL_STRING .)
    VEZES           reduce using rule 78 (literal -> LITERAL_STRING .)
    DIVIDIR         reduce using rule 78 (literal -> LITERAL_STRING .)
    RESTO           reduce using rule 78 (literal -> LITERAL_STRING .)
    SOMA            reduce using rule 78 (literal -> LITERAL_STRING .)
    SUBTRAIR        reduce using rule 78 (literal -> LITERAL_STRING .)
    MENOR           reduce using rule 78 (literal -> LITERAL_STRING .)
    MAIOR           reduce using rule 78 (literal -> LITERAL_STRING .)
    MENORI          reduce using rule 78 (literal -> LITERAL_STRING .)
    MAIORI          reduce using rule 78 (literal -> LITERAL_STRING .)
    IGUAL           reduce using rule 78 (literal -> LITERAL_STRING .)
    NEG             reduce using rule 78 (literal -> LITERAL_STRING .)
    AND             reduce using rule 78 (literal -> LITERAL_STRING .)
    OR              reduce using rule 78 (literal -> LITERAL_STRING .)
    PCOMMA          reduce using rule 78 (literal -> LITERAL_STRING .)
    COMMA           reduce using rule 78 (literal -> LITERAL_STRING .)
    RPAREN          reduce using rule 78 (literal -> LITERAL_STRING .)
    ATRIBUIR        reduce using rule 78 (literal -> LITERAL_STRING .)
    RCON            reduce using rule 78 (literal -> LITERAL_STRING .)
    PONTOS          reduce using rule 78 (literal -> LITERAL_STRING .)


state 30

    (81) booleanLiteral -> TRUE .

    SOMASOMA        reduce using rule 81 (booleanLiteral -> TRUE .)
    SUBSUB          reduce using rule 81 (booleanLiteral -> TRUE .)
    VEZES           reduce using rule 81 (booleanLiteral -> TRUE .)
    DIVIDIR         reduce using rule 81 (booleanLiteral -> TRUE .)
    RESTO           reduce using rule 81 (booleanLiteral -> TRUE .)
    SOMA            reduce using rule 81 (booleanLiteral -> TRUE .)
    SUBTRAIR        reduce using rule 81 (booleanLiteral -> TRUE .)
    MENOR           reduce using rule 81 (booleanLiteral -> TRUE .)
    MAIOR           reduce using rule 81 (booleanLiteral -> TRUE .)
    MENORI          reduce using rule 81 (booleanLiteral -> TRUE .)
    MAIORI          reduce using rule 81 (booleanLiteral -> TRUE .)
    IGUAL           reduce using rule 81 (booleanLiteral -> TRUE .)
    NEG             reduce using rule 81 (booleanLiteral -> TRUE .)
    AND             reduce using rule 81 (booleanLiteral -> TRUE .)
    OR              reduce using rule 81 (booleanLiteral -> TRUE .)
    PCOMMA          reduce using rule 81 (booleanLiteral -> TRUE .)
    COMMA           reduce using rule 81 (booleanLiteral -> TRUE .)
    RPAREN          reduce using rule 81 (booleanLiteral -> TRUE .)
    ATRIBUIR        reduce using rule 81 (booleanLiteral -> TRUE .)
    RCON            reduce using rule 81 (booleanLiteral -> TRUE .)
    PONTOS          reduce using rule 81 (booleanLiteral -> TRUE .)


state 31

    (82) booleanLiteral -> FALSE .

    SOMASOMA        reduce using rule 82 (booleanLiteral -> FALSE .)
    SUBSUB          reduce using rule 82 (booleanLiteral -> FALSE .)
    VEZES           reduce using rule 82 (booleanLiteral -> FALSE .)
    DIVIDIR         reduce using rule 82 (booleanLiteral -> FALSE .)
    RESTO           reduce using rule 82 (booleanLiteral -> FALSE .)
    SOMA            reduce using rule 82 (booleanLiteral -> FALSE .)
    SUBTRAIR        reduce using rule 82 (booleanLiteral -> FALSE .)
    MENOR           reduce using rule 82 (booleanLiteral -> FALSE .)
    MAIOR           reduce using rule 82 (booleanLiteral -> FALSE .)
    MENORI          reduce using rule 82 (booleanLiteral -> FALSE .)
    MAIORI          reduce using rule 82 (booleanLiteral -> FALSE .)
    IGUAL           reduce using rule 82 (booleanLiteral -> FALSE .)
    NEG             reduce using rule 82 (booleanLiteral -> FALSE .)
    AND             reduce using rule 82 (booleanLiteral -> FALSE .)
    OR              reduce using rule 82 (booleanLiteral -> FALSE .)
    PCOMMA          reduce using rule 82 (booleanLiteral -> FALSE .)
    COMMA           reduce using rule 82 (booleanLiteral -> FALSE .)
    RPAREN          reduce using rule 82 (booleanLiteral -> FALSE .)
    ATRIBUIR        reduce using rule 82 (booleanLiteral -> FALSE .)
    RCON            reduce using rule 82 (booleanLiteral -> FALSE .)
    PONTOS          reduce using rule 82 (booleanLiteral -> FALSE .)


state 32

    (1) topLevel -> variableDeclaration PCOMMA .
    (2) topLevel -> variableDeclaration PCOMMA . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (9) voidOrType -> . type
    (47) expression -> . orExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral

    $end            reduce using rule 1 (topLevel -> variableDeclaration PCOMMA .)
    ID              shift and go to state 5
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31

    variableDeclaration            shift and go to state 2
    topLevel                       shift and go to state 61
    functionSignature              shift and go to state 3
    declaredIdentifier             shift and go to state 4
    voidOrType                     shift and go to state 6
    expression                     shift and go to state 7
    type                           shift and go to state 8
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27

state 33

    (6) variableDeclaration -> variableDeclaration COMMA . ID

    ID              shift and go to state 62


state 34

    (3) topLevel -> functionSignature functionBody .
    (4) topLevel -> functionSignature functionBody . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (9) voidOrType -> . type
    (47) expression -> . orExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral

    $end            reduce using rule 3 (topLevel -> functionSignature functionBody .)
    ID              shift and go to state 5
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31

    functionSignature              shift and go to state 3
    topLevel                       shift and go to state 63
    variableDeclaration            shift and go to state 2
    declaredIdentifier             shift and go to state 4
    voidOrType                     shift and go to state 6
    expression                     shift and go to state 7
    type                           shift and go to state 8
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27

state 35

    (24) functionBody -> block .

    ID              reduce using rule 24 (functionBody -> block .)
    VAR             reduce using rule 24 (functionBody -> block .)
    INT             reduce using rule 24 (functionBody -> block .)
    FLOAT           reduce using rule 24 (functionBody -> block .)
    CHAR            reduce using rule 24 (functionBody -> block .)
    STRING          reduce using rule 24 (functionBody -> block .)
    VOID            reduce using rule 24 (functionBody -> block .)
    LPAREN          reduce using rule 24 (functionBody -> block .)
    NUMBER          reduce using rule 24 (functionBody -> block .)
    LITERAL_STRING  reduce using rule 24 (functionBody -> block .)
    TRUE            reduce using rule 24 (functionBody -> block .)
    FALSE           reduce using rule 24 (functionBody -> block .)
    $end            reduce using rule 24 (functionBody -> block .)


state 36

    (25) block -> LCHAV . statements RCHAV
    (26) block -> LCHAV . RCHAV
    (27) statements -> . statement statements
    (28) statements -> . statement
    (29) statement -> . nonLabelledStatement
    (30) nonLabelledStatement -> . block
    (31) nonLabelledStatement -> . expressionStatement
    (32) nonLabelledStatement -> . localVariableDeclaration
    (33) nonLabelledStatement -> . returnStatement
    (34) nonLabelledStatement -> . ifStatement
    (35) nonLabelledStatement -> . forStatement
    (36) nonLabelledStatement -> . whileStatement
    (37) nonLabelledStatement -> . doStatement
    (38) nonLabelledStatement -> . switchStatement
    (39) nonLabelledStatement -> . breakStatement
    (25) block -> . LCHAV statements RCHAV
    (26) block -> . LCHAV RCHAV
    (45) expressionStatement -> . PCOMMA
    (46) expressionStatement -> . expression PCOMMA
    (40) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (86) returnStatement -> . RETURN PCOMMA
    (87) returnStatement -> . RETURN expression PCOMMA
    (88) ifStatement -> . IF LPAREN expression RPAREN statement
    (89) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (90) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (98) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (99) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (47) expression -> . orExpression
    (41) initializedVariableDeclaration -> . declaredIdentifier
    (42) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (44) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList

    RCHAV           shift and go to state 65
    LCHAV           shift and go to state 36
    PCOMMA          shift and go to state 78
    RETURN          shift and go to state 81
    IF              shift and go to state 82
    FOR             shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    SWITCH          shift and go to state 86
    BREAK           shift and go to state 87
    ID              shift and go to state 88
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25

    statements                     shift and go to state 64
    statement                      shift and go to state 66
    nonLabelledStatement           shift and go to state 67
    block                          shift and go to state 68
    expressionStatement            shift and go to state 69
    localVariableDeclaration       shift and go to state 70
    returnStatement                shift and go to state 71
    ifStatement                    shift and go to state 72
    forStatement                   shift and go to state 73
    whileStatement                 shift and go to state 74
    doStatement                    shift and go to state 75
    switchStatement                shift and go to state 76
    breakStatement                 shift and go to state 77
    expression                     shift and go to state 79
    initializedVariableDeclaration shift and go to state 80
    orExpression                   shift and go to state 9
    declaredIdentifier             shift and go to state 89
    literal                        shift and go to state 90
    andExpression                  shift and go to state 16
    voidOrType                     shift and go to state 91
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    equalityExpression             shift and go to state 17
    type                           shift and go to state 8
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58

state 37

    (16) functionSignature -> ID formalParameterList .

    LCHAV           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    SOMASOMA        reduce using rule 16 (functionSignature -> ID formalParameterList .)
    SUBSUB          reduce using rule 16 (functionSignature -> ID formalParameterList .)
    VEZES           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    DIVIDIR         reduce using rule 16 (functionSignature -> ID formalParameterList .)
    RESTO           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    SOMA            reduce using rule 16 (functionSignature -> ID formalParameterList .)
    SUBTRAIR        reduce using rule 16 (functionSignature -> ID formalParameterList .)
    MENOR           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    MAIOR           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    MENORI          reduce using rule 16 (functionSignature -> ID formalParameterList .)
    MAIORI          reduce using rule 16 (functionSignature -> ID formalParameterList .)
    IGUAL           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    NEG             reduce using rule 16 (functionSignature -> ID formalParameterList .)
    AND             reduce using rule 16 (functionSignature -> ID formalParameterList .)
    OR              reduce using rule 16 (functionSignature -> ID formalParameterList .)
    PCOMMA          reduce using rule 16 (functionSignature -> ID formalParameterList .)
    COMMA           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    RPAREN          reduce using rule 16 (functionSignature -> ID formalParameterList .)
    ATRIBUIR        reduce using rule 16 (functionSignature -> ID formalParameterList .)
    RCON            reduce using rule 16 (functionSignature -> ID formalParameterList .)
    PONTOS          reduce using rule 16 (functionSignature -> ID formalParameterList .)


state 38

    (80) listLiteralID -> ID listLiteral .

    SOMASOMA        reduce using rule 80 (listLiteralID -> ID listLiteral .)
    SUBSUB          reduce using rule 80 (listLiteralID -> ID listLiteral .)
    VEZES           reduce using rule 80 (listLiteralID -> ID listLiteral .)
    DIVIDIR         reduce using rule 80 (listLiteralID -> ID listLiteral .)
    RESTO           reduce using rule 80 (listLiteralID -> ID listLiteral .)
    SOMA            reduce using rule 80 (listLiteralID -> ID listLiteral .)
    SUBTRAIR        reduce using rule 80 (listLiteralID -> ID listLiteral .)
    MENOR           reduce using rule 80 (listLiteralID -> ID listLiteral .)
    MAIOR           reduce using rule 80 (listLiteralID -> ID listLiteral .)
    MENORI          reduce using rule 80 (listLiteralID -> ID listLiteral .)
    MAIORI          reduce using rule 80 (listLiteralID -> ID listLiteral .)
    IGUAL           reduce using rule 80 (listLiteralID -> ID listLiteral .)
    NEG             reduce using rule 80 (listLiteralID -> ID listLiteral .)
    AND             reduce using rule 80 (listLiteralID -> ID listLiteral .)
    OR              reduce using rule 80 (listLiteralID -> ID listLiteral .)
    PCOMMA          reduce using rule 80 (listLiteralID -> ID listLiteral .)
    COMMA           reduce using rule 80 (listLiteralID -> ID listLiteral .)
    RPAREN          reduce using rule 80 (listLiteralID -> ID listLiteral .)
    ATRIBUIR        reduce using rule 80 (listLiteralID -> ID listLiteral .)
    RCON            reduce using rule 80 (listLiteralID -> ID listLiteral .)
    PONTOS          reduce using rule 80 (listLiteralID -> ID listLiteral .)


state 39

    (18) formalParameterList -> LPAREN . RPAREN
    (19) formalParameterList -> LPAREN . normalFormalParameters RPAREN
    (20) normalFormalParameters -> . simpleFormalParameter
    (21) normalFormalParameters -> . simpleFormalParameter COMMA normalFormalParameters
    (22) simpleFormalParameter -> . voidOrType ID
    (23) simpleFormalParameter -> . expression
    (9) voidOrType -> . type
    (47) expression -> . orExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral

    RPAREN          shift and go to state 92
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31

    normalFormalParameters         shift and go to state 93
    simpleFormalParameter          shift and go to state 94
    voidOrType                     shift and go to state 95
    expression                     shift and go to state 96
    type                           shift and go to state 8
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27

state 40

    (79) listLiteral -> LCON . expressionList RCON
    (83) expressionList -> . expression COMMA
    (84) expressionList -> . expression
    (85) expressionList -> . expression COMMA expressionList
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expressionList                 shift and go to state 97
    expression                     shift and go to state 98
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 41

    (17) functionSignature -> voidOrType ID . formalParameterList
    (7) declaredIdentifier -> voidOrType ID .
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    PCOMMA          reduce using rule 7 (declaredIdentifier -> voidOrType ID .)
    COMMA           reduce using rule 7 (declaredIdentifier -> voidOrType ID .)
    LPAREN          shift and go to state 39

    formalParameterList            shift and go to state 99

state 42

    (49) orExpression -> orExpression OR . andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    andExpression                  shift and go to state 100
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 43

    (51) andExpression -> andExpression AND . equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    equalityExpression             shift and go to state 101
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 44

    (53) equalityExpression -> equalityExpression IGUAL . relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    relacionalExpression           shift and go to state 102
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 45

    (54) equalityExpression -> equalityExpression NEG . relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    relacionalExpression           shift and go to state 103
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 46

    (56) relacionalExpression -> relacionalExpression MENOR . addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    addExpression                  shift and go to state 104
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 47

    (57) relacionalExpression -> relacionalExpression MAIOR . addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    addExpression                  shift and go to state 105
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 48

    (58) relacionalExpression -> relacionalExpression MENORI . addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    addExpression                  shift and go to state 106
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 49

    (59) relacionalExpression -> relacionalExpression MAIORI . addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    addExpression                  shift and go to state 107
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 50

    (61) addExpression -> addExpression SOMA . multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    multExpression                 shift and go to state 108
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 51

    (62) addExpression -> addExpression SUBTRAIR . multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    multExpression                 shift and go to state 109
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 52

    (64) multExpression -> multExpression VEZES . unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    unaryExpression                shift and go to state 110
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 53

    (65) multExpression -> multExpression DIVIDIR . unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    unaryExpression                shift and go to state 111
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 54

    (66) multExpression -> multExpression RESTO . unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    unaryExpression                shift and go to state 112
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 55

    (69) unaryExpression -> unaryExpression SOMASOMA .

    SOMASOMA        reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    SUBSUB          reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    VEZES           reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    DIVIDIR         reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    RESTO           reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    SOMA            reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    SUBTRAIR        reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    MENOR           reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    MAIOR           reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    MENORI          reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    MAIORI          reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    IGUAL           reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    NEG             reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    AND             reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    OR              reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    PCOMMA          reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    COMMA           reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    RPAREN          reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    ATRIBUIR        reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    RCON            reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)
    PONTOS          reduce using rule 69 (unaryExpression -> unaryExpression SOMASOMA .)


state 56

    (70) unaryExpression -> unaryExpression SUBSUB .

    SOMASOMA        reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    SUBSUB          reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    VEZES           reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    DIVIDIR         reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    RESTO           reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    SOMA            reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    SUBTRAIR        reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    MENOR           reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    MAIOR           reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    MENORI          reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    MAIORI          reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    IGUAL           reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    NEG             reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    AND             reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    OR              reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    PCOMMA          reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    COMMA           reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    RPAREN          reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    ATRIBUIR        reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    RCON            reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)
    PONTOS          reduce using rule 70 (unaryExpression -> unaryExpression SUBSUB .)


state 57

    (73) primary -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 113


state 58

    (71) functionCall -> functionSignature .

    SOMASOMA        reduce using rule 71 (functionCall -> functionSignature .)
    SUBSUB          reduce using rule 71 (functionCall -> functionSignature .)
    VEZES           reduce using rule 71 (functionCall -> functionSignature .)
    DIVIDIR         reduce using rule 71 (functionCall -> functionSignature .)
    RESTO           reduce using rule 71 (functionCall -> functionSignature .)
    SOMA            reduce using rule 71 (functionCall -> functionSignature .)
    SUBTRAIR        reduce using rule 71 (functionCall -> functionSignature .)
    MENOR           reduce using rule 71 (functionCall -> functionSignature .)
    MAIOR           reduce using rule 71 (functionCall -> functionSignature .)
    MENORI          reduce using rule 71 (functionCall -> functionSignature .)
    MAIORI          reduce using rule 71 (functionCall -> functionSignature .)
    IGUAL           reduce using rule 71 (functionCall -> functionSignature .)
    NEG             reduce using rule 71 (functionCall -> functionSignature .)
    AND             reduce using rule 71 (functionCall -> functionSignature .)
    OR              reduce using rule 71 (functionCall -> functionSignature .)
    RPAREN          reduce using rule 71 (functionCall -> functionSignature .)
    PCOMMA          reduce using rule 71 (functionCall -> functionSignature .)
    ATRIBUIR        reduce using rule 71 (functionCall -> functionSignature .)
    COMMA           reduce using rule 71 (functionCall -> functionSignature .)
    RCON            reduce using rule 71 (functionCall -> functionSignature .)
    PONTOS          reduce using rule 71 (functionCall -> functionSignature .)


state 59

    (74) literal -> ID .
    (16) functionSignature -> ID . formalParameterList
    (80) listLiteralID -> ID . listLiteral
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN
    (79) listLiteral -> . LCON expressionList RCON

    SOMASOMA        reduce using rule 74 (literal -> ID .)
    SUBSUB          reduce using rule 74 (literal -> ID .)
    VEZES           reduce using rule 74 (literal -> ID .)
    DIVIDIR         reduce using rule 74 (literal -> ID .)
    RESTO           reduce using rule 74 (literal -> ID .)
    SOMA            reduce using rule 74 (literal -> ID .)
    SUBTRAIR        reduce using rule 74 (literal -> ID .)
    MENOR           reduce using rule 74 (literal -> ID .)
    MAIOR           reduce using rule 74 (literal -> ID .)
    MENORI          reduce using rule 74 (literal -> ID .)
    MAIORI          reduce using rule 74 (literal -> ID .)
    IGUAL           reduce using rule 74 (literal -> ID .)
    NEG             reduce using rule 74 (literal -> ID .)
    AND             reduce using rule 74 (literal -> ID .)
    OR              reduce using rule 74 (literal -> ID .)
    RPAREN          reduce using rule 74 (literal -> ID .)
    COMMA           reduce using rule 74 (literal -> ID .)
    RCON            reduce using rule 74 (literal -> ID .)
    PCOMMA          reduce using rule 74 (literal -> ID .)
    ATRIBUIR        reduce using rule 74 (literal -> ID .)
    PONTOS          reduce using rule 74 (literal -> ID .)
    LPAREN          shift and go to state 39
    LCON            shift and go to state 40

    formalParameterList            shift and go to state 37
    listLiteral                    shift and go to state 38

state 60

    (17) functionSignature -> voidOrType . ID formalParameterList

    ID              shift and go to state 114


state 61

    (2) topLevel -> variableDeclaration PCOMMA topLevel .

    $end            reduce using rule 2 (topLevel -> variableDeclaration PCOMMA topLevel .)


state 62

    (6) variableDeclaration -> variableDeclaration COMMA ID .

    PCOMMA          reduce using rule 6 (variableDeclaration -> variableDeclaration COMMA ID .)
    COMMA           reduce using rule 6 (variableDeclaration -> variableDeclaration COMMA ID .)


state 63

    (4) topLevel -> functionSignature functionBody topLevel .

    $end            reduce using rule 4 (topLevel -> functionSignature functionBody topLevel .)


state 64

    (25) block -> LCHAV statements . RCHAV

    RCHAV           shift and go to state 115


state 65

    (26) block -> LCHAV RCHAV .

    ID              reduce using rule 26 (block -> LCHAV RCHAV .)
    VAR             reduce using rule 26 (block -> LCHAV RCHAV .)
    INT             reduce using rule 26 (block -> LCHAV RCHAV .)
    FLOAT           reduce using rule 26 (block -> LCHAV RCHAV .)
    CHAR            reduce using rule 26 (block -> LCHAV RCHAV .)
    STRING          reduce using rule 26 (block -> LCHAV RCHAV .)
    VOID            reduce using rule 26 (block -> LCHAV RCHAV .)
    LPAREN          reduce using rule 26 (block -> LCHAV RCHAV .)
    NUMBER          reduce using rule 26 (block -> LCHAV RCHAV .)
    LITERAL_STRING  reduce using rule 26 (block -> LCHAV RCHAV .)
    TRUE            reduce using rule 26 (block -> LCHAV RCHAV .)
    FALSE           reduce using rule 26 (block -> LCHAV RCHAV .)
    $end            reduce using rule 26 (block -> LCHAV RCHAV .)
    LCHAV           reduce using rule 26 (block -> LCHAV RCHAV .)
    PCOMMA          reduce using rule 26 (block -> LCHAV RCHAV .)
    RETURN          reduce using rule 26 (block -> LCHAV RCHAV .)
    IF              reduce using rule 26 (block -> LCHAV RCHAV .)
    FOR             reduce using rule 26 (block -> LCHAV RCHAV .)
    WHILE           reduce using rule 26 (block -> LCHAV RCHAV .)
    DO              reduce using rule 26 (block -> LCHAV RCHAV .)
    SWITCH          reduce using rule 26 (block -> LCHAV RCHAV .)
    BREAK           reduce using rule 26 (block -> LCHAV RCHAV .)
    RCHAV           reduce using rule 26 (block -> LCHAV RCHAV .)
    CASE            reduce using rule 26 (block -> LCHAV RCHAV .)
    DEFAULT         reduce using rule 26 (block -> LCHAV RCHAV .)
    ELSE            reduce using rule 26 (block -> LCHAV RCHAV .)


state 66

    (27) statements -> statement . statements
    (28) statements -> statement .
    (27) statements -> . statement statements
    (28) statements -> . statement
    (29) statement -> . nonLabelledStatement
    (30) nonLabelledStatement -> . block
    (31) nonLabelledStatement -> . expressionStatement
    (32) nonLabelledStatement -> . localVariableDeclaration
    (33) nonLabelledStatement -> . returnStatement
    (34) nonLabelledStatement -> . ifStatement
    (35) nonLabelledStatement -> . forStatement
    (36) nonLabelledStatement -> . whileStatement
    (37) nonLabelledStatement -> . doStatement
    (38) nonLabelledStatement -> . switchStatement
    (39) nonLabelledStatement -> . breakStatement
    (25) block -> . LCHAV statements RCHAV
    (26) block -> . LCHAV RCHAV
    (45) expressionStatement -> . PCOMMA
    (46) expressionStatement -> . expression PCOMMA
    (40) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (86) returnStatement -> . RETURN PCOMMA
    (87) returnStatement -> . RETURN expression PCOMMA
    (88) ifStatement -> . IF LPAREN expression RPAREN statement
    (89) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (90) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (98) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (99) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (47) expression -> . orExpression
    (41) initializedVariableDeclaration -> . declaredIdentifier
    (42) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (44) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList

    RCHAV           reduce using rule 28 (statements -> statement .)
    CASE            reduce using rule 28 (statements -> statement .)
    DEFAULT         reduce using rule 28 (statements -> statement .)
    LCHAV           shift and go to state 36
    PCOMMA          shift and go to state 78
    RETURN          shift and go to state 81
    IF              shift and go to state 82
    FOR             shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    SWITCH          shift and go to state 86
    BREAK           shift and go to state 87
    ID              shift and go to state 88
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25

    statement                      shift and go to state 66
    statements                     shift and go to state 116
    nonLabelledStatement           shift and go to state 67
    block                          shift and go to state 68
    expressionStatement            shift and go to state 69
    localVariableDeclaration       shift and go to state 70
    returnStatement                shift and go to state 71
    ifStatement                    shift and go to state 72
    forStatement                   shift and go to state 73
    whileStatement                 shift and go to state 74
    doStatement                    shift and go to state 75
    switchStatement                shift and go to state 76
    breakStatement                 shift and go to state 77
    expression                     shift and go to state 79
    initializedVariableDeclaration shift and go to state 80
    orExpression                   shift and go to state 9
    declaredIdentifier             shift and go to state 89
    literal                        shift and go to state 90
    andExpression                  shift and go to state 16
    voidOrType                     shift and go to state 91
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    equalityExpression             shift and go to state 17
    type                           shift and go to state 8
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58

state 67

    (29) statement -> nonLabelledStatement .

    LCHAV           reduce using rule 29 (statement -> nonLabelledStatement .)
    PCOMMA          reduce using rule 29 (statement -> nonLabelledStatement .)
    RETURN          reduce using rule 29 (statement -> nonLabelledStatement .)
    IF              reduce using rule 29 (statement -> nonLabelledStatement .)
    FOR             reduce using rule 29 (statement -> nonLabelledStatement .)
    WHILE           reduce using rule 29 (statement -> nonLabelledStatement .)
    DO              reduce using rule 29 (statement -> nonLabelledStatement .)
    SWITCH          reduce using rule 29 (statement -> nonLabelledStatement .)
    BREAK           reduce using rule 29 (statement -> nonLabelledStatement .)
    ID              reduce using rule 29 (statement -> nonLabelledStatement .)
    NUMBER          reduce using rule 29 (statement -> nonLabelledStatement .)
    LITERAL_STRING  reduce using rule 29 (statement -> nonLabelledStatement .)
    TRUE            reduce using rule 29 (statement -> nonLabelledStatement .)
    FALSE           reduce using rule 29 (statement -> nonLabelledStatement .)
    VAR             reduce using rule 29 (statement -> nonLabelledStatement .)
    INT             reduce using rule 29 (statement -> nonLabelledStatement .)
    FLOAT           reduce using rule 29 (statement -> nonLabelledStatement .)
    CHAR            reduce using rule 29 (statement -> nonLabelledStatement .)
    STRING          reduce using rule 29 (statement -> nonLabelledStatement .)
    VOID            reduce using rule 29 (statement -> nonLabelledStatement .)
    LPAREN          reduce using rule 29 (statement -> nonLabelledStatement .)
    RCHAV           reduce using rule 29 (statement -> nonLabelledStatement .)
    CASE            reduce using rule 29 (statement -> nonLabelledStatement .)
    DEFAULT         reduce using rule 29 (statement -> nonLabelledStatement .)
    ELSE            reduce using rule 29 (statement -> nonLabelledStatement .)


state 68

    (30) nonLabelledStatement -> block .

    LCHAV           reduce using rule 30 (nonLabelledStatement -> block .)
    PCOMMA          reduce using rule 30 (nonLabelledStatement -> block .)
    RETURN          reduce using rule 30 (nonLabelledStatement -> block .)
    IF              reduce using rule 30 (nonLabelledStatement -> block .)
    FOR             reduce using rule 30 (nonLabelledStatement -> block .)
    WHILE           reduce using rule 30 (nonLabelledStatement -> block .)
    DO              reduce using rule 30 (nonLabelledStatement -> block .)
    SWITCH          reduce using rule 30 (nonLabelledStatement -> block .)
    BREAK           reduce using rule 30 (nonLabelledStatement -> block .)
    ID              reduce using rule 30 (nonLabelledStatement -> block .)
    NUMBER          reduce using rule 30 (nonLabelledStatement -> block .)
    LITERAL_STRING  reduce using rule 30 (nonLabelledStatement -> block .)
    TRUE            reduce using rule 30 (nonLabelledStatement -> block .)
    FALSE           reduce using rule 30 (nonLabelledStatement -> block .)
    VAR             reduce using rule 30 (nonLabelledStatement -> block .)
    INT             reduce using rule 30 (nonLabelledStatement -> block .)
    FLOAT           reduce using rule 30 (nonLabelledStatement -> block .)
    CHAR            reduce using rule 30 (nonLabelledStatement -> block .)
    STRING          reduce using rule 30 (nonLabelledStatement -> block .)
    VOID            reduce using rule 30 (nonLabelledStatement -> block .)
    LPAREN          reduce using rule 30 (nonLabelledStatement -> block .)
    RCHAV           reduce using rule 30 (nonLabelledStatement -> block .)
    CASE            reduce using rule 30 (nonLabelledStatement -> block .)
    DEFAULT         reduce using rule 30 (nonLabelledStatement -> block .)
    ELSE            reduce using rule 30 (nonLabelledStatement -> block .)


state 69

    (31) nonLabelledStatement -> expressionStatement .

    LCHAV           reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    PCOMMA          reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    RETURN          reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    IF              reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    FOR             reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    WHILE           reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    DO              reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    SWITCH          reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    BREAK           reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    ID              reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    NUMBER          reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    LITERAL_STRING  reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    TRUE            reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    FALSE           reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    VAR             reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    INT             reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    FLOAT           reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    CHAR            reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    STRING          reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    VOID            reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    LPAREN          reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    RCHAV           reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    CASE            reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    DEFAULT         reduce using rule 31 (nonLabelledStatement -> expressionStatement .)
    ELSE            reduce using rule 31 (nonLabelledStatement -> expressionStatement .)


state 70

    (32) nonLabelledStatement -> localVariableDeclaration .

    LCHAV           reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    PCOMMA          reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    RETURN          reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    IF              reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    FOR             reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    WHILE           reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    DO              reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    SWITCH          reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    BREAK           reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    ID              reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    NUMBER          reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    LITERAL_STRING  reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    TRUE            reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    FALSE           reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    VAR             reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    INT             reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    FLOAT           reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    CHAR            reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    STRING          reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    VOID            reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    LPAREN          reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    RCHAV           reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    CASE            reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    DEFAULT         reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)
    ELSE            reduce using rule 32 (nonLabelledStatement -> localVariableDeclaration .)


state 71

    (33) nonLabelledStatement -> returnStatement .

    LCHAV           reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    PCOMMA          reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    RETURN          reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    IF              reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    FOR             reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    WHILE           reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    DO              reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    SWITCH          reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    BREAK           reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    ID              reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    NUMBER          reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    LITERAL_STRING  reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    TRUE            reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    FALSE           reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    VAR             reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    INT             reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    FLOAT           reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    CHAR            reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    STRING          reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    VOID            reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    LPAREN          reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    RCHAV           reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    CASE            reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    DEFAULT         reduce using rule 33 (nonLabelledStatement -> returnStatement .)
    ELSE            reduce using rule 33 (nonLabelledStatement -> returnStatement .)


state 72

    (34) nonLabelledStatement -> ifStatement .

    LCHAV           reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    PCOMMA          reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    RETURN          reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    IF              reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    FOR             reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    WHILE           reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    DO              reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    SWITCH          reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    BREAK           reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    ID              reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    NUMBER          reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    LITERAL_STRING  reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    TRUE            reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    FALSE           reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    VAR             reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    INT             reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    FLOAT           reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    CHAR            reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    STRING          reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    VOID            reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    LPAREN          reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    RCHAV           reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    CASE            reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    DEFAULT         reduce using rule 34 (nonLabelledStatement -> ifStatement .)
    ELSE            reduce using rule 34 (nonLabelledStatement -> ifStatement .)


state 73

    (35) nonLabelledStatement -> forStatement .

    LCHAV           reduce using rule 35 (nonLabelledStatement -> forStatement .)
    PCOMMA          reduce using rule 35 (nonLabelledStatement -> forStatement .)
    RETURN          reduce using rule 35 (nonLabelledStatement -> forStatement .)
    IF              reduce using rule 35 (nonLabelledStatement -> forStatement .)
    FOR             reduce using rule 35 (nonLabelledStatement -> forStatement .)
    WHILE           reduce using rule 35 (nonLabelledStatement -> forStatement .)
    DO              reduce using rule 35 (nonLabelledStatement -> forStatement .)
    SWITCH          reduce using rule 35 (nonLabelledStatement -> forStatement .)
    BREAK           reduce using rule 35 (nonLabelledStatement -> forStatement .)
    ID              reduce using rule 35 (nonLabelledStatement -> forStatement .)
    NUMBER          reduce using rule 35 (nonLabelledStatement -> forStatement .)
    LITERAL_STRING  reduce using rule 35 (nonLabelledStatement -> forStatement .)
    TRUE            reduce using rule 35 (nonLabelledStatement -> forStatement .)
    FALSE           reduce using rule 35 (nonLabelledStatement -> forStatement .)
    VAR             reduce using rule 35 (nonLabelledStatement -> forStatement .)
    INT             reduce using rule 35 (nonLabelledStatement -> forStatement .)
    FLOAT           reduce using rule 35 (nonLabelledStatement -> forStatement .)
    CHAR            reduce using rule 35 (nonLabelledStatement -> forStatement .)
    STRING          reduce using rule 35 (nonLabelledStatement -> forStatement .)
    VOID            reduce using rule 35 (nonLabelledStatement -> forStatement .)
    LPAREN          reduce using rule 35 (nonLabelledStatement -> forStatement .)
    RCHAV           reduce using rule 35 (nonLabelledStatement -> forStatement .)
    CASE            reduce using rule 35 (nonLabelledStatement -> forStatement .)
    DEFAULT         reduce using rule 35 (nonLabelledStatement -> forStatement .)
    ELSE            reduce using rule 35 (nonLabelledStatement -> forStatement .)


state 74

    (36) nonLabelledStatement -> whileStatement .

    LCHAV           reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    PCOMMA          reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    RETURN          reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    IF              reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    FOR             reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    WHILE           reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    DO              reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    SWITCH          reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    BREAK           reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    ID              reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    NUMBER          reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    LITERAL_STRING  reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    TRUE            reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    FALSE           reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    VAR             reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    INT             reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    FLOAT           reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    CHAR            reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    STRING          reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    VOID            reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    LPAREN          reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    RCHAV           reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    CASE            reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    DEFAULT         reduce using rule 36 (nonLabelledStatement -> whileStatement .)
    ELSE            reduce using rule 36 (nonLabelledStatement -> whileStatement .)


state 75

    (37) nonLabelledStatement -> doStatement .

    LCHAV           reduce using rule 37 (nonLabelledStatement -> doStatement .)
    PCOMMA          reduce using rule 37 (nonLabelledStatement -> doStatement .)
    RETURN          reduce using rule 37 (nonLabelledStatement -> doStatement .)
    IF              reduce using rule 37 (nonLabelledStatement -> doStatement .)
    FOR             reduce using rule 37 (nonLabelledStatement -> doStatement .)
    WHILE           reduce using rule 37 (nonLabelledStatement -> doStatement .)
    DO              reduce using rule 37 (nonLabelledStatement -> doStatement .)
    SWITCH          reduce using rule 37 (nonLabelledStatement -> doStatement .)
    BREAK           reduce using rule 37 (nonLabelledStatement -> doStatement .)
    ID              reduce using rule 37 (nonLabelledStatement -> doStatement .)
    NUMBER          reduce using rule 37 (nonLabelledStatement -> doStatement .)
    LITERAL_STRING  reduce using rule 37 (nonLabelledStatement -> doStatement .)
    TRUE            reduce using rule 37 (nonLabelledStatement -> doStatement .)
    FALSE           reduce using rule 37 (nonLabelledStatement -> doStatement .)
    VAR             reduce using rule 37 (nonLabelledStatement -> doStatement .)
    INT             reduce using rule 37 (nonLabelledStatement -> doStatement .)
    FLOAT           reduce using rule 37 (nonLabelledStatement -> doStatement .)
    CHAR            reduce using rule 37 (nonLabelledStatement -> doStatement .)
    STRING          reduce using rule 37 (nonLabelledStatement -> doStatement .)
    VOID            reduce using rule 37 (nonLabelledStatement -> doStatement .)
    LPAREN          reduce using rule 37 (nonLabelledStatement -> doStatement .)
    RCHAV           reduce using rule 37 (nonLabelledStatement -> doStatement .)
    CASE            reduce using rule 37 (nonLabelledStatement -> doStatement .)
    DEFAULT         reduce using rule 37 (nonLabelledStatement -> doStatement .)
    ELSE            reduce using rule 37 (nonLabelledStatement -> doStatement .)


state 76

    (38) nonLabelledStatement -> switchStatement .

    LCHAV           reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    PCOMMA          reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    RETURN          reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    IF              reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    FOR             reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    WHILE           reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    DO              reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    SWITCH          reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    BREAK           reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    ID              reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    NUMBER          reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    LITERAL_STRING  reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    TRUE            reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    FALSE           reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    VAR             reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    INT             reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    FLOAT           reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    CHAR            reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    STRING          reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    VOID            reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    LPAREN          reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    RCHAV           reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    CASE            reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    DEFAULT         reduce using rule 38 (nonLabelledStatement -> switchStatement .)
    ELSE            reduce using rule 38 (nonLabelledStatement -> switchStatement .)


state 77

    (39) nonLabelledStatement -> breakStatement .

    LCHAV           reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    PCOMMA          reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    RETURN          reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    IF              reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    FOR             reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    WHILE           reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    DO              reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    SWITCH          reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    BREAK           reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    ID              reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    NUMBER          reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    LITERAL_STRING  reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    TRUE            reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    FALSE           reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    VAR             reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    INT             reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    FLOAT           reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    CHAR            reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    STRING          reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    VOID            reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    LPAREN          reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    RCHAV           reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    CASE            reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    DEFAULT         reduce using rule 39 (nonLabelledStatement -> breakStatement .)
    ELSE            reduce using rule 39 (nonLabelledStatement -> breakStatement .)


state 78

    (45) expressionStatement -> PCOMMA .

    LCHAV           reduce using rule 45 (expressionStatement -> PCOMMA .)
    PCOMMA          reduce using rule 45 (expressionStatement -> PCOMMA .)
    RETURN          reduce using rule 45 (expressionStatement -> PCOMMA .)
    IF              reduce using rule 45 (expressionStatement -> PCOMMA .)
    FOR             reduce using rule 45 (expressionStatement -> PCOMMA .)
    WHILE           reduce using rule 45 (expressionStatement -> PCOMMA .)
    DO              reduce using rule 45 (expressionStatement -> PCOMMA .)
    SWITCH          reduce using rule 45 (expressionStatement -> PCOMMA .)
    BREAK           reduce using rule 45 (expressionStatement -> PCOMMA .)
    ID              reduce using rule 45 (expressionStatement -> PCOMMA .)
    NUMBER          reduce using rule 45 (expressionStatement -> PCOMMA .)
    LITERAL_STRING  reduce using rule 45 (expressionStatement -> PCOMMA .)
    TRUE            reduce using rule 45 (expressionStatement -> PCOMMA .)
    FALSE           reduce using rule 45 (expressionStatement -> PCOMMA .)
    VAR             reduce using rule 45 (expressionStatement -> PCOMMA .)
    INT             reduce using rule 45 (expressionStatement -> PCOMMA .)
    FLOAT           reduce using rule 45 (expressionStatement -> PCOMMA .)
    CHAR            reduce using rule 45 (expressionStatement -> PCOMMA .)
    STRING          reduce using rule 45 (expressionStatement -> PCOMMA .)
    VOID            reduce using rule 45 (expressionStatement -> PCOMMA .)
    LPAREN          reduce using rule 45 (expressionStatement -> PCOMMA .)
    RCHAV           reduce using rule 45 (expressionStatement -> PCOMMA .)
    CASE            reduce using rule 45 (expressionStatement -> PCOMMA .)
    DEFAULT         reduce using rule 45 (expressionStatement -> PCOMMA .)
    ELSE            reduce using rule 45 (expressionStatement -> PCOMMA .)


state 79

    (46) expressionStatement -> expression . PCOMMA
    (8) declaredIdentifier -> expression .

  ! shift/reduce conflict for PCOMMA resolved as shift
    PCOMMA          shift and go to state 117
    ATRIBUIR        reduce using rule 8 (declaredIdentifier -> expression .)

  ! PCOMMA          [ reduce using rule 8 (declaredIdentifier -> expression .) ]


state 80

    (40) localVariableDeclaration -> initializedVariableDeclaration . PCOMMA

    PCOMMA          shift and go to state 118


state 81

    (86) returnStatement -> RETURN . PCOMMA
    (87) returnStatement -> RETURN . expression PCOMMA
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    PCOMMA          shift and go to state 119
    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 120
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 82

    (88) ifStatement -> IF . LPAREN expression RPAREN statement
    (89) ifStatement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 121


state 83

    (90) forStatement -> FOR . LPAREN forLoopParts RPAREN statement

    LPAREN          shift and go to state 122


state 84

    (98) whileStatement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 123


state 85

    (99) doStatement -> DO . statement WHILE LPAREN expression RPAREN PCOMMA
    (29) statement -> . nonLabelledStatement
    (30) nonLabelledStatement -> . block
    (31) nonLabelledStatement -> . expressionStatement
    (32) nonLabelledStatement -> . localVariableDeclaration
    (33) nonLabelledStatement -> . returnStatement
    (34) nonLabelledStatement -> . ifStatement
    (35) nonLabelledStatement -> . forStatement
    (36) nonLabelledStatement -> . whileStatement
    (37) nonLabelledStatement -> . doStatement
    (38) nonLabelledStatement -> . switchStatement
    (39) nonLabelledStatement -> . breakStatement
    (25) block -> . LCHAV statements RCHAV
    (26) block -> . LCHAV RCHAV
    (45) expressionStatement -> . PCOMMA
    (46) expressionStatement -> . expression PCOMMA
    (40) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (86) returnStatement -> . RETURN PCOMMA
    (87) returnStatement -> . RETURN expression PCOMMA
    (88) ifStatement -> . IF LPAREN expression RPAREN statement
    (89) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (90) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (98) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (99) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (47) expression -> . orExpression
    (41) initializedVariableDeclaration -> . declaredIdentifier
    (42) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (44) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList

    LCHAV           shift and go to state 36
    PCOMMA          shift and go to state 78
    RETURN          shift and go to state 81
    IF              shift and go to state 82
    FOR             shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    SWITCH          shift and go to state 86
    BREAK           shift and go to state 87
    ID              shift and go to state 88
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25

    statement                      shift and go to state 124
    expression                     shift and go to state 79
    nonLabelledStatement           shift and go to state 67
    block                          shift and go to state 68
    expressionStatement            shift and go to state 69
    localVariableDeclaration       shift and go to state 70
    returnStatement                shift and go to state 71
    ifStatement                    shift and go to state 72
    forStatement                   shift and go to state 73
    whileStatement                 shift and go to state 74
    doStatement                    shift and go to state 75
    switchStatement                shift and go to state 76
    breakStatement                 shift and go to state 77
    initializedVariableDeclaration shift and go to state 80
    orExpression                   shift and go to state 9
    declaredIdentifier             shift and go to state 89
    literal                        shift and go to state 90
    andExpression                  shift and go to state 16
    voidOrType                     shift and go to state 91
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    equalityExpression             shift and go to state 17
    type                           shift and go to state 8
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58

state 86

    (100) switchStatement -> SWITCH . LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> SWITCH . LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV

    LPAREN          shift and go to state 125


state 87

    (107) breakStatement -> BREAK . PCOMMA
    (108) breakStatement -> BREAK . ID PCOMMA

    PCOMMA          shift and go to state 126
    ID              shift and go to state 127


state 88

    (74) literal -> ID .
    (80) listLiteralID -> ID . listLiteral
    (16) functionSignature -> ID . formalParameterList
    (79) listLiteral -> . LCON expressionList RCON
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    ATRIBUIR        reduce using rule 74 (literal -> ID .)
    SOMASOMA        reduce using rule 74 (literal -> ID .)
    SUBSUB          reduce using rule 74 (literal -> ID .)
    VEZES           reduce using rule 74 (literal -> ID .)
    DIVIDIR         reduce using rule 74 (literal -> ID .)
    RESTO           reduce using rule 74 (literal -> ID .)
    SOMA            reduce using rule 74 (literal -> ID .)
    SUBTRAIR        reduce using rule 74 (literal -> ID .)
    MENOR           reduce using rule 74 (literal -> ID .)
    MAIOR           reduce using rule 74 (literal -> ID .)
    MENORI          reduce using rule 74 (literal -> ID .)
    MAIORI          reduce using rule 74 (literal -> ID .)
    IGUAL           reduce using rule 74 (literal -> ID .)
    NEG             reduce using rule 74 (literal -> ID .)
    AND             reduce using rule 74 (literal -> ID .)
    OR              reduce using rule 74 (literal -> ID .)
    PCOMMA          reduce using rule 74 (literal -> ID .)
    LCON            shift and go to state 40
    LPAREN          shift and go to state 39

    listLiteral                    shift and go to state 38
    formalParameterList            shift and go to state 37

state 89

    (41) initializedVariableDeclaration -> declaredIdentifier .
    (42) initializedVariableDeclaration -> declaredIdentifier . ATRIBUIR expression
    (43) initializedVariableDeclaration -> declaredIdentifier . ATRIBUIR listLiteral

    PCOMMA          reduce using rule 41 (initializedVariableDeclaration -> declaredIdentifier .)
    ATRIBUIR        shift and go to state 128


state 90

    (44) initializedVariableDeclaration -> literal . ATRIBUIR expression
    (72) primary -> literal .

  ! shift/reduce conflict for ATRIBUIR resolved as shift
    ATRIBUIR        shift and go to state 129
    SOMASOMA        reduce using rule 72 (primary -> literal .)
    SUBSUB          reduce using rule 72 (primary -> literal .)
    VEZES           reduce using rule 72 (primary -> literal .)
    DIVIDIR         reduce using rule 72 (primary -> literal .)
    RESTO           reduce using rule 72 (primary -> literal .)
    SOMA            reduce using rule 72 (primary -> literal .)
    SUBTRAIR        reduce using rule 72 (primary -> literal .)
    MENOR           reduce using rule 72 (primary -> literal .)
    MAIOR           reduce using rule 72 (primary -> literal .)
    MENORI          reduce using rule 72 (primary -> literal .)
    MAIORI          reduce using rule 72 (primary -> literal .)
    IGUAL           reduce using rule 72 (primary -> literal .)
    NEG             reduce using rule 72 (primary -> literal .)
    AND             reduce using rule 72 (primary -> literal .)
    OR              reduce using rule 72 (primary -> literal .)
    PCOMMA          reduce using rule 72 (primary -> literal .)

  ! ATRIBUIR        [ reduce using rule 72 (primary -> literal .) ]


state 91

    (7) declaredIdentifier -> voidOrType . ID
    (17) functionSignature -> voidOrType . ID formalParameterList

    ID              shift and go to state 130


state 92

    (18) formalParameterList -> LPAREN RPAREN .

    LCHAV           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    SOMASOMA        reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    SUBSUB          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    VEZES           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    DIVIDIR         reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    RESTO           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    SOMA            reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    SUBTRAIR        reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    MENOR           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    MAIOR           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    MENORI          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    MAIORI          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    IGUAL           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    NEG             reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    AND             reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    OR              reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    PCOMMA          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    COMMA           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    RPAREN          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    RCON            reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    ATRIBUIR        reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    PONTOS          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)


state 93

    (19) formalParameterList -> LPAREN normalFormalParameters . RPAREN

    RPAREN          shift and go to state 131


state 94

    (20) normalFormalParameters -> simpleFormalParameter .
    (21) normalFormalParameters -> simpleFormalParameter . COMMA normalFormalParameters

    RPAREN          reduce using rule 20 (normalFormalParameters -> simpleFormalParameter .)
    COMMA           shift and go to state 132


state 95

    (22) simpleFormalParameter -> voidOrType . ID
    (17) functionSignature -> voidOrType . ID formalParameterList

    ID              shift and go to state 133


state 96

    (23) simpleFormalParameter -> expression .

    COMMA           reduce using rule 23 (simpleFormalParameter -> expression .)
    RPAREN          reduce using rule 23 (simpleFormalParameter -> expression .)


state 97

    (79) listLiteral -> LCON expressionList . RCON

    RCON            shift and go to state 134


state 98

    (83) expressionList -> expression . COMMA
    (84) expressionList -> expression .
    (85) expressionList -> expression . COMMA expressionList

    COMMA           shift and go to state 135
    RCON            reduce using rule 84 (expressionList -> expression .)
    RPAREN          reduce using rule 84 (expressionList -> expression .)


state 99

    (17) functionSignature -> voidOrType ID formalParameterList .

    LCHAV           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    SOMASOMA        reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    SUBSUB          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    VEZES           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    DIVIDIR         reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    RESTO           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    SOMA            reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    SUBTRAIR        reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    MENOR           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    MAIOR           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    MENORI          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    MAIORI          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    IGUAL           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    NEG             reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    AND             reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    OR              reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    PCOMMA          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    COMMA           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    RPAREN          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    ATRIBUIR        reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    RCON            reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    PONTOS          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)


state 100

    (49) orExpression -> orExpression OR andExpression .
    (51) andExpression -> andExpression . AND equalityExpression

    OR              reduce using rule 49 (orExpression -> orExpression OR andExpression .)
    PCOMMA          reduce using rule 49 (orExpression -> orExpression OR andExpression .)
    COMMA           reduce using rule 49 (orExpression -> orExpression OR andExpression .)
    RPAREN          reduce using rule 49 (orExpression -> orExpression OR andExpression .)
    ATRIBUIR        reduce using rule 49 (orExpression -> orExpression OR andExpression .)
    RCON            reduce using rule 49 (orExpression -> orExpression OR andExpression .)
    PONTOS          reduce using rule 49 (orExpression -> orExpression OR andExpression .)
    AND             shift and go to state 43


state 101

    (51) andExpression -> andExpression AND equalityExpression .
    (53) equalityExpression -> equalityExpression . IGUAL relacionalExpression
    (54) equalityExpression -> equalityExpression . NEG relacionalExpression

    AND             reduce using rule 51 (andExpression -> andExpression AND equalityExpression .)
    OR              reduce using rule 51 (andExpression -> andExpression AND equalityExpression .)
    PCOMMA          reduce using rule 51 (andExpression -> andExpression AND equalityExpression .)
    COMMA           reduce using rule 51 (andExpression -> andExpression AND equalityExpression .)
    RPAREN          reduce using rule 51 (andExpression -> andExpression AND equalityExpression .)
    ATRIBUIR        reduce using rule 51 (andExpression -> andExpression AND equalityExpression .)
    RCON            reduce using rule 51 (andExpression -> andExpression AND equalityExpression .)
    PONTOS          reduce using rule 51 (andExpression -> andExpression AND equalityExpression .)
    IGUAL           shift and go to state 44
    NEG             shift and go to state 45


state 102

    (53) equalityExpression -> equalityExpression IGUAL relacionalExpression .
    (56) relacionalExpression -> relacionalExpression . MENOR addExpression
    (57) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (58) relacionalExpression -> relacionalExpression . MENORI addExpression
    (59) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 53 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    NEG             reduce using rule 53 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    AND             reduce using rule 53 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    OR              reduce using rule 53 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    PCOMMA          reduce using rule 53 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    COMMA           reduce using rule 53 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    RPAREN          reduce using rule 53 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    ATRIBUIR        reduce using rule 53 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    RCON            reduce using rule 53 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    PONTOS          reduce using rule 53 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    MENOR           shift and go to state 46
    MAIOR           shift and go to state 47
    MENORI          shift and go to state 48
    MAIORI          shift and go to state 49


state 103

    (54) equalityExpression -> equalityExpression NEG relacionalExpression .
    (56) relacionalExpression -> relacionalExpression . MENOR addExpression
    (57) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (58) relacionalExpression -> relacionalExpression . MENORI addExpression
    (59) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 54 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    NEG             reduce using rule 54 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    AND             reduce using rule 54 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    OR              reduce using rule 54 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    PCOMMA          reduce using rule 54 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    COMMA           reduce using rule 54 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    RPAREN          reduce using rule 54 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    ATRIBUIR        reduce using rule 54 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    RCON            reduce using rule 54 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    PONTOS          reduce using rule 54 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    MENOR           shift and go to state 46
    MAIOR           shift and go to state 47
    MENORI          shift and go to state 48
    MAIORI          shift and go to state 49


state 104

    (56) relacionalExpression -> relacionalExpression MENOR addExpression .
    (61) addExpression -> addExpression . SOMA multExpression
    (62) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MAIOR           reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MENORI          reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MAIORI          reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    IGUAL           reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    NEG             reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    AND             reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    OR              reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    PCOMMA          reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    COMMA           reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    RPAREN          reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    ATRIBUIR        reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    RCON            reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    PONTOS          reduce using rule 56 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    SOMA            shift and go to state 50
    SUBTRAIR        shift and go to state 51


state 105

    (57) relacionalExpression -> relacionalExpression MAIOR addExpression .
    (61) addExpression -> addExpression . SOMA multExpression
    (62) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MAIOR           reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MENORI          reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MAIORI          reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    IGUAL           reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    NEG             reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    AND             reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    OR              reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    PCOMMA          reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    COMMA           reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    RPAREN          reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    ATRIBUIR        reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    RCON            reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    PONTOS          reduce using rule 57 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    SOMA            shift and go to state 50
    SUBTRAIR        shift and go to state 51


state 106

    (58) relacionalExpression -> relacionalExpression MENORI addExpression .
    (61) addExpression -> addExpression . SOMA multExpression
    (62) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MAIOR           reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MENORI          reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MAIORI          reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    IGUAL           reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    NEG             reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    AND             reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    OR              reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    PCOMMA          reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    COMMA           reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    RPAREN          reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    ATRIBUIR        reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    RCON            reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    PONTOS          reduce using rule 58 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    SOMA            shift and go to state 50
    SUBTRAIR        shift and go to state 51


state 107

    (59) relacionalExpression -> relacionalExpression MAIORI addExpression .
    (61) addExpression -> addExpression . SOMA multExpression
    (62) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MAIOR           reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MENORI          reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MAIORI          reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    IGUAL           reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    NEG             reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    AND             reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    OR              reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    PCOMMA          reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    COMMA           reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    RPAREN          reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    ATRIBUIR        reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    RCON            reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    PONTOS          reduce using rule 59 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    SOMA            shift and go to state 50
    SUBTRAIR        shift and go to state 51


state 108

    (61) addExpression -> addExpression SOMA multExpression .
    (64) multExpression -> multExpression . VEZES unaryExpression
    (65) multExpression -> multExpression . DIVIDIR unaryExpression
    (66) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    SUBTRAIR        reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    MENOR           reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    MAIOR           reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    MENORI          reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    MAIORI          reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    IGUAL           reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    NEG             reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    AND             reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    OR              reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    PCOMMA          reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    COMMA           reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    RPAREN          reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    ATRIBUIR        reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    RCON            reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    PONTOS          reduce using rule 61 (addExpression -> addExpression SOMA multExpression .)
    VEZES           shift and go to state 52
    DIVIDIR         shift and go to state 53
    RESTO           shift and go to state 54


state 109

    (62) addExpression -> addExpression SUBTRAIR multExpression .
    (64) multExpression -> multExpression . VEZES unaryExpression
    (65) multExpression -> multExpression . DIVIDIR unaryExpression
    (66) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    SUBTRAIR        reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    MENOR           reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    MAIOR           reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    MENORI          reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    MAIORI          reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    IGUAL           reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    NEG             reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    AND             reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    OR              reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    PCOMMA          reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    COMMA           reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    RPAREN          reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    ATRIBUIR        reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    RCON            reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    PONTOS          reduce using rule 62 (addExpression -> addExpression SUBTRAIR multExpression .)
    VEZES           shift and go to state 52
    DIVIDIR         shift and go to state 53
    RESTO           shift and go to state 54


state 110

    (64) multExpression -> multExpression VEZES unaryExpression .
    (69) unaryExpression -> unaryExpression . SOMASOMA
    (70) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    DIVIDIR         reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    RESTO           reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    SOMA            reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    SUBTRAIR        reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    MENOR           reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    MAIOR           reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    MENORI          reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    MAIORI          reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    IGUAL           reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    NEG             reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    AND             reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    OR              reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    PCOMMA          reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    COMMA           reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    RPAREN          reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    ATRIBUIR        reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    RCON            reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    PONTOS          reduce using rule 64 (multExpression -> multExpression VEZES unaryExpression .)
    SOMASOMA        shift and go to state 55
    SUBSUB          shift and go to state 56


state 111

    (65) multExpression -> multExpression DIVIDIR unaryExpression .
    (69) unaryExpression -> unaryExpression . SOMASOMA
    (70) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    DIVIDIR         reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RESTO           reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SOMA            reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SUBTRAIR        reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MENOR           reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MAIOR           reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MENORI          reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MAIORI          reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    IGUAL           reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    NEG             reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    AND             reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    OR              reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    PCOMMA          reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    COMMA           reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RPAREN          reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    ATRIBUIR        reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RCON            reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    PONTOS          reduce using rule 65 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SOMASOMA        shift and go to state 55
    SUBSUB          shift and go to state 56


state 112

    (66) multExpression -> multExpression RESTO unaryExpression .
    (69) unaryExpression -> unaryExpression . SOMASOMA
    (70) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    DIVIDIR         reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    RESTO           reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    SOMA            reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    SUBTRAIR        reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    MENOR           reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    MAIOR           reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    MENORI          reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    MAIORI          reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    IGUAL           reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    NEG             reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    AND             reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    OR              reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    PCOMMA          reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    COMMA           reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    RPAREN          reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    ATRIBUIR        reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    RCON            reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    PONTOS          reduce using rule 66 (multExpression -> multExpression RESTO unaryExpression .)
    SOMASOMA        shift and go to state 55
    SUBSUB          shift and go to state 56


state 113

    (73) primary -> LPAREN expression RPAREN .

    SOMASOMA        reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    SUBSUB          reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    VEZES           reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    DIVIDIR         reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    RESTO           reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    SOMA            reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    SUBTRAIR        reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    MENORI          reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    MAIORI          reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    IGUAL           reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    NEG             reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    AND             reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    OR              reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    PCOMMA          reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    ATRIBUIR        reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    RCON            reduce using rule 73 (primary -> LPAREN expression RPAREN .)
    PONTOS          reduce using rule 73 (primary -> LPAREN expression RPAREN .)


state 114

    (17) functionSignature -> voidOrType ID . formalParameterList
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    LPAREN          shift and go to state 39

    formalParameterList            shift and go to state 99

state 115

    (25) block -> LCHAV statements RCHAV .

    ID              reduce using rule 25 (block -> LCHAV statements RCHAV .)
    VAR             reduce using rule 25 (block -> LCHAV statements RCHAV .)
    INT             reduce using rule 25 (block -> LCHAV statements RCHAV .)
    FLOAT           reduce using rule 25 (block -> LCHAV statements RCHAV .)
    CHAR            reduce using rule 25 (block -> LCHAV statements RCHAV .)
    STRING          reduce using rule 25 (block -> LCHAV statements RCHAV .)
    VOID            reduce using rule 25 (block -> LCHAV statements RCHAV .)
    LPAREN          reduce using rule 25 (block -> LCHAV statements RCHAV .)
    NUMBER          reduce using rule 25 (block -> LCHAV statements RCHAV .)
    LITERAL_STRING  reduce using rule 25 (block -> LCHAV statements RCHAV .)
    TRUE            reduce using rule 25 (block -> LCHAV statements RCHAV .)
    FALSE           reduce using rule 25 (block -> LCHAV statements RCHAV .)
    $end            reduce using rule 25 (block -> LCHAV statements RCHAV .)
    LCHAV           reduce using rule 25 (block -> LCHAV statements RCHAV .)
    PCOMMA          reduce using rule 25 (block -> LCHAV statements RCHAV .)
    RETURN          reduce using rule 25 (block -> LCHAV statements RCHAV .)
    IF              reduce using rule 25 (block -> LCHAV statements RCHAV .)
    FOR             reduce using rule 25 (block -> LCHAV statements RCHAV .)
    WHILE           reduce using rule 25 (block -> LCHAV statements RCHAV .)
    DO              reduce using rule 25 (block -> LCHAV statements RCHAV .)
    SWITCH          reduce using rule 25 (block -> LCHAV statements RCHAV .)
    BREAK           reduce using rule 25 (block -> LCHAV statements RCHAV .)
    RCHAV           reduce using rule 25 (block -> LCHAV statements RCHAV .)
    CASE            reduce using rule 25 (block -> LCHAV statements RCHAV .)
    DEFAULT         reduce using rule 25 (block -> LCHAV statements RCHAV .)
    ELSE            reduce using rule 25 (block -> LCHAV statements RCHAV .)


state 116

    (27) statements -> statement statements .

    RCHAV           reduce using rule 27 (statements -> statement statements .)
    CASE            reduce using rule 27 (statements -> statement statements .)
    DEFAULT         reduce using rule 27 (statements -> statement statements .)


state 117

    (46) expressionStatement -> expression PCOMMA .

    LCHAV           reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    PCOMMA          reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    RETURN          reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    IF              reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    FOR             reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    WHILE           reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    DO              reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    SWITCH          reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    BREAK           reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    ID              reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    NUMBER          reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    LITERAL_STRING  reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    TRUE            reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    FALSE           reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    VAR             reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    INT             reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    FLOAT           reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    CHAR            reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    STRING          reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    VOID            reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    LPAREN          reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    RCHAV           reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    CASE            reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    DEFAULT         reduce using rule 46 (expressionStatement -> expression PCOMMA .)
    ELSE            reduce using rule 46 (expressionStatement -> expression PCOMMA .)


state 118

    (40) localVariableDeclaration -> initializedVariableDeclaration PCOMMA .

    LCHAV           reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    PCOMMA          reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    RETURN          reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    IF              reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FOR             reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    WHILE           reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    DO              reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    SWITCH          reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    BREAK           reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    ID              reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    NUMBER          reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LITERAL_STRING  reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    TRUE            reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FALSE           reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    VAR             reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    INT             reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FLOAT           reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    CHAR            reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    STRING          reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    VOID            reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LPAREN          reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    RCHAV           reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    CASE            reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    DEFAULT         reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    ELSE            reduce using rule 40 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)


state 119

    (86) returnStatement -> RETURN PCOMMA .

    LCHAV           reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    PCOMMA          reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    RETURN          reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    IF              reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    FOR             reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    WHILE           reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    DO              reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    SWITCH          reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    BREAK           reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    ID              reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    NUMBER          reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    LITERAL_STRING  reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    TRUE            reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    FALSE           reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    VAR             reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    INT             reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    FLOAT           reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    CHAR            reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    STRING          reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    VOID            reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    LPAREN          reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    RCHAV           reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    CASE            reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    DEFAULT         reduce using rule 86 (returnStatement -> RETURN PCOMMA .)
    ELSE            reduce using rule 86 (returnStatement -> RETURN PCOMMA .)


state 120

    (87) returnStatement -> RETURN expression . PCOMMA

    PCOMMA          shift and go to state 136


state 121

    (88) ifStatement -> IF LPAREN . expression RPAREN statement
    (89) ifStatement -> IF LPAREN . expression RPAREN statement ELSE statement
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 137
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 122

    (90) forStatement -> FOR LPAREN . forLoopParts RPAREN statement
    (91) forLoopParts -> . forInitializerStatement PCOMMA
    (92) forLoopParts -> . forInitializerStatement PCOMMA expressionList
    (93) forLoopParts -> . forInitializerStatement expression PCOMMA
    (94) forLoopParts -> . forInitializerStatement expression PCOMMA expressionList
    (95) forInitializerStatement -> . localVariableDeclaration
    (96) forInitializerStatement -> . PCOMMA
    (97) forInitializerStatement -> . expression PCOMMA
    (40) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (47) expression -> . orExpression
    (41) initializedVariableDeclaration -> . declaredIdentifier
    (42) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (44) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList

    PCOMMA          shift and go to state 140
    ID              shift and go to state 88
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25

    forLoopParts                   shift and go to state 138
    forInitializerStatement        shift and go to state 139
    expression                     shift and go to state 141
    localVariableDeclaration       shift and go to state 142
    initializedVariableDeclaration shift and go to state 80
    orExpression                   shift and go to state 9
    declaredIdentifier             shift and go to state 89
    literal                        shift and go to state 90
    andExpression                  shift and go to state 16
    voidOrType                     shift and go to state 91
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    equalityExpression             shift and go to state 17
    type                           shift and go to state 8
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58

state 123

    (98) whileStatement -> WHILE LPAREN . expression RPAREN statement
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 143
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 124

    (99) doStatement -> DO statement . WHILE LPAREN expression RPAREN PCOMMA

    WHILE           shift and go to state 144


state 125

    (100) switchStatement -> SWITCH LPAREN . expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> SWITCH LPAREN . expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 145
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 126

    (107) breakStatement -> BREAK PCOMMA .

    LCHAV           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    PCOMMA          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    RETURN          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    IF              reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    FOR             reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    WHILE           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    DO              reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    SWITCH          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    BREAK           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    ID              reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    NUMBER          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    LITERAL_STRING  reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    TRUE            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    FALSE           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    VAR             reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    INT             reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    FLOAT           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    CHAR            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    STRING          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    VOID            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    LPAREN          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    RCHAV           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    CASE            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    DEFAULT         reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    ELSE            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)


state 127

    (108) breakStatement -> BREAK ID . PCOMMA

    PCOMMA          shift and go to state 146


state 128

    (42) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR . expression
    (43) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR . listLiteral
    (47) expression -> . orExpression
    (79) listLiteral -> . LCON expressionList RCON
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LCON            shift and go to state 40
    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 147
    listLiteral                    shift and go to state 148
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 129

    (44) initializedVariableDeclaration -> literal ATRIBUIR . expression
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    literal                        shift and go to state 24
    expression                     shift and go to state 149
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 130

    (7) declaredIdentifier -> voidOrType ID .
    (17) functionSignature -> voidOrType ID . formalParameterList
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    ATRIBUIR        reduce using rule 7 (declaredIdentifier -> voidOrType ID .)
    PCOMMA          reduce using rule 7 (declaredIdentifier -> voidOrType ID .)
    LPAREN          shift and go to state 39

    formalParameterList            shift and go to state 99

state 131

    (19) formalParameterList -> LPAREN normalFormalParameters RPAREN .

    LCHAV           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SOMASOMA        reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SUBSUB          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    VEZES           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    DIVIDIR         reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RESTO           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SOMA            reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SUBTRAIR        reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MENOR           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MAIOR           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MENORI          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MAIORI          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    IGUAL           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    NEG             reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    AND             reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    OR              reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    PCOMMA          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    COMMA           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RPAREN          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RCON            reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    ATRIBUIR        reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    PONTOS          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)


state 132

    (21) normalFormalParameters -> simpleFormalParameter COMMA . normalFormalParameters
    (20) normalFormalParameters -> . simpleFormalParameter
    (21) normalFormalParameters -> . simpleFormalParameter COMMA normalFormalParameters
    (22) simpleFormalParameter -> . voidOrType ID
    (23) simpleFormalParameter -> . expression
    (9) voidOrType -> . type
    (47) expression -> . orExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral

    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31

    simpleFormalParameter          shift and go to state 94
    normalFormalParameters         shift and go to state 150
    voidOrType                     shift and go to state 95
    expression                     shift and go to state 96
    type                           shift and go to state 8
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27

state 133

    (22) simpleFormalParameter -> voidOrType ID .
    (17) functionSignature -> voidOrType ID . formalParameterList
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    COMMA           reduce using rule 22 (simpleFormalParameter -> voidOrType ID .)
    RPAREN          reduce using rule 22 (simpleFormalParameter -> voidOrType ID .)
    LPAREN          shift and go to state 39

    formalParameterList            shift and go to state 99

state 134

    (79) listLiteral -> LCON expressionList RCON .

    SOMASOMA        reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    SUBSUB          reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    VEZES           reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    DIVIDIR         reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    RESTO           reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    SOMA            reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    SUBTRAIR        reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    MENOR           reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    MAIOR           reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    MENORI          reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    MAIORI          reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    IGUAL           reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    NEG             reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    AND             reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    OR              reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    PCOMMA          reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    COMMA           reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    RPAREN          reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    RCON            reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    ATRIBUIR        reduce using rule 79 (listLiteral -> LCON expressionList RCON .)
    PONTOS          reduce using rule 79 (listLiteral -> LCON expressionList RCON .)


state 135

    (83) expressionList -> expression COMMA .
    (85) expressionList -> expression COMMA . expressionList
    (83) expressionList -> . expression COMMA
    (84) expressionList -> . expression
    (85) expressionList -> . expression COMMA expressionList
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    RCON            reduce using rule 83 (expressionList -> expression COMMA .)
    RPAREN          reduce using rule 83 (expressionList -> expression COMMA .)
    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 98
    expressionList                 shift and go to state 151
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 136

    (87) returnStatement -> RETURN expression PCOMMA .

    LCHAV           reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    PCOMMA          reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    RETURN          reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    IF              reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    FOR             reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    WHILE           reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    DO              reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    SWITCH          reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    BREAK           reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    ID              reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    NUMBER          reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    LITERAL_STRING  reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    TRUE            reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    FALSE           reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    VAR             reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    INT             reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    FLOAT           reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    CHAR            reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    STRING          reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    VOID            reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    LPAREN          reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    RCHAV           reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    CASE            reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    DEFAULT         reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)
    ELSE            reduce using rule 87 (returnStatement -> RETURN expression PCOMMA .)


state 137

    (88) ifStatement -> IF LPAREN expression . RPAREN statement
    (89) ifStatement -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 152


state 138

    (90) forStatement -> FOR LPAREN forLoopParts . RPAREN statement

    RPAREN          shift and go to state 153


state 139

    (91) forLoopParts -> forInitializerStatement . PCOMMA
    (92) forLoopParts -> forInitializerStatement . PCOMMA expressionList
    (93) forLoopParts -> forInitializerStatement . expression PCOMMA
    (94) forLoopParts -> forInitializerStatement . expression PCOMMA expressionList
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    PCOMMA          shift and go to state 154
    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 155
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 140

    (96) forInitializerStatement -> PCOMMA .

    PCOMMA          reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    LPAREN          reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    ID              reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    NUMBER          reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    LITERAL_STRING  reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    TRUE            reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    FALSE           reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    VAR             reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    INT             reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    FLOAT           reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    CHAR            reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    STRING          reduce using rule 96 (forInitializerStatement -> PCOMMA .)
    VOID            reduce using rule 96 (forInitializerStatement -> PCOMMA .)


state 141

    (97) forInitializerStatement -> expression . PCOMMA
    (8) declaredIdentifier -> expression .

  ! shift/reduce conflict for PCOMMA resolved as shift
    PCOMMA          shift and go to state 156
    ATRIBUIR        reduce using rule 8 (declaredIdentifier -> expression .)

  ! PCOMMA          [ reduce using rule 8 (declaredIdentifier -> expression .) ]


state 142

    (95) forInitializerStatement -> localVariableDeclaration .

    PCOMMA          reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    LPAREN          reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    ID              reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    NUMBER          reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    LITERAL_STRING  reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    TRUE            reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    FALSE           reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    VAR             reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    INT             reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    FLOAT           reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    CHAR            reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    STRING          reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)
    VOID            reduce using rule 95 (forInitializerStatement -> localVariableDeclaration .)


state 143

    (98) whileStatement -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 157


state 144

    (99) doStatement -> DO statement WHILE . LPAREN expression RPAREN PCOMMA

    LPAREN          shift and go to state 158


state 145

    (100) switchStatement -> SWITCH LPAREN expression . RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> SWITCH LPAREN expression . RPAREN LCHAV switchCaseRepetition defaultCase RCHAV

    RPAREN          shift and go to state 159


state 146

    (108) breakStatement -> BREAK ID PCOMMA .

    LCHAV           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    PCOMMA          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    RETURN          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    IF              reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    FOR             reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    WHILE           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    DO              reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    SWITCH          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    BREAK           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    ID              reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    NUMBER          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    LITERAL_STRING  reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    TRUE            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    FALSE           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    VAR             reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    INT             reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    FLOAT           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    CHAR            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    STRING          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    VOID            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    LPAREN          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    RCHAV           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    CASE            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    DEFAULT         reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    ELSE            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)


state 147

    (42) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression .

    PCOMMA          reduce using rule 42 (initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression .)


state 148

    (43) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR listLiteral .

    PCOMMA          reduce using rule 43 (initializedVariableDeclaration -> declaredIdentifier ATRIBUIR listLiteral .)


state 149

    (44) initializedVariableDeclaration -> literal ATRIBUIR expression .

    PCOMMA          reduce using rule 44 (initializedVariableDeclaration -> literal ATRIBUIR expression .)


state 150

    (21) normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters .

    RPAREN          reduce using rule 21 (normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters .)


state 151

    (85) expressionList -> expression COMMA expressionList .

    RCON            reduce using rule 85 (expressionList -> expression COMMA expressionList .)
    RPAREN          reduce using rule 85 (expressionList -> expression COMMA expressionList .)


state 152

    (88) ifStatement -> IF LPAREN expression RPAREN . statement
    (89) ifStatement -> IF LPAREN expression RPAREN . statement ELSE statement
    (29) statement -> . nonLabelledStatement
    (30) nonLabelledStatement -> . block
    (31) nonLabelledStatement -> . expressionStatement
    (32) nonLabelledStatement -> . localVariableDeclaration
    (33) nonLabelledStatement -> . returnStatement
    (34) nonLabelledStatement -> . ifStatement
    (35) nonLabelledStatement -> . forStatement
    (36) nonLabelledStatement -> . whileStatement
    (37) nonLabelledStatement -> . doStatement
    (38) nonLabelledStatement -> . switchStatement
    (39) nonLabelledStatement -> . breakStatement
    (25) block -> . LCHAV statements RCHAV
    (26) block -> . LCHAV RCHAV
    (45) expressionStatement -> . PCOMMA
    (46) expressionStatement -> . expression PCOMMA
    (40) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (86) returnStatement -> . RETURN PCOMMA
    (87) returnStatement -> . RETURN expression PCOMMA
    (88) ifStatement -> . IF LPAREN expression RPAREN statement
    (89) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (90) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (98) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (99) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (47) expression -> . orExpression
    (41) initializedVariableDeclaration -> . declaredIdentifier
    (42) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (44) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList

    LCHAV           shift and go to state 36
    PCOMMA          shift and go to state 78
    RETURN          shift and go to state 81
    IF              shift and go to state 82
    FOR             shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    SWITCH          shift and go to state 86
    BREAK           shift and go to state 87
    ID              shift and go to state 88
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25

    expression                     shift and go to state 79
    statement                      shift and go to state 160
    nonLabelledStatement           shift and go to state 67
    block                          shift and go to state 68
    expressionStatement            shift and go to state 69
    localVariableDeclaration       shift and go to state 70
    returnStatement                shift and go to state 71
    ifStatement                    shift and go to state 72
    forStatement                   shift and go to state 73
    whileStatement                 shift and go to state 74
    doStatement                    shift and go to state 75
    switchStatement                shift and go to state 76
    breakStatement                 shift and go to state 77
    initializedVariableDeclaration shift and go to state 80
    orExpression                   shift and go to state 9
    declaredIdentifier             shift and go to state 89
    literal                        shift and go to state 90
    andExpression                  shift and go to state 16
    voidOrType                     shift and go to state 91
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    equalityExpression             shift and go to state 17
    type                           shift and go to state 8
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58

state 153

    (90) forStatement -> FOR LPAREN forLoopParts RPAREN . statement
    (29) statement -> . nonLabelledStatement
    (30) nonLabelledStatement -> . block
    (31) nonLabelledStatement -> . expressionStatement
    (32) nonLabelledStatement -> . localVariableDeclaration
    (33) nonLabelledStatement -> . returnStatement
    (34) nonLabelledStatement -> . ifStatement
    (35) nonLabelledStatement -> . forStatement
    (36) nonLabelledStatement -> . whileStatement
    (37) nonLabelledStatement -> . doStatement
    (38) nonLabelledStatement -> . switchStatement
    (39) nonLabelledStatement -> . breakStatement
    (25) block -> . LCHAV statements RCHAV
    (26) block -> . LCHAV RCHAV
    (45) expressionStatement -> . PCOMMA
    (46) expressionStatement -> . expression PCOMMA
    (40) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (86) returnStatement -> . RETURN PCOMMA
    (87) returnStatement -> . RETURN expression PCOMMA
    (88) ifStatement -> . IF LPAREN expression RPAREN statement
    (89) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (90) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (98) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (99) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (47) expression -> . orExpression
    (41) initializedVariableDeclaration -> . declaredIdentifier
    (42) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (44) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList

    LCHAV           shift and go to state 36
    PCOMMA          shift and go to state 78
    RETURN          shift and go to state 81
    IF              shift and go to state 82
    FOR             shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    SWITCH          shift and go to state 86
    BREAK           shift and go to state 87
    ID              shift and go to state 88
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25

    statement                      shift and go to state 161
    nonLabelledStatement           shift and go to state 67
    block                          shift and go to state 68
    expressionStatement            shift and go to state 69
    localVariableDeclaration       shift and go to state 70
    returnStatement                shift and go to state 71
    ifStatement                    shift and go to state 72
    forStatement                   shift and go to state 73
    whileStatement                 shift and go to state 74
    doStatement                    shift and go to state 75
    switchStatement                shift and go to state 76
    breakStatement                 shift and go to state 77
    expression                     shift and go to state 79
    initializedVariableDeclaration shift and go to state 80
    orExpression                   shift and go to state 9
    declaredIdentifier             shift and go to state 89
    literal                        shift and go to state 90
    andExpression                  shift and go to state 16
    voidOrType                     shift and go to state 91
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    equalityExpression             shift and go to state 17
    type                           shift and go to state 8
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58

state 154

    (91) forLoopParts -> forInitializerStatement PCOMMA .
    (92) forLoopParts -> forInitializerStatement PCOMMA . expressionList
    (83) expressionList -> . expression COMMA
    (84) expressionList -> . expression
    (85) expressionList -> . expression COMMA expressionList
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    RPAREN          reduce using rule 91 (forLoopParts -> forInitializerStatement PCOMMA .)
    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expressionList                 shift and go to state 162
    expression                     shift and go to state 98
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 155

    (93) forLoopParts -> forInitializerStatement expression . PCOMMA
    (94) forLoopParts -> forInitializerStatement expression . PCOMMA expressionList

    PCOMMA          shift and go to state 163


state 156

    (97) forInitializerStatement -> expression PCOMMA .

    PCOMMA          reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    LPAREN          reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    ID              reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    NUMBER          reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    LITERAL_STRING  reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    TRUE            reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    FALSE           reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    VAR             reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    INT             reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    FLOAT           reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    CHAR            reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    STRING          reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)
    VOID            reduce using rule 97 (forInitializerStatement -> expression PCOMMA .)


state 157

    (98) whileStatement -> WHILE LPAREN expression RPAREN . statement
    (29) statement -> . nonLabelledStatement
    (30) nonLabelledStatement -> . block
    (31) nonLabelledStatement -> . expressionStatement
    (32) nonLabelledStatement -> . localVariableDeclaration
    (33) nonLabelledStatement -> . returnStatement
    (34) nonLabelledStatement -> . ifStatement
    (35) nonLabelledStatement -> . forStatement
    (36) nonLabelledStatement -> . whileStatement
    (37) nonLabelledStatement -> . doStatement
    (38) nonLabelledStatement -> . switchStatement
    (39) nonLabelledStatement -> . breakStatement
    (25) block -> . LCHAV statements RCHAV
    (26) block -> . LCHAV RCHAV
    (45) expressionStatement -> . PCOMMA
    (46) expressionStatement -> . expression PCOMMA
    (40) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (86) returnStatement -> . RETURN PCOMMA
    (87) returnStatement -> . RETURN expression PCOMMA
    (88) ifStatement -> . IF LPAREN expression RPAREN statement
    (89) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (90) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (98) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (99) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (47) expression -> . orExpression
    (41) initializedVariableDeclaration -> . declaredIdentifier
    (42) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (44) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList

    LCHAV           shift and go to state 36
    PCOMMA          shift and go to state 78
    RETURN          shift and go to state 81
    IF              shift and go to state 82
    FOR             shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    SWITCH          shift and go to state 86
    BREAK           shift and go to state 87
    ID              shift and go to state 88
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25

    expression                     shift and go to state 79
    statement                      shift and go to state 164
    nonLabelledStatement           shift and go to state 67
    block                          shift and go to state 68
    expressionStatement            shift and go to state 69
    localVariableDeclaration       shift and go to state 70
    returnStatement                shift and go to state 71
    ifStatement                    shift and go to state 72
    forStatement                   shift and go to state 73
    whileStatement                 shift and go to state 74
    doStatement                    shift and go to state 75
    switchStatement                shift and go to state 76
    breakStatement                 shift and go to state 77
    initializedVariableDeclaration shift and go to state 80
    orExpression                   shift and go to state 9
    declaredIdentifier             shift and go to state 89
    literal                        shift and go to state 90
    andExpression                  shift and go to state 16
    voidOrType                     shift and go to state 91
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    equalityExpression             shift and go to state 17
    type                           shift and go to state 8
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58

state 158

    (99) doStatement -> DO statement WHILE LPAREN . expression RPAREN PCOMMA
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 165
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 159

    (100) switchStatement -> SWITCH LPAREN expression RPAREN . LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> SWITCH LPAREN expression RPAREN . LCHAV switchCaseRepetition defaultCase RCHAV

    LCHAV           shift and go to state 166


state 160

    (88) ifStatement -> IF LPAREN expression RPAREN statement .
    (89) ifStatement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LCHAV           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    PCOMMA          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LITERAL_STRING  reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    RCHAV           reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 167

  ! ELSE            [ reduce using rule 88 (ifStatement -> IF LPAREN expression RPAREN statement .) ]


state 161

    (90) forStatement -> FOR LPAREN forLoopParts RPAREN statement .

    LCHAV           reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    PCOMMA          reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    RETURN          reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    IF              reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FOR             reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    WHILE           reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    DO              reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    SWITCH          reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    BREAK           reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    ID              reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    NUMBER          reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LITERAL_STRING  reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    TRUE            reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FALSE           reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    VAR             reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    INT             reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FLOAT           reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    CHAR            reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    STRING          reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    VOID            reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LPAREN          reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    RCHAV           reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    CASE            reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    DEFAULT         reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    ELSE            reduce using rule 90 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)


state 162

    (92) forLoopParts -> forInitializerStatement PCOMMA expressionList .

    RPAREN          reduce using rule 92 (forLoopParts -> forInitializerStatement PCOMMA expressionList .)


state 163

    (93) forLoopParts -> forInitializerStatement expression PCOMMA .
    (94) forLoopParts -> forInitializerStatement expression PCOMMA . expressionList
    (83) expressionList -> . expression COMMA
    (84) expressionList -> . expression
    (85) expressionList -> . expression COMMA expressionList
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    RPAREN          reduce using rule 93 (forLoopParts -> forInitializerStatement expression PCOMMA .)
    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 98
    expressionList                 shift and go to state 168
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 164

    (98) whileStatement -> WHILE LPAREN expression RPAREN statement .

    LCHAV           reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    PCOMMA          reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LITERAL_STRING  reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    VAR             reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    RCHAV           reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 98 (whileStatement -> WHILE LPAREN expression RPAREN statement .)


state 165

    (99) doStatement -> DO statement WHILE LPAREN expression . RPAREN PCOMMA

    RPAREN          shift and go to state 169


state 166

    (100) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV . switchCaseRepetition RCHAV
    (101) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV . switchCaseRepetition defaultCase RCHAV
    (102) switchCaseRepetition -> . switchCase switchCaseRepetition
    (103) switchCaseRepetition -> . switchCase
    (104) switchCase -> . CASE expression PONTOS statements

    CASE            shift and go to state 172

    switchCaseRepetition           shift and go to state 170
    switchCase                     shift and go to state 171

state 167

    (89) ifStatement -> IF LPAREN expression RPAREN statement ELSE . statement
    (29) statement -> . nonLabelledStatement
    (30) nonLabelledStatement -> . block
    (31) nonLabelledStatement -> . expressionStatement
    (32) nonLabelledStatement -> . localVariableDeclaration
    (33) nonLabelledStatement -> . returnStatement
    (34) nonLabelledStatement -> . ifStatement
    (35) nonLabelledStatement -> . forStatement
    (36) nonLabelledStatement -> . whileStatement
    (37) nonLabelledStatement -> . doStatement
    (38) nonLabelledStatement -> . switchStatement
    (39) nonLabelledStatement -> . breakStatement
    (25) block -> . LCHAV statements RCHAV
    (26) block -> . LCHAV RCHAV
    (45) expressionStatement -> . PCOMMA
    (46) expressionStatement -> . expression PCOMMA
    (40) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (86) returnStatement -> . RETURN PCOMMA
    (87) returnStatement -> . RETURN expression PCOMMA
    (88) ifStatement -> . IF LPAREN expression RPAREN statement
    (89) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (90) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (98) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (99) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (47) expression -> . orExpression
    (41) initializedVariableDeclaration -> . declaredIdentifier
    (42) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (44) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList

    LCHAV           shift and go to state 36
    PCOMMA          shift and go to state 78
    RETURN          shift and go to state 81
    IF              shift and go to state 82
    FOR             shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    SWITCH          shift and go to state 86
    BREAK           shift and go to state 87
    ID              shift and go to state 88
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25

    expression                     shift and go to state 79
    statement                      shift and go to state 173
    nonLabelledStatement           shift and go to state 67
    block                          shift and go to state 68
    expressionStatement            shift and go to state 69
    localVariableDeclaration       shift and go to state 70
    returnStatement                shift and go to state 71
    ifStatement                    shift and go to state 72
    forStatement                   shift and go to state 73
    whileStatement                 shift and go to state 74
    doStatement                    shift and go to state 75
    switchStatement                shift and go to state 76
    breakStatement                 shift and go to state 77
    initializedVariableDeclaration shift and go to state 80
    orExpression                   shift and go to state 9
    declaredIdentifier             shift and go to state 89
    literal                        shift and go to state 90
    andExpression                  shift and go to state 16
    voidOrType                     shift and go to state 91
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    equalityExpression             shift and go to state 17
    type                           shift and go to state 8
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58

state 168

    (94) forLoopParts -> forInitializerStatement expression PCOMMA expressionList .

    RPAREN          reduce using rule 94 (forLoopParts -> forInitializerStatement expression PCOMMA expressionList .)


state 169

    (99) doStatement -> DO statement WHILE LPAREN expression RPAREN . PCOMMA

    PCOMMA          shift and go to state 174


state 170

    (100) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition . RCHAV
    (101) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition . defaultCase RCHAV
    (105) defaultCase -> . DEFAULT PONTOS statements

    RCHAV           shift and go to state 175
    DEFAULT         shift and go to state 177

    defaultCase                    shift and go to state 176

state 171

    (102) switchCaseRepetition -> switchCase . switchCaseRepetition
    (103) switchCaseRepetition -> switchCase .
    (102) switchCaseRepetition -> . switchCase switchCaseRepetition
    (103) switchCaseRepetition -> . switchCase
    (104) switchCase -> . CASE expression PONTOS statements

    RCHAV           reduce using rule 103 (switchCaseRepetition -> switchCase .)
    DEFAULT         reduce using rule 103 (switchCaseRepetition -> switchCase .)
    CASE            shift and go to state 172

    switchCase                     shift and go to state 171
    switchCaseRepetition           shift and go to state 178

state 172

    (104) switchCase -> CASE . expression PONTOS statements
    (47) expression -> . orExpression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (9) voidOrType -> . type
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID

    LPAREN          shift and go to state 25
    ID              shift and go to state 59
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15

    expression                     shift and go to state 179
    orExpression                   shift and go to state 9
    andExpression                  shift and go to state 16
    equalityExpression             shift and go to state 17
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    literal                        shift and go to state 24
    functionSignature              shift and go to state 58
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    voidOrType                     shift and go to state 60
    type                           shift and go to state 8

state 173

    (89) ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .

    LCHAV           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PCOMMA          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LITERAL_STRING  reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RCHAV           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 174

    (99) doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .

    LCHAV           reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    PCOMMA          reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    RETURN          reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    IF              reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FOR             reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    WHILE           reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    DO              reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    SWITCH          reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    BREAK           reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    ID              reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    NUMBER          reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LITERAL_STRING  reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    TRUE            reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FALSE           reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    VAR             reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    INT             reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FLOAT           reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    CHAR            reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    STRING          reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    VOID            reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LPAREN          reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    RCHAV           reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    CASE            reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    DEFAULT         reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    ELSE            reduce using rule 99 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)


state 175

    (100) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .

    LCHAV           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    PCOMMA          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    RETURN          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    IF              reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FOR             reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    WHILE           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    DO              reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    SWITCH          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    BREAK           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    ID              reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    NUMBER          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LITERAL_STRING  reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    TRUE            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FALSE           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    VAR             reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    INT             reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FLOAT           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    CHAR            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    STRING          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    VOID            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LPAREN          reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    RCHAV           reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    CASE            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    DEFAULT         reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    ELSE            reduce using rule 100 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)


state 176

    (101) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase . RCHAV

    RCHAV           shift and go to state 180


state 177

    (105) defaultCase -> DEFAULT . PONTOS statements

    PONTOS          shift and go to state 181


state 178

    (102) switchCaseRepetition -> switchCase switchCaseRepetition .

    RCHAV           reduce using rule 102 (switchCaseRepetition -> switchCase switchCaseRepetition .)
    DEFAULT         reduce using rule 102 (switchCaseRepetition -> switchCase switchCaseRepetition .)


state 179

    (104) switchCase -> CASE expression . PONTOS statements

    PONTOS          shift and go to state 182


state 180

    (101) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .

    LCHAV           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    PCOMMA          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    RETURN          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    IF              reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FOR             reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    WHILE           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    DO              reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    SWITCH          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    BREAK           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    ID              reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    NUMBER          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LITERAL_STRING  reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    TRUE            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FALSE           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    VAR             reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    INT             reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FLOAT           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    CHAR            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    STRING          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    VOID            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LPAREN          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    RCHAV           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    CASE            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    DEFAULT         reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    ELSE            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)


state 181

    (105) defaultCase -> DEFAULT PONTOS . statements
    (27) statements -> . statement statements
    (28) statements -> . statement
    (29) statement -> . nonLabelledStatement
    (30) nonLabelledStatement -> . block
    (31) nonLabelledStatement -> . expressionStatement
    (32) nonLabelledStatement -> . localVariableDeclaration
    (33) nonLabelledStatement -> . returnStatement
    (34) nonLabelledStatement -> . ifStatement
    (35) nonLabelledStatement -> . forStatement
    (36) nonLabelledStatement -> . whileStatement
    (37) nonLabelledStatement -> . doStatement
    (38) nonLabelledStatement -> . switchStatement
    (39) nonLabelledStatement -> . breakStatement
    (25) block -> . LCHAV statements RCHAV
    (26) block -> . LCHAV RCHAV
    (45) expressionStatement -> . PCOMMA
    (46) expressionStatement -> . expression PCOMMA
    (40) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (86) returnStatement -> . RETURN PCOMMA
    (87) returnStatement -> . RETURN expression PCOMMA
    (88) ifStatement -> . IF LPAREN expression RPAREN statement
    (89) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (90) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (98) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (99) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (47) expression -> . orExpression
    (41) initializedVariableDeclaration -> . declaredIdentifier
    (42) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (44) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList

    LCHAV           shift and go to state 36
    PCOMMA          shift and go to state 78
    RETURN          shift and go to state 81
    IF              shift and go to state 82
    FOR             shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    SWITCH          shift and go to state 86
    BREAK           shift and go to state 87
    ID              shift and go to state 88
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25

    statements                     shift and go to state 183
    statement                      shift and go to state 66
    nonLabelledStatement           shift and go to state 67
    block                          shift and go to state 68
    expressionStatement            shift and go to state 69
    localVariableDeclaration       shift and go to state 70
    returnStatement                shift and go to state 71
    ifStatement                    shift and go to state 72
    forStatement                   shift and go to state 73
    whileStatement                 shift and go to state 74
    doStatement                    shift and go to state 75
    switchStatement                shift and go to state 76
    breakStatement                 shift and go to state 77
    expression                     shift and go to state 79
    initializedVariableDeclaration shift and go to state 80
    orExpression                   shift and go to state 9
    declaredIdentifier             shift and go to state 89
    literal                        shift and go to state 90
    andExpression                  shift and go to state 16
    voidOrType                     shift and go to state 91
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    equalityExpression             shift and go to state 17
    type                           shift and go to state 8
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58

state 182

    (104) switchCase -> CASE expression PONTOS . statements
    (27) statements -> . statement statements
    (28) statements -> . statement
    (29) statement -> . nonLabelledStatement
    (30) nonLabelledStatement -> . block
    (31) nonLabelledStatement -> . expressionStatement
    (32) nonLabelledStatement -> . localVariableDeclaration
    (33) nonLabelledStatement -> . returnStatement
    (34) nonLabelledStatement -> . ifStatement
    (35) nonLabelledStatement -> . forStatement
    (36) nonLabelledStatement -> . whileStatement
    (37) nonLabelledStatement -> . doStatement
    (38) nonLabelledStatement -> . switchStatement
    (39) nonLabelledStatement -> . breakStatement
    (25) block -> . LCHAV statements RCHAV
    (26) block -> . LCHAV RCHAV
    (45) expressionStatement -> . PCOMMA
    (46) expressionStatement -> . expression PCOMMA
    (40) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (86) returnStatement -> . RETURN PCOMMA
    (87) returnStatement -> . RETURN expression PCOMMA
    (88) ifStatement -> . IF LPAREN expression RPAREN statement
    (89) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (90) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (98) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (99) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (100) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (47) expression -> . orExpression
    (41) initializedVariableDeclaration -> . declaredIdentifier
    (42) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (44) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (48) orExpression -> . andExpression
    (49) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . expression
    (74) literal -> . ID
    (75) literal -> . booleanLiteral
    (76) literal -> . listLiteralID
    (77) literal -> . NUMBER
    (78) literal -> . LITERAL_STRING
    (50) andExpression -> . equalityExpression
    (51) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (81) booleanLiteral -> . TRUE
    (82) booleanLiteral -> . FALSE
    (80) listLiteralID -> . ID listLiteral
    (52) equalityExpression -> . relacionalExpression
    (53) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (54) equalityExpression -> . equalityExpression NEG relacionalExpression
    (10) type -> . VAR
    (11) type -> . INT
    (12) type -> . FLOAT
    (13) type -> . CHAR
    (14) type -> . STRING
    (15) type -> . VOID
    (55) relacionalExpression -> . addExpression
    (56) relacionalExpression -> . relacionalExpression MENOR addExpression
    (57) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (58) relacionalExpression -> . relacionalExpression MENORI addExpression
    (59) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (60) addExpression -> . multExpression
    (61) addExpression -> . addExpression SOMA multExpression
    (62) addExpression -> . addExpression SUBTRAIR multExpression
    (63) multExpression -> . unaryExpression
    (64) multExpression -> . multExpression VEZES unaryExpression
    (65) multExpression -> . multExpression DIVIDIR unaryExpression
    (66) multExpression -> . multExpression RESTO unaryExpression
    (67) unaryExpression -> . primary
    (68) unaryExpression -> . functionCall
    (69) unaryExpression -> . unaryExpression SOMASOMA
    (70) unaryExpression -> . unaryExpression SUBSUB
    (72) primary -> . literal
    (73) primary -> . LPAREN expression RPAREN
    (71) functionCall -> . functionSignature
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList

    LCHAV           shift and go to state 36
    PCOMMA          shift and go to state 78
    RETURN          shift and go to state 81
    IF              shift and go to state 82
    FOR             shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    SWITCH          shift and go to state 86
    BREAK           shift and go to state 87
    ID              shift and go to state 88
    NUMBER          shift and go to state 28
    LITERAL_STRING  shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    VAR             shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 13
    STRING          shift and go to state 14
    VOID            shift and go to state 15
    LPAREN          shift and go to state 25

    expression                     shift and go to state 79
    statements                     shift and go to state 184
    statement                      shift and go to state 66
    nonLabelledStatement           shift and go to state 67
    block                          shift and go to state 68
    expressionStatement            shift and go to state 69
    localVariableDeclaration       shift and go to state 70
    returnStatement                shift and go to state 71
    ifStatement                    shift and go to state 72
    forStatement                   shift and go to state 73
    whileStatement                 shift and go to state 74
    doStatement                    shift and go to state 75
    switchStatement                shift and go to state 76
    breakStatement                 shift and go to state 77
    initializedVariableDeclaration shift and go to state 80
    orExpression                   shift and go to state 9
    declaredIdentifier             shift and go to state 89
    literal                        shift and go to state 90
    andExpression                  shift and go to state 16
    voidOrType                     shift and go to state 91
    booleanLiteral                 shift and go to state 26
    listLiteralID                  shift and go to state 27
    equalityExpression             shift and go to state 17
    type                           shift and go to state 8
    relacionalExpression           shift and go to state 18
    addExpression                  shift and go to state 19
    multExpression                 shift and go to state 20
    unaryExpression                shift and go to state 21
    primary                        shift and go to state 22
    functionCall                   shift and go to state 23
    functionSignature              shift and go to state 58

state 183

    (105) defaultCase -> DEFAULT PONTOS statements .

    RCHAV           reduce using rule 105 (defaultCase -> DEFAULT PONTOS statements .)


state 184

    (104) switchCase -> CASE expression PONTOS statements .

    CASE            reduce using rule 104 (switchCase -> CASE expression PONTOS statements .)
    RCHAV           reduce using rule 104 (switchCase -> CASE expression PONTOS statements .)
    DEFAULT         reduce using rule 104 (switchCase -> CASE expression PONTOS statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PCOMMA in state 79 resolved as shift
WARNING: shift/reduce conflict for ATRIBUIR in state 90 resolved as shift
WARNING: shift/reduce conflict for PCOMMA in state 141 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 160 resolved as shift
