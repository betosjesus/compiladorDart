Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    CONST
    FINAL
    FUNCTION
    INTEGER
    NOT
    NULL

Grammar

Rule 0     S' -> topLevel
Rule 1     topLevel -> variableDeclaration PCOMMA
Rule 2     topLevel -> variableDeclaration PCOMMA topLevel
Rule 3     topLevel -> functionSignature functionBody
Rule 4     topLevel -> functionSignature functionBody topLevel
Rule 5     variableDeclaration -> declaredIdentifier
Rule 6     variableDeclaration -> variableDeclaration COMMA ID
Rule 7     declaredIdentifier -> voidOrType ID
Rule 8     declaredIdentifier -> ID
Rule 9     voidOrType -> type
Rule 10    voidOrType -> VOID
Rule 11    type -> VAR
Rule 12    type -> INT
Rule 13    type -> FLOAT
Rule 14    type -> CHAR
Rule 15    type -> STRING
Rule 16    functionSignature -> ID formalParameterList
Rule 17    functionSignature -> voidOrType ID formalParameterList
Rule 18    formalParameterList -> LPAREN RPAREN
Rule 19    formalParameterList -> LPAREN normalFormalParameters RPAREN
Rule 20    normalFormalParameters -> simpleFormalParameter
Rule 21    normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters
Rule 22    simpleFormalParameter -> ID
Rule 23    simpleFormalParameter -> voidOrType ID
Rule 24    simpleFormalParameter -> expression
Rule 25    functionBody -> block
Rule 26    block -> LCHAV statements RCHAV
Rule 27    block -> LCHAV RCHAV
Rule 28    statements -> statement statements
Rule 29    statements -> statement
Rule 30    statement -> nonLabelledStatement
Rule 31    nonLabelledStatement -> block
Rule 32    nonLabelledStatement -> expressionStatement
Rule 33    nonLabelledStatement -> localVariableDeclaration
Rule 34    nonLabelledStatement -> returnStatement
Rule 35    nonLabelledStatement -> ifStatement
Rule 36    nonLabelledStatement -> forStatement
Rule 37    nonLabelledStatement -> whileStatement
Rule 38    nonLabelledStatement -> doStatement
Rule 39    nonLabelledStatement -> switchStatement
Rule 40    nonLabelledStatement -> breakStatement
Rule 41    localVariableDeclaration -> initializedVariableDeclaration PCOMMA
Rule 42    initializedVariableDeclaration -> declaredIdentifier
Rule 43    initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression
Rule 44    initializedVariableDeclaration -> listLiteral ATRIBUIR expression
Rule 45    initializedVariableDeclaration -> declaredIdentifier ATRIBUIR listLiteral
Rule 46    initializedVariableDeclaration -> listLiteral ATRIBUIR listLiteral
Rule 47    expressionStatement -> PCOMMA
Rule 48    expressionStatement -> expression PCOMMA
Rule 49    expression -> orExpression
Rule 50    orExpression -> andExpression
Rule 51    orExpression -> orExpression OR andExpression
Rule 52    andExpression -> equalityExpression
Rule 53    andExpression -> andExpression AND equalityExpression
Rule 54    equalityExpression -> relacionalExpression
Rule 55    equalityExpression -> equalityExpression IGUAL relacionalExpression
Rule 56    equalityExpression -> equalityExpression NEG relacionalExpression
Rule 57    relacionalExpression -> addExpression
Rule 58    relacionalExpression -> relacionalExpression MENOR addExpression
Rule 59    relacionalExpression -> relacionalExpression MAIOR addExpression
Rule 60    relacionalExpression -> relacionalExpression MENORI addExpression
Rule 61    relacionalExpression -> relacionalExpression MAIORI addExpression
Rule 62    addExpression -> multExpression
Rule 63    addExpression -> addExpression SOMA multExpression
Rule 64    addExpression -> addExpression SUBTRAIR multExpression
Rule 65    multExpression -> unaryExpression
Rule 66    multExpression -> multExpression VEZES unaryExpression
Rule 67    multExpression -> multExpression DIVIDIR unaryExpression
Rule 68    multExpression -> multExpression RESTO unaryExpression
Rule 69    unaryExpression -> primary
Rule 70    unaryExpression -> functionCall
Rule 71    unaryExpression -> unaryExpression SOMASOMA
Rule 72    unaryExpression -> unaryExpression SUBSUB
Rule 73    functionCall -> functionSignature
Rule 74    primary -> literal
Rule 75    primary -> LPAREN expression RPAREN
Rule 76    literal -> ID
Rule 77    literal -> listLiteral
Rule 78    literal -> booleanLiteral
Rule 79    literal -> NUMBER
Rule 80    literal -> LITERAL_STRING
Rule 81    listLiteral -> LCON RCON
Rule 82    listLiteral -> LCON expressionList RCON
Rule 83    booleanLiteral -> TRUE
Rule 84    booleanLiteral -> FALSE
Rule 85    expressionList -> expression COMMA
Rule 86    expressionList -> expression
Rule 87    expressionList -> expression COMMA expressionList
Rule 88    returnStatement -> RETURN PCOMMA
Rule 89    returnStatement -> RETURN expression PCOMMA
Rule 90    ifStatement -> IF LPAREN expression RPAREN statement
Rule 91    ifStatement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 92    forStatement -> FOR LPAREN forLoopParts RPAREN statement
Rule 93    forLoopParts -> forInitializerStatement PCOMMA
Rule 94    forLoopParts -> forInitializerStatement PCOMMA expressionList
Rule 95    forLoopParts -> forInitializerStatement expression PCOMMA
Rule 96    forLoopParts -> forInitializerStatement expression PCOMMA expressionList
Rule 97    forInitializerStatement -> localVariableDeclaration
Rule 98    forInitializerStatement -> PCOMMA
Rule 99    forInitializerStatement -> expression PCOMMA
Rule 100   whileStatement -> WHILE LPAREN expression RPAREN statement
Rule 101   doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA
Rule 102   switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
Rule 103   switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
Rule 104   switchCaseRepetition -> switchCase switchCaseRepetition
Rule 105   switchCaseRepetition -> switchCase
Rule 106   switchCase -> CASE expression PONTOS statements
Rule 107   switchCase -> label switchCase
Rule 108   defaultCase -> DEFAULT PONTOS statements
Rule 109   defaultCase -> label defaultCase
Rule 110   label -> ID PONTOS
Rule 111   breakStatement -> BREAK PCOMMA
Rule 112   breakStatement -> BREAK ID PCOMMA

Terminals, with rules where they appear

AND                  : 53
ATRIBUIR             : 43 44 45 46
BREAK                : 111 112
CASE                 : 106
CHAR                 : 14
CLASS                : 
COMMA                : 6 21 85 87
CONST                : 
DEFAULT              : 108
DIVIDIR              : 67
DO                   : 101
ELSE                 : 91
FALSE                : 84
FINAL                : 
FLOAT                : 13
FOR                  : 92
FUNCTION             : 
ID                   : 6 7 8 16 17 22 23 76 110 112
IF                   : 90 91
IGUAL                : 55
INT                  : 12
INTEGER              : 
LCHAV                : 26 27 102 103
LCON                 : 81 82
LITERAL_STRING       : 80
LPAREN               : 18 19 75 90 91 92 100 101 102 103
MAIOR                : 59
MAIORI               : 61
MENOR                : 58
MENORI               : 60
NEG                  : 56
NOT                  : 
NULL                 : 
NUMBER               : 79
OR                   : 51
PCOMMA               : 1 2 41 47 48 88 89 93 94 95 96 98 99 101 111 112
PONTOS               : 106 108 110
RCHAV                : 26 27 102 103
RCON                 : 81 82
RESTO                : 68
RETURN               : 88 89
RPAREN               : 18 19 75 90 91 92 100 101 102 103
SOMA                 : 63
SOMASOMA             : 71
STRING               : 15
SUBSUB               : 72
SUBTRAIR             : 64
SWITCH               : 102 103
TRUE                 : 83
VAR                  : 11
VEZES                : 66
VOID                 : 10
WHILE                : 100 101
error                : 

Nonterminals, with rules where they appear

addExpression        : 57 58 59 60 61 63 64
andExpression        : 50 51 53
block                : 25 31
booleanLiteral       : 78
breakStatement       : 40
declaredIdentifier   : 5 42 43 45
defaultCase          : 103 109
doStatement          : 38
equalityExpression   : 52 53 55 56
expression           : 24 43 44 48 75 85 86 87 89 90 91 95 96 99 100 101 102 103 106
expressionList       : 82 87 94 96
expressionStatement  : 32
forInitializerStatement : 93 94 95 96
forLoopParts         : 92
forStatement         : 36
formalParameterList  : 16 17
functionBody         : 3 4
functionCall         : 70
functionSignature    : 3 4 73
ifStatement          : 35
initializedVariableDeclaration : 41
label                : 107 109
listLiteral          : 44 45 46 46 77
literal              : 74
localVariableDeclaration : 33 97
multExpression       : 62 63 64 66 67 68
nonLabelledStatement : 30
normalFormalParameters : 19 21
orExpression         : 49 51
primary              : 69
relacionalExpression : 54 55 56 58 59 60 61
returnStatement      : 34
simpleFormalParameter : 20 21
statement            : 28 29 90 91 91 92 100 101
statements           : 26 28 106 108
switchCase           : 104 105 107
switchCaseRepetition : 102 103 104
switchStatement      : 39
topLevel             : 2 4 0
type                 : 9
unaryExpression      : 65 66 67 68 71 72
variableDeclaration  : 1 2 6
voidOrType           : 7 17 23
whileStatement       : 37

Parsing method: LALR

state 0

    (0) S' -> . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    ID              shift and go to state 5
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    topLevel                       shift and go to state 1
    variableDeclaration            shift and go to state 2
    functionSignature              shift and go to state 3
    declaredIdentifier             shift and go to state 4
    voidOrType                     shift and go to state 6
    type                           shift and go to state 7

state 1

    (0) S' -> topLevel .



state 2

    (1) topLevel -> variableDeclaration . PCOMMA
    (2) topLevel -> variableDeclaration . PCOMMA topLevel
    (6) variableDeclaration -> variableDeclaration . COMMA ID

    PCOMMA          shift and go to state 14
    COMMA           shift and go to state 15


state 3

    (3) topLevel -> functionSignature . functionBody
    (4) topLevel -> functionSignature . functionBody topLevel
    (25) functionBody -> . block
    (26) block -> . LCHAV statements RCHAV
    (27) block -> . LCHAV RCHAV

    LCHAV           shift and go to state 18

    functionBody                   shift and go to state 16
    block                          shift and go to state 17

state 4

    (5) variableDeclaration -> declaredIdentifier .

    PCOMMA          reduce using rule 5 (variableDeclaration -> declaredIdentifier .)
    COMMA           reduce using rule 5 (variableDeclaration -> declaredIdentifier .)


state 5

    (16) functionSignature -> ID . formalParameterList
    (8) declaredIdentifier -> ID .
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    PCOMMA          reduce using rule 8 (declaredIdentifier -> ID .)
    COMMA           reduce using rule 8 (declaredIdentifier -> ID .)
    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 19

state 6

    (17) functionSignature -> voidOrType . ID formalParameterList
    (7) declaredIdentifier -> voidOrType . ID

    ID              shift and go to state 21


state 7

    (9) voidOrType -> type .

    ID              reduce using rule 9 (voidOrType -> type .)


state 8

    (10) voidOrType -> VOID .

    ID              reduce using rule 10 (voidOrType -> VOID .)


state 9

    (11) type -> VAR .

    ID              reduce using rule 11 (type -> VAR .)


state 10

    (12) type -> INT .

    ID              reduce using rule 12 (type -> INT .)


state 11

    (13) type -> FLOAT .

    ID              reduce using rule 13 (type -> FLOAT .)


state 12

    (14) type -> CHAR .

    ID              reduce using rule 14 (type -> CHAR .)


state 13

    (15) type -> STRING .

    ID              reduce using rule 15 (type -> STRING .)


state 14

    (1) topLevel -> variableDeclaration PCOMMA .
    (2) topLevel -> variableDeclaration PCOMMA . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    $end            reduce using rule 1 (topLevel -> variableDeclaration PCOMMA .)
    ID              shift and go to state 5
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    variableDeclaration            shift and go to state 2
    topLevel                       shift and go to state 22
    functionSignature              shift and go to state 3
    declaredIdentifier             shift and go to state 4
    voidOrType                     shift and go to state 6
    type                           shift and go to state 7

state 15

    (6) variableDeclaration -> variableDeclaration COMMA . ID

    ID              shift and go to state 23


state 16

    (3) topLevel -> functionSignature functionBody .
    (4) topLevel -> functionSignature functionBody . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    $end            reduce using rule 3 (topLevel -> functionSignature functionBody .)
    ID              shift and go to state 5
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    functionSignature              shift and go to state 3
    topLevel                       shift and go to state 24
    variableDeclaration            shift and go to state 2
    declaredIdentifier             shift and go to state 4
    voidOrType                     shift and go to state 6
    type                           shift and go to state 7

state 17

    (25) functionBody -> block .

    ID              reduce using rule 25 (functionBody -> block .)
    VOID            reduce using rule 25 (functionBody -> block .)
    VAR             reduce using rule 25 (functionBody -> block .)
    INT             reduce using rule 25 (functionBody -> block .)
    FLOAT           reduce using rule 25 (functionBody -> block .)
    CHAR            reduce using rule 25 (functionBody -> block .)
    STRING          reduce using rule 25 (functionBody -> block .)
    $end            reduce using rule 25 (functionBody -> block .)


state 18

    (26) block -> LCHAV . statements RCHAV
    (27) block -> LCHAV . RCHAV
    (28) statements -> . statement statements
    (29) statements -> . statement
    (30) statement -> . nonLabelledStatement
    (31) nonLabelledStatement -> . block
    (32) nonLabelledStatement -> . expressionStatement
    (33) nonLabelledStatement -> . localVariableDeclaration
    (34) nonLabelledStatement -> . returnStatement
    (35) nonLabelledStatement -> . ifStatement
    (36) nonLabelledStatement -> . forStatement
    (37) nonLabelledStatement -> . whileStatement
    (38) nonLabelledStatement -> . doStatement
    (39) nonLabelledStatement -> . switchStatement
    (40) nonLabelledStatement -> . breakStatement
    (26) block -> . LCHAV statements RCHAV
    (27) block -> . LCHAV RCHAV
    (47) expressionStatement -> . PCOMMA
    (48) expressionStatement -> . expression PCOMMA
    (41) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (88) returnStatement -> . RETURN PCOMMA
    (89) returnStatement -> . RETURN expression PCOMMA
    (90) ifStatement -> . IF LPAREN expression RPAREN statement
    (91) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (100) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (101) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (111) breakStatement -> . BREAK PCOMMA
    (112) breakStatement -> . BREAK ID PCOMMA
    (49) expression -> . orExpression
    (42) initializedVariableDeclaration -> . declaredIdentifier
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (44) initializedVariableDeclaration -> . listLiteral ATRIBUIR expression
    (45) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (46) initializedVariableDeclaration -> . listLiteral ATRIBUIR listLiteral
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    RCHAV           shift and go to state 26
    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    LCON            shift and go to state 56
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statements                     shift and go to state 25
    statement                      shift and go to state 27
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    listLiteral                    shift and go to state 53
    andExpression                  shift and go to state 54
    voidOrType                     shift and go to state 55
    equalityExpression             shift and go to state 57
    type                           shift and go to state 7
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66

state 19

    (16) functionSignature -> ID formalParameterList .

    LCHAV           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    SOMASOMA        reduce using rule 16 (functionSignature -> ID formalParameterList .)
    SUBSUB          reduce using rule 16 (functionSignature -> ID formalParameterList .)
    VEZES           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    DIVIDIR         reduce using rule 16 (functionSignature -> ID formalParameterList .)
    RESTO           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    SOMA            reduce using rule 16 (functionSignature -> ID formalParameterList .)
    SUBTRAIR        reduce using rule 16 (functionSignature -> ID formalParameterList .)
    MENOR           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    MAIOR           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    MENORI          reduce using rule 16 (functionSignature -> ID formalParameterList .)
    MAIORI          reduce using rule 16 (functionSignature -> ID formalParameterList .)
    IGUAL           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    NEG             reduce using rule 16 (functionSignature -> ID formalParameterList .)
    AND             reduce using rule 16 (functionSignature -> ID formalParameterList .)
    OR              reduce using rule 16 (functionSignature -> ID formalParameterList .)
    PCOMMA          reduce using rule 16 (functionSignature -> ID formalParameterList .)
    COMMA           reduce using rule 16 (functionSignature -> ID formalParameterList .)
    RPAREN          reduce using rule 16 (functionSignature -> ID formalParameterList .)
    RCON            reduce using rule 16 (functionSignature -> ID formalParameterList .)
    PONTOS          reduce using rule 16 (functionSignature -> ID formalParameterList .)


state 20

    (18) formalParameterList -> LPAREN . RPAREN
    (19) formalParameterList -> LPAREN . normalFormalParameters RPAREN
    (20) normalFormalParameters -> . simpleFormalParameter
    (21) normalFormalParameters -> . simpleFormalParameter COMMA normalFormalParameters
    (22) simpleFormalParameter -> . ID
    (23) simpleFormalParameter -> . voidOrType ID
    (24) simpleFormalParameter -> . expression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (49) expression -> . orExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    RPAREN          shift and go to state 71
    ID              shift and go to state 74
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    normalFormalParameters         shift and go to state 72
    simpleFormalParameter          shift and go to state 73
    voidOrType                     shift and go to state 75
    expression                     shift and go to state 76
    type                           shift and go to state 7
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66

state 21

    (17) functionSignature -> voidOrType ID . formalParameterList
    (7) declaredIdentifier -> voidOrType ID .
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    PCOMMA          reduce using rule 7 (declaredIdentifier -> voidOrType ID .)
    COMMA           reduce using rule 7 (declaredIdentifier -> voidOrType ID .)
    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 78

state 22

    (2) topLevel -> variableDeclaration PCOMMA topLevel .

    $end            reduce using rule 2 (topLevel -> variableDeclaration PCOMMA topLevel .)


state 23

    (6) variableDeclaration -> variableDeclaration COMMA ID .

    PCOMMA          reduce using rule 6 (variableDeclaration -> variableDeclaration COMMA ID .)
    COMMA           reduce using rule 6 (variableDeclaration -> variableDeclaration COMMA ID .)


state 24

    (4) topLevel -> functionSignature functionBody topLevel .

    $end            reduce using rule 4 (topLevel -> functionSignature functionBody topLevel .)


state 25

    (26) block -> LCHAV statements . RCHAV

    RCHAV           shift and go to state 79


state 26

    (27) block -> LCHAV RCHAV .

    ID              reduce using rule 27 (block -> LCHAV RCHAV .)
    VOID            reduce using rule 27 (block -> LCHAV RCHAV .)
    VAR             reduce using rule 27 (block -> LCHAV RCHAV .)
    INT             reduce using rule 27 (block -> LCHAV RCHAV .)
    FLOAT           reduce using rule 27 (block -> LCHAV RCHAV .)
    CHAR            reduce using rule 27 (block -> LCHAV RCHAV .)
    STRING          reduce using rule 27 (block -> LCHAV RCHAV .)
    $end            reduce using rule 27 (block -> LCHAV RCHAV .)
    LCHAV           reduce using rule 27 (block -> LCHAV RCHAV .)
    PCOMMA          reduce using rule 27 (block -> LCHAV RCHAV .)
    RETURN          reduce using rule 27 (block -> LCHAV RCHAV .)
    IF              reduce using rule 27 (block -> LCHAV RCHAV .)
    FOR             reduce using rule 27 (block -> LCHAV RCHAV .)
    WHILE           reduce using rule 27 (block -> LCHAV RCHAV .)
    DO              reduce using rule 27 (block -> LCHAV RCHAV .)
    SWITCH          reduce using rule 27 (block -> LCHAV RCHAV .)
    BREAK           reduce using rule 27 (block -> LCHAV RCHAV .)
    LCON            reduce using rule 27 (block -> LCHAV RCHAV .)
    LPAREN          reduce using rule 27 (block -> LCHAV RCHAV .)
    NUMBER          reduce using rule 27 (block -> LCHAV RCHAV .)
    LITERAL_STRING  reduce using rule 27 (block -> LCHAV RCHAV .)
    TRUE            reduce using rule 27 (block -> LCHAV RCHAV .)
    FALSE           reduce using rule 27 (block -> LCHAV RCHAV .)
    RCHAV           reduce using rule 27 (block -> LCHAV RCHAV .)
    CASE            reduce using rule 27 (block -> LCHAV RCHAV .)
    DEFAULT         reduce using rule 27 (block -> LCHAV RCHAV .)
    ELSE            reduce using rule 27 (block -> LCHAV RCHAV .)


state 27

    (28) statements -> statement . statements
    (29) statements -> statement .
    (28) statements -> . statement statements
    (29) statements -> . statement
    (30) statement -> . nonLabelledStatement
    (31) nonLabelledStatement -> . block
    (32) nonLabelledStatement -> . expressionStatement
    (33) nonLabelledStatement -> . localVariableDeclaration
    (34) nonLabelledStatement -> . returnStatement
    (35) nonLabelledStatement -> . ifStatement
    (36) nonLabelledStatement -> . forStatement
    (37) nonLabelledStatement -> . whileStatement
    (38) nonLabelledStatement -> . doStatement
    (39) nonLabelledStatement -> . switchStatement
    (40) nonLabelledStatement -> . breakStatement
    (26) block -> . LCHAV statements RCHAV
    (27) block -> . LCHAV RCHAV
    (47) expressionStatement -> . PCOMMA
    (48) expressionStatement -> . expression PCOMMA
    (41) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (88) returnStatement -> . RETURN PCOMMA
    (89) returnStatement -> . RETURN expression PCOMMA
    (90) ifStatement -> . IF LPAREN expression RPAREN statement
    (91) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (100) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (101) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (111) breakStatement -> . BREAK PCOMMA
    (112) breakStatement -> . BREAK ID PCOMMA
    (49) expression -> . orExpression
    (42) initializedVariableDeclaration -> . declaredIdentifier
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (44) initializedVariableDeclaration -> . listLiteral ATRIBUIR expression
    (45) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (46) initializedVariableDeclaration -> . listLiteral ATRIBUIR listLiteral
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
    RCHAV           reduce using rule 29 (statements -> statement .)
    CASE            reduce using rule 29 (statements -> statement .)
    DEFAULT         reduce using rule 29 (statements -> statement .)
    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    LCON            shift and go to state 56
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

  ! ID              [ reduce using rule 29 (statements -> statement .) ]

    statement                      shift and go to state 27
    statements                     shift and go to state 80
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    listLiteral                    shift and go to state 53
    andExpression                  shift and go to state 54
    voidOrType                     shift and go to state 55
    equalityExpression             shift and go to state 57
    type                           shift and go to state 7
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66

state 28

    (30) statement -> nonLabelledStatement .

    LCHAV           reduce using rule 30 (statement -> nonLabelledStatement .)
    PCOMMA          reduce using rule 30 (statement -> nonLabelledStatement .)
    RETURN          reduce using rule 30 (statement -> nonLabelledStatement .)
    IF              reduce using rule 30 (statement -> nonLabelledStatement .)
    FOR             reduce using rule 30 (statement -> nonLabelledStatement .)
    WHILE           reduce using rule 30 (statement -> nonLabelledStatement .)
    DO              reduce using rule 30 (statement -> nonLabelledStatement .)
    SWITCH          reduce using rule 30 (statement -> nonLabelledStatement .)
    BREAK           reduce using rule 30 (statement -> nonLabelledStatement .)
    ID              reduce using rule 30 (statement -> nonLabelledStatement .)
    LCON            reduce using rule 30 (statement -> nonLabelledStatement .)
    VOID            reduce using rule 30 (statement -> nonLabelledStatement .)
    VAR             reduce using rule 30 (statement -> nonLabelledStatement .)
    INT             reduce using rule 30 (statement -> nonLabelledStatement .)
    FLOAT           reduce using rule 30 (statement -> nonLabelledStatement .)
    CHAR            reduce using rule 30 (statement -> nonLabelledStatement .)
    STRING          reduce using rule 30 (statement -> nonLabelledStatement .)
    LPAREN          reduce using rule 30 (statement -> nonLabelledStatement .)
    NUMBER          reduce using rule 30 (statement -> nonLabelledStatement .)
    LITERAL_STRING  reduce using rule 30 (statement -> nonLabelledStatement .)
    TRUE            reduce using rule 30 (statement -> nonLabelledStatement .)
    FALSE           reduce using rule 30 (statement -> nonLabelledStatement .)
    RCHAV           reduce using rule 30 (statement -> nonLabelledStatement .)
    CASE            reduce using rule 30 (statement -> nonLabelledStatement .)
    DEFAULT         reduce using rule 30 (statement -> nonLabelledStatement .)
    ELSE            reduce using rule 30 (statement -> nonLabelledStatement .)


state 29

    (31) nonLabelledStatement -> block .

    LCHAV           reduce using rule 31 (nonLabelledStatement -> block .)
    PCOMMA          reduce using rule 31 (nonLabelledStatement -> block .)
    RETURN          reduce using rule 31 (nonLabelledStatement -> block .)
    IF              reduce using rule 31 (nonLabelledStatement -> block .)
    FOR             reduce using rule 31 (nonLabelledStatement -> block .)
    WHILE           reduce using rule 31 (nonLabelledStatement -> block .)
    DO              reduce using rule 31 (nonLabelledStatement -> block .)
    SWITCH          reduce using rule 31 (nonLabelledStatement -> block .)
    BREAK           reduce using rule 31 (nonLabelledStatement -> block .)
    ID              reduce using rule 31 (nonLabelledStatement -> block .)
    LCON            reduce using rule 31 (nonLabelledStatement -> block .)
    VOID            reduce using rule 31 (nonLabelledStatement -> block .)
    VAR             reduce using rule 31 (nonLabelledStatement -> block .)
    INT             reduce using rule 31 (nonLabelledStatement -> block .)
    FLOAT           reduce using rule 31 (nonLabelledStatement -> block .)
    CHAR            reduce using rule 31 (nonLabelledStatement -> block .)
    STRING          reduce using rule 31 (nonLabelledStatement -> block .)
    LPAREN          reduce using rule 31 (nonLabelledStatement -> block .)
    NUMBER          reduce using rule 31 (nonLabelledStatement -> block .)
    LITERAL_STRING  reduce using rule 31 (nonLabelledStatement -> block .)
    TRUE            reduce using rule 31 (nonLabelledStatement -> block .)
    FALSE           reduce using rule 31 (nonLabelledStatement -> block .)
    RCHAV           reduce using rule 31 (nonLabelledStatement -> block .)
    CASE            reduce using rule 31 (nonLabelledStatement -> block .)
    DEFAULT         reduce using rule 31 (nonLabelledStatement -> block .)
    ELSE            reduce using rule 31 (nonLabelledStatement -> block .)


state 30

    (32) nonLabelledStatement -> expressionStatement .

    LCHAV           reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    PCOMMA          reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    RETURN          reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    IF              reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    FOR             reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    WHILE           reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    DO              reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    SWITCH          reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    BREAK           reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    ID              reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    LCON            reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    VOID            reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    VAR             reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    INT             reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    FLOAT           reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    CHAR            reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    STRING          reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    LPAREN          reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    NUMBER          reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    LITERAL_STRING  reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    TRUE            reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    FALSE           reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    RCHAV           reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    CASE            reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    DEFAULT         reduce using rule 32 (nonLabelledStatement -> expressionStatement .)
    ELSE            reduce using rule 32 (nonLabelledStatement -> expressionStatement .)


state 31

    (33) nonLabelledStatement -> localVariableDeclaration .

    LCHAV           reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    PCOMMA          reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    RETURN          reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    IF              reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    FOR             reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    WHILE           reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    DO              reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    SWITCH          reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    BREAK           reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    ID              reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    LCON            reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    VOID            reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    VAR             reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    INT             reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    FLOAT           reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    CHAR            reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    STRING          reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    LPAREN          reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    NUMBER          reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    LITERAL_STRING  reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    TRUE            reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    FALSE           reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    RCHAV           reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    CASE            reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    DEFAULT         reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)
    ELSE            reduce using rule 33 (nonLabelledStatement -> localVariableDeclaration .)


state 32

    (34) nonLabelledStatement -> returnStatement .

    LCHAV           reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    PCOMMA          reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    RETURN          reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    IF              reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    FOR             reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    WHILE           reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    DO              reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    SWITCH          reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    BREAK           reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    ID              reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    LCON            reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    VOID            reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    VAR             reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    INT             reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    FLOAT           reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    CHAR            reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    STRING          reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    LPAREN          reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    NUMBER          reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    LITERAL_STRING  reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    TRUE            reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    FALSE           reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    RCHAV           reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    CASE            reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    DEFAULT         reduce using rule 34 (nonLabelledStatement -> returnStatement .)
    ELSE            reduce using rule 34 (nonLabelledStatement -> returnStatement .)


state 33

    (35) nonLabelledStatement -> ifStatement .

    LCHAV           reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    PCOMMA          reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    RETURN          reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    IF              reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    FOR             reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    WHILE           reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    DO              reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    SWITCH          reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    BREAK           reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    ID              reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    LCON            reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    VOID            reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    VAR             reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    INT             reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    FLOAT           reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    CHAR            reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    STRING          reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    LPAREN          reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    NUMBER          reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    LITERAL_STRING  reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    TRUE            reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    FALSE           reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    RCHAV           reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    CASE            reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    DEFAULT         reduce using rule 35 (nonLabelledStatement -> ifStatement .)
    ELSE            reduce using rule 35 (nonLabelledStatement -> ifStatement .)


state 34

    (36) nonLabelledStatement -> forStatement .

    LCHAV           reduce using rule 36 (nonLabelledStatement -> forStatement .)
    PCOMMA          reduce using rule 36 (nonLabelledStatement -> forStatement .)
    RETURN          reduce using rule 36 (nonLabelledStatement -> forStatement .)
    IF              reduce using rule 36 (nonLabelledStatement -> forStatement .)
    FOR             reduce using rule 36 (nonLabelledStatement -> forStatement .)
    WHILE           reduce using rule 36 (nonLabelledStatement -> forStatement .)
    DO              reduce using rule 36 (nonLabelledStatement -> forStatement .)
    SWITCH          reduce using rule 36 (nonLabelledStatement -> forStatement .)
    BREAK           reduce using rule 36 (nonLabelledStatement -> forStatement .)
    ID              reduce using rule 36 (nonLabelledStatement -> forStatement .)
    LCON            reduce using rule 36 (nonLabelledStatement -> forStatement .)
    VOID            reduce using rule 36 (nonLabelledStatement -> forStatement .)
    VAR             reduce using rule 36 (nonLabelledStatement -> forStatement .)
    INT             reduce using rule 36 (nonLabelledStatement -> forStatement .)
    FLOAT           reduce using rule 36 (nonLabelledStatement -> forStatement .)
    CHAR            reduce using rule 36 (nonLabelledStatement -> forStatement .)
    STRING          reduce using rule 36 (nonLabelledStatement -> forStatement .)
    LPAREN          reduce using rule 36 (nonLabelledStatement -> forStatement .)
    NUMBER          reduce using rule 36 (nonLabelledStatement -> forStatement .)
    LITERAL_STRING  reduce using rule 36 (nonLabelledStatement -> forStatement .)
    TRUE            reduce using rule 36 (nonLabelledStatement -> forStatement .)
    FALSE           reduce using rule 36 (nonLabelledStatement -> forStatement .)
    RCHAV           reduce using rule 36 (nonLabelledStatement -> forStatement .)
    CASE            reduce using rule 36 (nonLabelledStatement -> forStatement .)
    DEFAULT         reduce using rule 36 (nonLabelledStatement -> forStatement .)
    ELSE            reduce using rule 36 (nonLabelledStatement -> forStatement .)


state 35

    (37) nonLabelledStatement -> whileStatement .

    LCHAV           reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    PCOMMA          reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    RETURN          reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    IF              reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    FOR             reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    WHILE           reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    DO              reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    SWITCH          reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    BREAK           reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    ID              reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    LCON            reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    VOID            reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    VAR             reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    INT             reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    FLOAT           reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    CHAR            reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    STRING          reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    LPAREN          reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    NUMBER          reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    LITERAL_STRING  reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    TRUE            reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    FALSE           reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    RCHAV           reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    CASE            reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    DEFAULT         reduce using rule 37 (nonLabelledStatement -> whileStatement .)
    ELSE            reduce using rule 37 (nonLabelledStatement -> whileStatement .)


state 36

    (38) nonLabelledStatement -> doStatement .

    LCHAV           reduce using rule 38 (nonLabelledStatement -> doStatement .)
    PCOMMA          reduce using rule 38 (nonLabelledStatement -> doStatement .)
    RETURN          reduce using rule 38 (nonLabelledStatement -> doStatement .)
    IF              reduce using rule 38 (nonLabelledStatement -> doStatement .)
    FOR             reduce using rule 38 (nonLabelledStatement -> doStatement .)
    WHILE           reduce using rule 38 (nonLabelledStatement -> doStatement .)
    DO              reduce using rule 38 (nonLabelledStatement -> doStatement .)
    SWITCH          reduce using rule 38 (nonLabelledStatement -> doStatement .)
    BREAK           reduce using rule 38 (nonLabelledStatement -> doStatement .)
    ID              reduce using rule 38 (nonLabelledStatement -> doStatement .)
    LCON            reduce using rule 38 (nonLabelledStatement -> doStatement .)
    VOID            reduce using rule 38 (nonLabelledStatement -> doStatement .)
    VAR             reduce using rule 38 (nonLabelledStatement -> doStatement .)
    INT             reduce using rule 38 (nonLabelledStatement -> doStatement .)
    FLOAT           reduce using rule 38 (nonLabelledStatement -> doStatement .)
    CHAR            reduce using rule 38 (nonLabelledStatement -> doStatement .)
    STRING          reduce using rule 38 (nonLabelledStatement -> doStatement .)
    LPAREN          reduce using rule 38 (nonLabelledStatement -> doStatement .)
    NUMBER          reduce using rule 38 (nonLabelledStatement -> doStatement .)
    LITERAL_STRING  reduce using rule 38 (nonLabelledStatement -> doStatement .)
    TRUE            reduce using rule 38 (nonLabelledStatement -> doStatement .)
    FALSE           reduce using rule 38 (nonLabelledStatement -> doStatement .)
    RCHAV           reduce using rule 38 (nonLabelledStatement -> doStatement .)
    CASE            reduce using rule 38 (nonLabelledStatement -> doStatement .)
    DEFAULT         reduce using rule 38 (nonLabelledStatement -> doStatement .)
    ELSE            reduce using rule 38 (nonLabelledStatement -> doStatement .)


state 37

    (39) nonLabelledStatement -> switchStatement .

    LCHAV           reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    PCOMMA          reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    RETURN          reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    IF              reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    FOR             reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    WHILE           reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    DO              reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    SWITCH          reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    BREAK           reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    ID              reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    LCON            reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    VOID            reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    VAR             reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    INT             reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    FLOAT           reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    CHAR            reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    STRING          reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    LPAREN          reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    NUMBER          reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    LITERAL_STRING  reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    TRUE            reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    FALSE           reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    RCHAV           reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    CASE            reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    DEFAULT         reduce using rule 39 (nonLabelledStatement -> switchStatement .)
    ELSE            reduce using rule 39 (nonLabelledStatement -> switchStatement .)


state 38

    (40) nonLabelledStatement -> breakStatement .

    LCHAV           reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    PCOMMA          reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    RETURN          reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    IF              reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    FOR             reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    WHILE           reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    DO              reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    SWITCH          reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    BREAK           reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    ID              reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    LCON            reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    VOID            reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    VAR             reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    INT             reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    FLOAT           reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    CHAR            reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    STRING          reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    LPAREN          reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    NUMBER          reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    LITERAL_STRING  reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    TRUE            reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    FALSE           reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    RCHAV           reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    CASE            reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    DEFAULT         reduce using rule 40 (nonLabelledStatement -> breakStatement .)
    ELSE            reduce using rule 40 (nonLabelledStatement -> breakStatement .)


state 39

    (47) expressionStatement -> PCOMMA .

    LCHAV           reduce using rule 47 (expressionStatement -> PCOMMA .)
    PCOMMA          reduce using rule 47 (expressionStatement -> PCOMMA .)
    RETURN          reduce using rule 47 (expressionStatement -> PCOMMA .)
    IF              reduce using rule 47 (expressionStatement -> PCOMMA .)
    FOR             reduce using rule 47 (expressionStatement -> PCOMMA .)
    WHILE           reduce using rule 47 (expressionStatement -> PCOMMA .)
    DO              reduce using rule 47 (expressionStatement -> PCOMMA .)
    SWITCH          reduce using rule 47 (expressionStatement -> PCOMMA .)
    BREAK           reduce using rule 47 (expressionStatement -> PCOMMA .)
    ID              reduce using rule 47 (expressionStatement -> PCOMMA .)
    LCON            reduce using rule 47 (expressionStatement -> PCOMMA .)
    VOID            reduce using rule 47 (expressionStatement -> PCOMMA .)
    VAR             reduce using rule 47 (expressionStatement -> PCOMMA .)
    INT             reduce using rule 47 (expressionStatement -> PCOMMA .)
    FLOAT           reduce using rule 47 (expressionStatement -> PCOMMA .)
    CHAR            reduce using rule 47 (expressionStatement -> PCOMMA .)
    STRING          reduce using rule 47 (expressionStatement -> PCOMMA .)
    LPAREN          reduce using rule 47 (expressionStatement -> PCOMMA .)
    NUMBER          reduce using rule 47 (expressionStatement -> PCOMMA .)
    LITERAL_STRING  reduce using rule 47 (expressionStatement -> PCOMMA .)
    TRUE            reduce using rule 47 (expressionStatement -> PCOMMA .)
    FALSE           reduce using rule 47 (expressionStatement -> PCOMMA .)
    RCHAV           reduce using rule 47 (expressionStatement -> PCOMMA .)
    CASE            reduce using rule 47 (expressionStatement -> PCOMMA .)
    DEFAULT         reduce using rule 47 (expressionStatement -> PCOMMA .)
    ELSE            reduce using rule 47 (expressionStatement -> PCOMMA .)


state 40

    (48) expressionStatement -> expression . PCOMMA

    PCOMMA          shift and go to state 81


state 41

    (41) localVariableDeclaration -> initializedVariableDeclaration . PCOMMA

    PCOMMA          shift and go to state 82


state 42

    (88) returnStatement -> RETURN . PCOMMA
    (89) returnStatement -> RETURN . expression PCOMMA
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    PCOMMA          shift and go to state 83
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 84
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 43

    (90) ifStatement -> IF . LPAREN expression RPAREN statement
    (91) ifStatement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 87


state 44

    (75) primary -> LPAREN . expression RPAREN
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 88
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 45

    (92) forStatement -> FOR . LPAREN forLoopParts RPAREN statement

    LPAREN          shift and go to state 89


state 46

    (100) whileStatement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 90


state 47

    (101) doStatement -> DO . statement WHILE LPAREN expression RPAREN PCOMMA
    (30) statement -> . nonLabelledStatement
    (31) nonLabelledStatement -> . block
    (32) nonLabelledStatement -> . expressionStatement
    (33) nonLabelledStatement -> . localVariableDeclaration
    (34) nonLabelledStatement -> . returnStatement
    (35) nonLabelledStatement -> . ifStatement
    (36) nonLabelledStatement -> . forStatement
    (37) nonLabelledStatement -> . whileStatement
    (38) nonLabelledStatement -> . doStatement
    (39) nonLabelledStatement -> . switchStatement
    (40) nonLabelledStatement -> . breakStatement
    (26) block -> . LCHAV statements RCHAV
    (27) block -> . LCHAV RCHAV
    (47) expressionStatement -> . PCOMMA
    (48) expressionStatement -> . expression PCOMMA
    (41) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (88) returnStatement -> . RETURN PCOMMA
    (89) returnStatement -> . RETURN expression PCOMMA
    (90) ifStatement -> . IF LPAREN expression RPAREN statement
    (91) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (100) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (101) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (111) breakStatement -> . BREAK PCOMMA
    (112) breakStatement -> . BREAK ID PCOMMA
    (49) expression -> . orExpression
    (42) initializedVariableDeclaration -> . declaredIdentifier
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (44) initializedVariableDeclaration -> . listLiteral ATRIBUIR expression
    (45) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (46) initializedVariableDeclaration -> . listLiteral ATRIBUIR listLiteral
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    LCON            shift and go to state 56
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statement                      shift and go to state 91
    expression                     shift and go to state 40
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    listLiteral                    shift and go to state 53
    andExpression                  shift and go to state 54
    voidOrType                     shift and go to state 55
    equalityExpression             shift and go to state 57
    type                           shift and go to state 7
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66

state 48

    (102) switchStatement -> SWITCH . LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> SWITCH . LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV

    LPAREN          shift and go to state 92


state 49

    (111) breakStatement -> BREAK . PCOMMA
    (112) breakStatement -> BREAK . ID PCOMMA

    PCOMMA          shift and go to state 93
    ID              shift and go to state 94


state 50

    (8) declaredIdentifier -> ID .
    (76) literal -> ID .
    (16) functionSignature -> ID . formalParameterList
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

  ! reduce/reduce conflict for PCOMMA resolved using rule 8 (declaredIdentifier -> ID .)
    ATRIBUIR        reduce using rule 8 (declaredIdentifier -> ID .)
    PCOMMA          reduce using rule 8 (declaredIdentifier -> ID .)
    SOMASOMA        reduce using rule 76 (literal -> ID .)
    SUBSUB          reduce using rule 76 (literal -> ID .)
    VEZES           reduce using rule 76 (literal -> ID .)
    DIVIDIR         reduce using rule 76 (literal -> ID .)
    RESTO           reduce using rule 76 (literal -> ID .)
    SOMA            reduce using rule 76 (literal -> ID .)
    SUBTRAIR        reduce using rule 76 (literal -> ID .)
    MENOR           reduce using rule 76 (literal -> ID .)
    MAIOR           reduce using rule 76 (literal -> ID .)
    MENORI          reduce using rule 76 (literal -> ID .)
    MAIORI          reduce using rule 76 (literal -> ID .)
    IGUAL           reduce using rule 76 (literal -> ID .)
    NEG             reduce using rule 76 (literal -> ID .)
    AND             reduce using rule 76 (literal -> ID .)
    OR              reduce using rule 76 (literal -> ID .)
    LPAREN          shift and go to state 20

  ! PCOMMA          [ reduce using rule 76 (literal -> ID .) ]

    formalParameterList            shift and go to state 19

state 51

    (49) expression -> orExpression .
    (51) orExpression -> orExpression . OR andExpression

    PCOMMA          reduce using rule 49 (expression -> orExpression .)
    COMMA           reduce using rule 49 (expression -> orExpression .)
    RPAREN          reduce using rule 49 (expression -> orExpression .)
    RCON            reduce using rule 49 (expression -> orExpression .)
    PONTOS          reduce using rule 49 (expression -> orExpression .)
    OR              shift and go to state 95


state 52

    (42) initializedVariableDeclaration -> declaredIdentifier .
    (43) initializedVariableDeclaration -> declaredIdentifier . ATRIBUIR expression
    (45) initializedVariableDeclaration -> declaredIdentifier . ATRIBUIR listLiteral

    PCOMMA          reduce using rule 42 (initializedVariableDeclaration -> declaredIdentifier .)
    ATRIBUIR        shift and go to state 96


state 53

    (44) initializedVariableDeclaration -> listLiteral . ATRIBUIR expression
    (46) initializedVariableDeclaration -> listLiteral . ATRIBUIR listLiteral
    (77) literal -> listLiteral .

    ATRIBUIR        shift and go to state 97
    SOMASOMA        reduce using rule 77 (literal -> listLiteral .)
    SUBSUB          reduce using rule 77 (literal -> listLiteral .)
    VEZES           reduce using rule 77 (literal -> listLiteral .)
    DIVIDIR         reduce using rule 77 (literal -> listLiteral .)
    RESTO           reduce using rule 77 (literal -> listLiteral .)
    SOMA            reduce using rule 77 (literal -> listLiteral .)
    SUBTRAIR        reduce using rule 77 (literal -> listLiteral .)
    MENOR           reduce using rule 77 (literal -> listLiteral .)
    MAIOR           reduce using rule 77 (literal -> listLiteral .)
    MENORI          reduce using rule 77 (literal -> listLiteral .)
    MAIORI          reduce using rule 77 (literal -> listLiteral .)
    IGUAL           reduce using rule 77 (literal -> listLiteral .)
    NEG             reduce using rule 77 (literal -> listLiteral .)
    AND             reduce using rule 77 (literal -> listLiteral .)
    OR              reduce using rule 77 (literal -> listLiteral .)
    PCOMMA          reduce using rule 77 (literal -> listLiteral .)


state 54

    (50) orExpression -> andExpression .
    (53) andExpression -> andExpression . AND equalityExpression

    OR              reduce using rule 50 (orExpression -> andExpression .)
    PCOMMA          reduce using rule 50 (orExpression -> andExpression .)
    COMMA           reduce using rule 50 (orExpression -> andExpression .)
    RPAREN          reduce using rule 50 (orExpression -> andExpression .)
    RCON            reduce using rule 50 (orExpression -> andExpression .)
    PONTOS          reduce using rule 50 (orExpression -> andExpression .)
    AND             shift and go to state 98


state 55

    (7) declaredIdentifier -> voidOrType . ID
    (17) functionSignature -> voidOrType . ID formalParameterList

    ID              shift and go to state 99


state 56

    (81) listLiteral -> LCON . RCON
    (82) listLiteral -> LCON . expressionList RCON
    (85) expressionList -> . expression COMMA
    (86) expressionList -> . expression
    (87) expressionList -> . expression COMMA expressionList
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    RCON            shift and go to state 100
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expressionList                 shift and go to state 101
    expression                     shift and go to state 102
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 57

    (52) andExpression -> equalityExpression .
    (55) equalityExpression -> equalityExpression . IGUAL relacionalExpression
    (56) equalityExpression -> equalityExpression . NEG relacionalExpression

    AND             reduce using rule 52 (andExpression -> equalityExpression .)
    OR              reduce using rule 52 (andExpression -> equalityExpression .)
    PCOMMA          reduce using rule 52 (andExpression -> equalityExpression .)
    COMMA           reduce using rule 52 (andExpression -> equalityExpression .)
    RPAREN          reduce using rule 52 (andExpression -> equalityExpression .)
    RCON            reduce using rule 52 (andExpression -> equalityExpression .)
    PONTOS          reduce using rule 52 (andExpression -> equalityExpression .)
    IGUAL           shift and go to state 103
    NEG             shift and go to state 104


state 58

    (54) equalityExpression -> relacionalExpression .
    (58) relacionalExpression -> relacionalExpression . MENOR addExpression
    (59) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (60) relacionalExpression -> relacionalExpression . MENORI addExpression
    (61) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 54 (equalityExpression -> relacionalExpression .)
    NEG             reduce using rule 54 (equalityExpression -> relacionalExpression .)
    AND             reduce using rule 54 (equalityExpression -> relacionalExpression .)
    OR              reduce using rule 54 (equalityExpression -> relacionalExpression .)
    PCOMMA          reduce using rule 54 (equalityExpression -> relacionalExpression .)
    COMMA           reduce using rule 54 (equalityExpression -> relacionalExpression .)
    RPAREN          reduce using rule 54 (equalityExpression -> relacionalExpression .)
    RCON            reduce using rule 54 (equalityExpression -> relacionalExpression .)
    PONTOS          reduce using rule 54 (equalityExpression -> relacionalExpression .)
    MENOR           shift and go to state 105
    MAIOR           shift and go to state 106
    MENORI          shift and go to state 107
    MAIORI          shift and go to state 108


state 59

    (57) relacionalExpression -> addExpression .
    (63) addExpression -> addExpression . SOMA multExpression
    (64) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 57 (relacionalExpression -> addExpression .)
    MAIOR           reduce using rule 57 (relacionalExpression -> addExpression .)
    MENORI          reduce using rule 57 (relacionalExpression -> addExpression .)
    MAIORI          reduce using rule 57 (relacionalExpression -> addExpression .)
    IGUAL           reduce using rule 57 (relacionalExpression -> addExpression .)
    NEG             reduce using rule 57 (relacionalExpression -> addExpression .)
    AND             reduce using rule 57 (relacionalExpression -> addExpression .)
    OR              reduce using rule 57 (relacionalExpression -> addExpression .)
    PCOMMA          reduce using rule 57 (relacionalExpression -> addExpression .)
    COMMA           reduce using rule 57 (relacionalExpression -> addExpression .)
    RPAREN          reduce using rule 57 (relacionalExpression -> addExpression .)
    RCON            reduce using rule 57 (relacionalExpression -> addExpression .)
    PONTOS          reduce using rule 57 (relacionalExpression -> addExpression .)
    SOMA            shift and go to state 109
    SUBTRAIR        shift and go to state 110


state 60

    (62) addExpression -> multExpression .
    (66) multExpression -> multExpression . VEZES unaryExpression
    (67) multExpression -> multExpression . DIVIDIR unaryExpression
    (68) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 62 (addExpression -> multExpression .)
    SUBTRAIR        reduce using rule 62 (addExpression -> multExpression .)
    MENOR           reduce using rule 62 (addExpression -> multExpression .)
    MAIOR           reduce using rule 62 (addExpression -> multExpression .)
    MENORI          reduce using rule 62 (addExpression -> multExpression .)
    MAIORI          reduce using rule 62 (addExpression -> multExpression .)
    IGUAL           reduce using rule 62 (addExpression -> multExpression .)
    NEG             reduce using rule 62 (addExpression -> multExpression .)
    AND             reduce using rule 62 (addExpression -> multExpression .)
    OR              reduce using rule 62 (addExpression -> multExpression .)
    PCOMMA          reduce using rule 62 (addExpression -> multExpression .)
    COMMA           reduce using rule 62 (addExpression -> multExpression .)
    RPAREN          reduce using rule 62 (addExpression -> multExpression .)
    RCON            reduce using rule 62 (addExpression -> multExpression .)
    PONTOS          reduce using rule 62 (addExpression -> multExpression .)
    VEZES           shift and go to state 111
    DIVIDIR         shift and go to state 112
    RESTO           shift and go to state 113


state 61

    (65) multExpression -> unaryExpression .
    (71) unaryExpression -> unaryExpression . SOMASOMA
    (72) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 65 (multExpression -> unaryExpression .)
    DIVIDIR         reduce using rule 65 (multExpression -> unaryExpression .)
    RESTO           reduce using rule 65 (multExpression -> unaryExpression .)
    SOMA            reduce using rule 65 (multExpression -> unaryExpression .)
    SUBTRAIR        reduce using rule 65 (multExpression -> unaryExpression .)
    MENOR           reduce using rule 65 (multExpression -> unaryExpression .)
    MAIOR           reduce using rule 65 (multExpression -> unaryExpression .)
    MENORI          reduce using rule 65 (multExpression -> unaryExpression .)
    MAIORI          reduce using rule 65 (multExpression -> unaryExpression .)
    IGUAL           reduce using rule 65 (multExpression -> unaryExpression .)
    NEG             reduce using rule 65 (multExpression -> unaryExpression .)
    AND             reduce using rule 65 (multExpression -> unaryExpression .)
    OR              reduce using rule 65 (multExpression -> unaryExpression .)
    PCOMMA          reduce using rule 65 (multExpression -> unaryExpression .)
    COMMA           reduce using rule 65 (multExpression -> unaryExpression .)
    RPAREN          reduce using rule 65 (multExpression -> unaryExpression .)
    RCON            reduce using rule 65 (multExpression -> unaryExpression .)
    PONTOS          reduce using rule 65 (multExpression -> unaryExpression .)
    SOMASOMA        shift and go to state 114
    SUBSUB          shift and go to state 115


state 62

    (69) unaryExpression -> primary .

    SOMASOMA        reduce using rule 69 (unaryExpression -> primary .)
    SUBSUB          reduce using rule 69 (unaryExpression -> primary .)
    VEZES           reduce using rule 69 (unaryExpression -> primary .)
    DIVIDIR         reduce using rule 69 (unaryExpression -> primary .)
    RESTO           reduce using rule 69 (unaryExpression -> primary .)
    SOMA            reduce using rule 69 (unaryExpression -> primary .)
    SUBTRAIR        reduce using rule 69 (unaryExpression -> primary .)
    MENOR           reduce using rule 69 (unaryExpression -> primary .)
    MAIOR           reduce using rule 69 (unaryExpression -> primary .)
    MENORI          reduce using rule 69 (unaryExpression -> primary .)
    MAIORI          reduce using rule 69 (unaryExpression -> primary .)
    IGUAL           reduce using rule 69 (unaryExpression -> primary .)
    NEG             reduce using rule 69 (unaryExpression -> primary .)
    AND             reduce using rule 69 (unaryExpression -> primary .)
    OR              reduce using rule 69 (unaryExpression -> primary .)
    PCOMMA          reduce using rule 69 (unaryExpression -> primary .)
    COMMA           reduce using rule 69 (unaryExpression -> primary .)
    RPAREN          reduce using rule 69 (unaryExpression -> primary .)
    RCON            reduce using rule 69 (unaryExpression -> primary .)
    PONTOS          reduce using rule 69 (unaryExpression -> primary .)


state 63

    (70) unaryExpression -> functionCall .

    SOMASOMA        reduce using rule 70 (unaryExpression -> functionCall .)
    SUBSUB          reduce using rule 70 (unaryExpression -> functionCall .)
    VEZES           reduce using rule 70 (unaryExpression -> functionCall .)
    DIVIDIR         reduce using rule 70 (unaryExpression -> functionCall .)
    RESTO           reduce using rule 70 (unaryExpression -> functionCall .)
    SOMA            reduce using rule 70 (unaryExpression -> functionCall .)
    SUBTRAIR        reduce using rule 70 (unaryExpression -> functionCall .)
    MENOR           reduce using rule 70 (unaryExpression -> functionCall .)
    MAIOR           reduce using rule 70 (unaryExpression -> functionCall .)
    MENORI          reduce using rule 70 (unaryExpression -> functionCall .)
    MAIORI          reduce using rule 70 (unaryExpression -> functionCall .)
    IGUAL           reduce using rule 70 (unaryExpression -> functionCall .)
    NEG             reduce using rule 70 (unaryExpression -> functionCall .)
    AND             reduce using rule 70 (unaryExpression -> functionCall .)
    OR              reduce using rule 70 (unaryExpression -> functionCall .)
    PCOMMA          reduce using rule 70 (unaryExpression -> functionCall .)
    COMMA           reduce using rule 70 (unaryExpression -> functionCall .)
    RPAREN          reduce using rule 70 (unaryExpression -> functionCall .)
    RCON            reduce using rule 70 (unaryExpression -> functionCall .)
    PONTOS          reduce using rule 70 (unaryExpression -> functionCall .)


state 64

    (74) primary -> literal .

    SOMASOMA        reduce using rule 74 (primary -> literal .)
    SUBSUB          reduce using rule 74 (primary -> literal .)
    VEZES           reduce using rule 74 (primary -> literal .)
    DIVIDIR         reduce using rule 74 (primary -> literal .)
    RESTO           reduce using rule 74 (primary -> literal .)
    SOMA            reduce using rule 74 (primary -> literal .)
    SUBTRAIR        reduce using rule 74 (primary -> literal .)
    MENOR           reduce using rule 74 (primary -> literal .)
    MAIOR           reduce using rule 74 (primary -> literal .)
    MENORI          reduce using rule 74 (primary -> literal .)
    MAIORI          reduce using rule 74 (primary -> literal .)
    IGUAL           reduce using rule 74 (primary -> literal .)
    NEG             reduce using rule 74 (primary -> literal .)
    AND             reduce using rule 74 (primary -> literal .)
    OR              reduce using rule 74 (primary -> literal .)
    PCOMMA          reduce using rule 74 (primary -> literal .)
    COMMA           reduce using rule 74 (primary -> literal .)
    RPAREN          reduce using rule 74 (primary -> literal .)
    RCON            reduce using rule 74 (primary -> literal .)
    PONTOS          reduce using rule 74 (primary -> literal .)


state 65

    (73) functionCall -> functionSignature .

    SOMASOMA        reduce using rule 73 (functionCall -> functionSignature .)
    SUBSUB          reduce using rule 73 (functionCall -> functionSignature .)
    VEZES           reduce using rule 73 (functionCall -> functionSignature .)
    DIVIDIR         reduce using rule 73 (functionCall -> functionSignature .)
    RESTO           reduce using rule 73 (functionCall -> functionSignature .)
    SOMA            reduce using rule 73 (functionCall -> functionSignature .)
    SUBTRAIR        reduce using rule 73 (functionCall -> functionSignature .)
    MENOR           reduce using rule 73 (functionCall -> functionSignature .)
    MAIOR           reduce using rule 73 (functionCall -> functionSignature .)
    MENORI          reduce using rule 73 (functionCall -> functionSignature .)
    MAIORI          reduce using rule 73 (functionCall -> functionSignature .)
    IGUAL           reduce using rule 73 (functionCall -> functionSignature .)
    NEG             reduce using rule 73 (functionCall -> functionSignature .)
    AND             reduce using rule 73 (functionCall -> functionSignature .)
    OR              reduce using rule 73 (functionCall -> functionSignature .)
    PCOMMA          reduce using rule 73 (functionCall -> functionSignature .)
    COMMA           reduce using rule 73 (functionCall -> functionSignature .)
    RPAREN          reduce using rule 73 (functionCall -> functionSignature .)
    RCON            reduce using rule 73 (functionCall -> functionSignature .)
    PONTOS          reduce using rule 73 (functionCall -> functionSignature .)


state 66

    (78) literal -> booleanLiteral .

    SOMASOMA        reduce using rule 78 (literal -> booleanLiteral .)
    SUBSUB          reduce using rule 78 (literal -> booleanLiteral .)
    VEZES           reduce using rule 78 (literal -> booleanLiteral .)
    DIVIDIR         reduce using rule 78 (literal -> booleanLiteral .)
    RESTO           reduce using rule 78 (literal -> booleanLiteral .)
    SOMA            reduce using rule 78 (literal -> booleanLiteral .)
    SUBTRAIR        reduce using rule 78 (literal -> booleanLiteral .)
    MENOR           reduce using rule 78 (literal -> booleanLiteral .)
    MAIOR           reduce using rule 78 (literal -> booleanLiteral .)
    MENORI          reduce using rule 78 (literal -> booleanLiteral .)
    MAIORI          reduce using rule 78 (literal -> booleanLiteral .)
    IGUAL           reduce using rule 78 (literal -> booleanLiteral .)
    NEG             reduce using rule 78 (literal -> booleanLiteral .)
    AND             reduce using rule 78 (literal -> booleanLiteral .)
    OR              reduce using rule 78 (literal -> booleanLiteral .)
    PCOMMA          reduce using rule 78 (literal -> booleanLiteral .)
    COMMA           reduce using rule 78 (literal -> booleanLiteral .)
    RPAREN          reduce using rule 78 (literal -> booleanLiteral .)
    RCON            reduce using rule 78 (literal -> booleanLiteral .)
    PONTOS          reduce using rule 78 (literal -> booleanLiteral .)


state 67

    (79) literal -> NUMBER .

    SOMASOMA        reduce using rule 79 (literal -> NUMBER .)
    SUBSUB          reduce using rule 79 (literal -> NUMBER .)
    VEZES           reduce using rule 79 (literal -> NUMBER .)
    DIVIDIR         reduce using rule 79 (literal -> NUMBER .)
    RESTO           reduce using rule 79 (literal -> NUMBER .)
    SOMA            reduce using rule 79 (literal -> NUMBER .)
    SUBTRAIR        reduce using rule 79 (literal -> NUMBER .)
    MENOR           reduce using rule 79 (literal -> NUMBER .)
    MAIOR           reduce using rule 79 (literal -> NUMBER .)
    MENORI          reduce using rule 79 (literal -> NUMBER .)
    MAIORI          reduce using rule 79 (literal -> NUMBER .)
    IGUAL           reduce using rule 79 (literal -> NUMBER .)
    NEG             reduce using rule 79 (literal -> NUMBER .)
    AND             reduce using rule 79 (literal -> NUMBER .)
    OR              reduce using rule 79 (literal -> NUMBER .)
    PCOMMA          reduce using rule 79 (literal -> NUMBER .)
    COMMA           reduce using rule 79 (literal -> NUMBER .)
    RPAREN          reduce using rule 79 (literal -> NUMBER .)
    RCON            reduce using rule 79 (literal -> NUMBER .)
    PONTOS          reduce using rule 79 (literal -> NUMBER .)


state 68

    (80) literal -> LITERAL_STRING .

    SOMASOMA        reduce using rule 80 (literal -> LITERAL_STRING .)
    SUBSUB          reduce using rule 80 (literal -> LITERAL_STRING .)
    VEZES           reduce using rule 80 (literal -> LITERAL_STRING .)
    DIVIDIR         reduce using rule 80 (literal -> LITERAL_STRING .)
    RESTO           reduce using rule 80 (literal -> LITERAL_STRING .)
    SOMA            reduce using rule 80 (literal -> LITERAL_STRING .)
    SUBTRAIR        reduce using rule 80 (literal -> LITERAL_STRING .)
    MENOR           reduce using rule 80 (literal -> LITERAL_STRING .)
    MAIOR           reduce using rule 80 (literal -> LITERAL_STRING .)
    MENORI          reduce using rule 80 (literal -> LITERAL_STRING .)
    MAIORI          reduce using rule 80 (literal -> LITERAL_STRING .)
    IGUAL           reduce using rule 80 (literal -> LITERAL_STRING .)
    NEG             reduce using rule 80 (literal -> LITERAL_STRING .)
    AND             reduce using rule 80 (literal -> LITERAL_STRING .)
    OR              reduce using rule 80 (literal -> LITERAL_STRING .)
    PCOMMA          reduce using rule 80 (literal -> LITERAL_STRING .)
    COMMA           reduce using rule 80 (literal -> LITERAL_STRING .)
    RPAREN          reduce using rule 80 (literal -> LITERAL_STRING .)
    RCON            reduce using rule 80 (literal -> LITERAL_STRING .)
    PONTOS          reduce using rule 80 (literal -> LITERAL_STRING .)


state 69

    (83) booleanLiteral -> TRUE .

    SOMASOMA        reduce using rule 83 (booleanLiteral -> TRUE .)
    SUBSUB          reduce using rule 83 (booleanLiteral -> TRUE .)
    VEZES           reduce using rule 83 (booleanLiteral -> TRUE .)
    DIVIDIR         reduce using rule 83 (booleanLiteral -> TRUE .)
    RESTO           reduce using rule 83 (booleanLiteral -> TRUE .)
    SOMA            reduce using rule 83 (booleanLiteral -> TRUE .)
    SUBTRAIR        reduce using rule 83 (booleanLiteral -> TRUE .)
    MENOR           reduce using rule 83 (booleanLiteral -> TRUE .)
    MAIOR           reduce using rule 83 (booleanLiteral -> TRUE .)
    MENORI          reduce using rule 83 (booleanLiteral -> TRUE .)
    MAIORI          reduce using rule 83 (booleanLiteral -> TRUE .)
    IGUAL           reduce using rule 83 (booleanLiteral -> TRUE .)
    NEG             reduce using rule 83 (booleanLiteral -> TRUE .)
    AND             reduce using rule 83 (booleanLiteral -> TRUE .)
    OR              reduce using rule 83 (booleanLiteral -> TRUE .)
    PCOMMA          reduce using rule 83 (booleanLiteral -> TRUE .)
    COMMA           reduce using rule 83 (booleanLiteral -> TRUE .)
    RPAREN          reduce using rule 83 (booleanLiteral -> TRUE .)
    RCON            reduce using rule 83 (booleanLiteral -> TRUE .)
    PONTOS          reduce using rule 83 (booleanLiteral -> TRUE .)


state 70

    (84) booleanLiteral -> FALSE .

    SOMASOMA        reduce using rule 84 (booleanLiteral -> FALSE .)
    SUBSUB          reduce using rule 84 (booleanLiteral -> FALSE .)
    VEZES           reduce using rule 84 (booleanLiteral -> FALSE .)
    DIVIDIR         reduce using rule 84 (booleanLiteral -> FALSE .)
    RESTO           reduce using rule 84 (booleanLiteral -> FALSE .)
    SOMA            reduce using rule 84 (booleanLiteral -> FALSE .)
    SUBTRAIR        reduce using rule 84 (booleanLiteral -> FALSE .)
    MENOR           reduce using rule 84 (booleanLiteral -> FALSE .)
    MAIOR           reduce using rule 84 (booleanLiteral -> FALSE .)
    MENORI          reduce using rule 84 (booleanLiteral -> FALSE .)
    MAIORI          reduce using rule 84 (booleanLiteral -> FALSE .)
    IGUAL           reduce using rule 84 (booleanLiteral -> FALSE .)
    NEG             reduce using rule 84 (booleanLiteral -> FALSE .)
    AND             reduce using rule 84 (booleanLiteral -> FALSE .)
    OR              reduce using rule 84 (booleanLiteral -> FALSE .)
    PCOMMA          reduce using rule 84 (booleanLiteral -> FALSE .)
    COMMA           reduce using rule 84 (booleanLiteral -> FALSE .)
    RPAREN          reduce using rule 84 (booleanLiteral -> FALSE .)
    RCON            reduce using rule 84 (booleanLiteral -> FALSE .)
    PONTOS          reduce using rule 84 (booleanLiteral -> FALSE .)


state 71

    (18) formalParameterList -> LPAREN RPAREN .

    LCHAV           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    SOMASOMA        reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    SUBSUB          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    VEZES           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    DIVIDIR         reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    RESTO           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    SOMA            reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    SUBTRAIR        reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    MENOR           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    MAIOR           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    MENORI          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    MAIORI          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    IGUAL           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    NEG             reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    AND             reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    OR              reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    PCOMMA          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    COMMA           reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    RPAREN          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    RCON            reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)
    PONTOS          reduce using rule 18 (formalParameterList -> LPAREN RPAREN .)


state 72

    (19) formalParameterList -> LPAREN normalFormalParameters . RPAREN

    RPAREN          shift and go to state 116


state 73

    (20) normalFormalParameters -> simpleFormalParameter .
    (21) normalFormalParameters -> simpleFormalParameter . COMMA normalFormalParameters

    RPAREN          reduce using rule 20 (normalFormalParameters -> simpleFormalParameter .)
    COMMA           shift and go to state 117


state 74

    (22) simpleFormalParameter -> ID .
    (76) literal -> ID .
    (16) functionSignature -> ID . formalParameterList
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

  ! reduce/reduce conflict for COMMA resolved using rule 22 (simpleFormalParameter -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (simpleFormalParameter -> ID .)
    COMMA           reduce using rule 22 (simpleFormalParameter -> ID .)
    RPAREN          reduce using rule 22 (simpleFormalParameter -> ID .)
    SOMASOMA        reduce using rule 76 (literal -> ID .)
    SUBSUB          reduce using rule 76 (literal -> ID .)
    VEZES           reduce using rule 76 (literal -> ID .)
    DIVIDIR         reduce using rule 76 (literal -> ID .)
    RESTO           reduce using rule 76 (literal -> ID .)
    SOMA            reduce using rule 76 (literal -> ID .)
    SUBTRAIR        reduce using rule 76 (literal -> ID .)
    MENOR           reduce using rule 76 (literal -> ID .)
    MAIOR           reduce using rule 76 (literal -> ID .)
    MENORI          reduce using rule 76 (literal -> ID .)
    MAIORI          reduce using rule 76 (literal -> ID .)
    IGUAL           reduce using rule 76 (literal -> ID .)
    NEG             reduce using rule 76 (literal -> ID .)
    AND             reduce using rule 76 (literal -> ID .)
    OR              reduce using rule 76 (literal -> ID .)
    LPAREN          shift and go to state 20

  ! COMMA           [ reduce using rule 76 (literal -> ID .) ]
  ! RPAREN          [ reduce using rule 76 (literal -> ID .) ]

    formalParameterList            shift and go to state 19

state 75

    (23) simpleFormalParameter -> voidOrType . ID
    (17) functionSignature -> voidOrType . ID formalParameterList

    ID              shift and go to state 118


state 76

    (24) simpleFormalParameter -> expression .

    COMMA           reduce using rule 24 (simpleFormalParameter -> expression .)
    RPAREN          reduce using rule 24 (simpleFormalParameter -> expression .)


state 77

    (77) literal -> listLiteral .

    SOMASOMA        reduce using rule 77 (literal -> listLiteral .)
    SUBSUB          reduce using rule 77 (literal -> listLiteral .)
    VEZES           reduce using rule 77 (literal -> listLiteral .)
    DIVIDIR         reduce using rule 77 (literal -> listLiteral .)
    RESTO           reduce using rule 77 (literal -> listLiteral .)
    SOMA            reduce using rule 77 (literal -> listLiteral .)
    SUBTRAIR        reduce using rule 77 (literal -> listLiteral .)
    MENOR           reduce using rule 77 (literal -> listLiteral .)
    MAIOR           reduce using rule 77 (literal -> listLiteral .)
    MENORI          reduce using rule 77 (literal -> listLiteral .)
    MAIORI          reduce using rule 77 (literal -> listLiteral .)
    IGUAL           reduce using rule 77 (literal -> listLiteral .)
    NEG             reduce using rule 77 (literal -> listLiteral .)
    AND             reduce using rule 77 (literal -> listLiteral .)
    OR              reduce using rule 77 (literal -> listLiteral .)
    COMMA           reduce using rule 77 (literal -> listLiteral .)
    RPAREN          reduce using rule 77 (literal -> listLiteral .)
    PCOMMA          reduce using rule 77 (literal -> listLiteral .)
    RCON            reduce using rule 77 (literal -> listLiteral .)
    PONTOS          reduce using rule 77 (literal -> listLiteral .)


state 78

    (17) functionSignature -> voidOrType ID formalParameterList .

    LCHAV           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    SOMASOMA        reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    SUBSUB          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    VEZES           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    DIVIDIR         reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    RESTO           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    SOMA            reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    SUBTRAIR        reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    MENOR           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    MAIOR           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    MENORI          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    MAIORI          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    IGUAL           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    NEG             reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    AND             reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    OR              reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    PCOMMA          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    COMMA           reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    RPAREN          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    RCON            reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)
    PONTOS          reduce using rule 17 (functionSignature -> voidOrType ID formalParameterList .)


state 79

    (26) block -> LCHAV statements RCHAV .

    ID              reduce using rule 26 (block -> LCHAV statements RCHAV .)
    VOID            reduce using rule 26 (block -> LCHAV statements RCHAV .)
    VAR             reduce using rule 26 (block -> LCHAV statements RCHAV .)
    INT             reduce using rule 26 (block -> LCHAV statements RCHAV .)
    FLOAT           reduce using rule 26 (block -> LCHAV statements RCHAV .)
    CHAR            reduce using rule 26 (block -> LCHAV statements RCHAV .)
    STRING          reduce using rule 26 (block -> LCHAV statements RCHAV .)
    $end            reduce using rule 26 (block -> LCHAV statements RCHAV .)
    LCHAV           reduce using rule 26 (block -> LCHAV statements RCHAV .)
    PCOMMA          reduce using rule 26 (block -> LCHAV statements RCHAV .)
    RETURN          reduce using rule 26 (block -> LCHAV statements RCHAV .)
    IF              reduce using rule 26 (block -> LCHAV statements RCHAV .)
    FOR             reduce using rule 26 (block -> LCHAV statements RCHAV .)
    WHILE           reduce using rule 26 (block -> LCHAV statements RCHAV .)
    DO              reduce using rule 26 (block -> LCHAV statements RCHAV .)
    SWITCH          reduce using rule 26 (block -> LCHAV statements RCHAV .)
    BREAK           reduce using rule 26 (block -> LCHAV statements RCHAV .)
    LCON            reduce using rule 26 (block -> LCHAV statements RCHAV .)
    LPAREN          reduce using rule 26 (block -> LCHAV statements RCHAV .)
    NUMBER          reduce using rule 26 (block -> LCHAV statements RCHAV .)
    LITERAL_STRING  reduce using rule 26 (block -> LCHAV statements RCHAV .)
    TRUE            reduce using rule 26 (block -> LCHAV statements RCHAV .)
    FALSE           reduce using rule 26 (block -> LCHAV statements RCHAV .)
    RCHAV           reduce using rule 26 (block -> LCHAV statements RCHAV .)
    CASE            reduce using rule 26 (block -> LCHAV statements RCHAV .)
    DEFAULT         reduce using rule 26 (block -> LCHAV statements RCHAV .)
    ELSE            reduce using rule 26 (block -> LCHAV statements RCHAV .)


state 80

    (28) statements -> statement statements .

    RCHAV           reduce using rule 28 (statements -> statement statements .)
    CASE            reduce using rule 28 (statements -> statement statements .)
    ID              reduce using rule 28 (statements -> statement statements .)
    DEFAULT         reduce using rule 28 (statements -> statement statements .)


state 81

    (48) expressionStatement -> expression PCOMMA .

    LCHAV           reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    PCOMMA          reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    RETURN          reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    IF              reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    FOR             reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    WHILE           reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    DO              reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    SWITCH          reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    BREAK           reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    ID              reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    LCON            reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    VOID            reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    VAR             reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    INT             reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    FLOAT           reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    CHAR            reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    STRING          reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    LPAREN          reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    NUMBER          reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    LITERAL_STRING  reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    TRUE            reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    FALSE           reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    RCHAV           reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    CASE            reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    DEFAULT         reduce using rule 48 (expressionStatement -> expression PCOMMA .)
    ELSE            reduce using rule 48 (expressionStatement -> expression PCOMMA .)


state 82

    (41) localVariableDeclaration -> initializedVariableDeclaration PCOMMA .

    LCHAV           reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    PCOMMA          reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    RETURN          reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    IF              reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FOR             reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    WHILE           reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    DO              reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    SWITCH          reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    BREAK           reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    ID              reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LCON            reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    VOID            reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    VAR             reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    INT             reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FLOAT           reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    CHAR            reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    STRING          reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LPAREN          reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    NUMBER          reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LITERAL_STRING  reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    TRUE            reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FALSE           reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    RCHAV           reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    CASE            reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    DEFAULT         reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    ELSE            reduce using rule 41 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)


state 83

    (88) returnStatement -> RETURN PCOMMA .

    LCHAV           reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    PCOMMA          reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    RETURN          reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    IF              reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    FOR             reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    WHILE           reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    DO              reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    SWITCH          reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    BREAK           reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    ID              reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    LCON            reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    VOID            reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    VAR             reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    INT             reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    FLOAT           reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    CHAR            reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    STRING          reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    LPAREN          reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    NUMBER          reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    LITERAL_STRING  reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    TRUE            reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    FALSE           reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    RCHAV           reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    CASE            reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    DEFAULT         reduce using rule 88 (returnStatement -> RETURN PCOMMA .)
    ELSE            reduce using rule 88 (returnStatement -> RETURN PCOMMA .)


state 84

    (89) returnStatement -> RETURN expression . PCOMMA

    PCOMMA          shift and go to state 119


state 85

    (76) literal -> ID .
    (16) functionSignature -> ID . formalParameterList
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    SOMASOMA        reduce using rule 76 (literal -> ID .)
    SUBSUB          reduce using rule 76 (literal -> ID .)
    VEZES           reduce using rule 76 (literal -> ID .)
    DIVIDIR         reduce using rule 76 (literal -> ID .)
    RESTO           reduce using rule 76 (literal -> ID .)
    SOMA            reduce using rule 76 (literal -> ID .)
    SUBTRAIR        reduce using rule 76 (literal -> ID .)
    MENOR           reduce using rule 76 (literal -> ID .)
    MAIOR           reduce using rule 76 (literal -> ID .)
    MENORI          reduce using rule 76 (literal -> ID .)
    MAIORI          reduce using rule 76 (literal -> ID .)
    IGUAL           reduce using rule 76 (literal -> ID .)
    NEG             reduce using rule 76 (literal -> ID .)
    AND             reduce using rule 76 (literal -> ID .)
    OR              reduce using rule 76 (literal -> ID .)
    PCOMMA          reduce using rule 76 (literal -> ID .)
    RPAREN          reduce using rule 76 (literal -> ID .)
    COMMA           reduce using rule 76 (literal -> ID .)
    RCON            reduce using rule 76 (literal -> ID .)
    PONTOS          reduce using rule 76 (literal -> ID .)
    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 19

state 86

    (17) functionSignature -> voidOrType . ID formalParameterList

    ID              shift and go to state 120


state 87

    (90) ifStatement -> IF LPAREN . expression RPAREN statement
    (91) ifStatement -> IF LPAREN . expression RPAREN statement ELSE statement
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 121
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 88

    (75) primary -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 122


state 89

    (92) forStatement -> FOR LPAREN . forLoopParts RPAREN statement
    (93) forLoopParts -> . forInitializerStatement PCOMMA
    (94) forLoopParts -> . forInitializerStatement PCOMMA expressionList
    (95) forLoopParts -> . forInitializerStatement expression PCOMMA
    (96) forLoopParts -> . forInitializerStatement expression PCOMMA expressionList
    (97) forInitializerStatement -> . localVariableDeclaration
    (98) forInitializerStatement -> . PCOMMA
    (99) forInitializerStatement -> . expression PCOMMA
    (41) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (49) expression -> . orExpression
    (42) initializedVariableDeclaration -> . declaredIdentifier
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (44) initializedVariableDeclaration -> . listLiteral ATRIBUIR expression
    (45) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (46) initializedVariableDeclaration -> . listLiteral ATRIBUIR listLiteral
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    PCOMMA          shift and go to state 125
    ID              shift and go to state 50
    LCON            shift and go to state 56
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    forLoopParts                   shift and go to state 123
    forInitializerStatement        shift and go to state 124
    expression                     shift and go to state 126
    localVariableDeclaration       shift and go to state 127
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    listLiteral                    shift and go to state 53
    andExpression                  shift and go to state 54
    voidOrType                     shift and go to state 55
    equalityExpression             shift and go to state 57
    type                           shift and go to state 7
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66

state 90

    (100) whileStatement -> WHILE LPAREN . expression RPAREN statement
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 128
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 91

    (101) doStatement -> DO statement . WHILE LPAREN expression RPAREN PCOMMA

    WHILE           shift and go to state 129


state 92

    (102) switchStatement -> SWITCH LPAREN . expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> SWITCH LPAREN . expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 130
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 93

    (111) breakStatement -> BREAK PCOMMA .

    LCHAV           reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    PCOMMA          reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    RETURN          reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    IF              reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    FOR             reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    WHILE           reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    DO              reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    SWITCH          reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    BREAK           reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    ID              reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    LCON            reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    VOID            reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    VAR             reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    INT             reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    FLOAT           reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    CHAR            reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    STRING          reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    LPAREN          reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    NUMBER          reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    LITERAL_STRING  reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    TRUE            reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    FALSE           reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    RCHAV           reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    CASE            reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    DEFAULT         reduce using rule 111 (breakStatement -> BREAK PCOMMA .)
    ELSE            reduce using rule 111 (breakStatement -> BREAK PCOMMA .)


state 94

    (112) breakStatement -> BREAK ID . PCOMMA

    PCOMMA          shift and go to state 131


state 95

    (51) orExpression -> orExpression OR . andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    andExpression                  shift and go to state 132
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 96

    (43) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR . expression
    (45) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR . listLiteral
    (49) expression -> . orExpression
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LCON            shift and go to state 56
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 133
    listLiteral                    shift and go to state 134
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 97

    (44) initializedVariableDeclaration -> listLiteral ATRIBUIR . expression
    (46) initializedVariableDeclaration -> listLiteral ATRIBUIR . listLiteral
    (49) expression -> . orExpression
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LCON            shift and go to state 56
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    listLiteral                    shift and go to state 135
    expression                     shift and go to state 136
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 98

    (53) andExpression -> andExpression AND . equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    equalityExpression             shift and go to state 137
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 99

    (7) declaredIdentifier -> voidOrType ID .
    (17) functionSignature -> voidOrType ID . formalParameterList
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    ATRIBUIR        reduce using rule 7 (declaredIdentifier -> voidOrType ID .)
    PCOMMA          reduce using rule 7 (declaredIdentifier -> voidOrType ID .)
    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 78

state 100

    (81) listLiteral -> LCON RCON .

    ATRIBUIR        reduce using rule 81 (listLiteral -> LCON RCON .)
    SOMASOMA        reduce using rule 81 (listLiteral -> LCON RCON .)
    SUBSUB          reduce using rule 81 (listLiteral -> LCON RCON .)
    VEZES           reduce using rule 81 (listLiteral -> LCON RCON .)
    DIVIDIR         reduce using rule 81 (listLiteral -> LCON RCON .)
    RESTO           reduce using rule 81 (listLiteral -> LCON RCON .)
    SOMA            reduce using rule 81 (listLiteral -> LCON RCON .)
    SUBTRAIR        reduce using rule 81 (listLiteral -> LCON RCON .)
    MENOR           reduce using rule 81 (listLiteral -> LCON RCON .)
    MAIOR           reduce using rule 81 (listLiteral -> LCON RCON .)
    MENORI          reduce using rule 81 (listLiteral -> LCON RCON .)
    MAIORI          reduce using rule 81 (listLiteral -> LCON RCON .)
    IGUAL           reduce using rule 81 (listLiteral -> LCON RCON .)
    NEG             reduce using rule 81 (listLiteral -> LCON RCON .)
    AND             reduce using rule 81 (listLiteral -> LCON RCON .)
    OR              reduce using rule 81 (listLiteral -> LCON RCON .)
    PCOMMA          reduce using rule 81 (listLiteral -> LCON RCON .)
    COMMA           reduce using rule 81 (listLiteral -> LCON RCON .)
    RPAREN          reduce using rule 81 (listLiteral -> LCON RCON .)
    RCON            reduce using rule 81 (listLiteral -> LCON RCON .)
    PONTOS          reduce using rule 81 (listLiteral -> LCON RCON .)


state 101

    (82) listLiteral -> LCON expressionList . RCON

    RCON            shift and go to state 138


state 102

    (85) expressionList -> expression . COMMA
    (86) expressionList -> expression .
    (87) expressionList -> expression . COMMA expressionList

    COMMA           shift and go to state 139
    RCON            reduce using rule 86 (expressionList -> expression .)
    RPAREN          reduce using rule 86 (expressionList -> expression .)


state 103

    (55) equalityExpression -> equalityExpression IGUAL . relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    relacionalExpression           shift and go to state 140
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 104

    (56) equalityExpression -> equalityExpression NEG . relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    relacionalExpression           shift and go to state 141
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 105

    (58) relacionalExpression -> relacionalExpression MENOR . addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    addExpression                  shift and go to state 142
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 106

    (59) relacionalExpression -> relacionalExpression MAIOR . addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    addExpression                  shift and go to state 143
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 107

    (60) relacionalExpression -> relacionalExpression MENORI . addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    addExpression                  shift and go to state 144
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 108

    (61) relacionalExpression -> relacionalExpression MAIORI . addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    addExpression                  shift and go to state 145
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 109

    (63) addExpression -> addExpression SOMA . multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    multExpression                 shift and go to state 146
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 110

    (64) addExpression -> addExpression SUBTRAIR . multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    multExpression                 shift and go to state 147
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 111

    (66) multExpression -> multExpression VEZES . unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    unaryExpression                shift and go to state 148
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 112

    (67) multExpression -> multExpression DIVIDIR . unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    unaryExpression                shift and go to state 149
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 113

    (68) multExpression -> multExpression RESTO . unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    unaryExpression                shift and go to state 150
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 114

    (71) unaryExpression -> unaryExpression SOMASOMA .

    SOMASOMA        reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    SUBSUB          reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    VEZES           reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    DIVIDIR         reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    RESTO           reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    SOMA            reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    SUBTRAIR        reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    MENOR           reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    MAIOR           reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    MENORI          reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    MAIORI          reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    IGUAL           reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    NEG             reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    AND             reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    OR              reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    PCOMMA          reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    COMMA           reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    RPAREN          reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    RCON            reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)
    PONTOS          reduce using rule 71 (unaryExpression -> unaryExpression SOMASOMA .)


state 115

    (72) unaryExpression -> unaryExpression SUBSUB .

    SOMASOMA        reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    SUBSUB          reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    VEZES           reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    DIVIDIR         reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    RESTO           reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    SOMA            reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    SUBTRAIR        reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    MENOR           reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    MAIOR           reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    MENORI          reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    MAIORI          reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    IGUAL           reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    NEG             reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    AND             reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    OR              reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    PCOMMA          reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    COMMA           reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    RPAREN          reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    RCON            reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)
    PONTOS          reduce using rule 72 (unaryExpression -> unaryExpression SUBSUB .)


state 116

    (19) formalParameterList -> LPAREN normalFormalParameters RPAREN .

    LCHAV           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SOMASOMA        reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SUBSUB          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    VEZES           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    DIVIDIR         reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RESTO           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SOMA            reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SUBTRAIR        reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MENOR           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MAIOR           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MENORI          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MAIORI          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    IGUAL           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    NEG             reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    AND             reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    OR              reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    PCOMMA          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    COMMA           reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RPAREN          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RCON            reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    PONTOS          reduce using rule 19 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)


state 117

    (21) normalFormalParameters -> simpleFormalParameter COMMA . normalFormalParameters
    (20) normalFormalParameters -> . simpleFormalParameter
    (21) normalFormalParameters -> . simpleFormalParameter COMMA normalFormalParameters
    (22) simpleFormalParameter -> . ID
    (23) simpleFormalParameter -> . voidOrType ID
    (24) simpleFormalParameter -> . expression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (49) expression -> . orExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    ID              shift and go to state 74
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    simpleFormalParameter          shift and go to state 73
    normalFormalParameters         shift and go to state 151
    voidOrType                     shift and go to state 75
    expression                     shift and go to state 76
    type                           shift and go to state 7
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66

state 118

    (23) simpleFormalParameter -> voidOrType ID .
    (17) functionSignature -> voidOrType ID . formalParameterList
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    COMMA           reduce using rule 23 (simpleFormalParameter -> voidOrType ID .)
    RPAREN          reduce using rule 23 (simpleFormalParameter -> voidOrType ID .)
    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 78

state 119

    (89) returnStatement -> RETURN expression PCOMMA .

    LCHAV           reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    PCOMMA          reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    RETURN          reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    IF              reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    FOR             reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    WHILE           reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    DO              reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    SWITCH          reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    BREAK           reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    ID              reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    LCON            reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    VOID            reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    VAR             reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    INT             reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    FLOAT           reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    CHAR            reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    STRING          reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    LPAREN          reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    NUMBER          reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    LITERAL_STRING  reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    TRUE            reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    FALSE           reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    RCHAV           reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    CASE            reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    DEFAULT         reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)
    ELSE            reduce using rule 89 (returnStatement -> RETURN expression PCOMMA .)


state 120

    (17) functionSignature -> voidOrType ID . formalParameterList
    (18) formalParameterList -> . LPAREN RPAREN
    (19) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 78

state 121

    (90) ifStatement -> IF LPAREN expression . RPAREN statement
    (91) ifStatement -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 152


state 122

    (75) primary -> LPAREN expression RPAREN .

    SOMASOMA        reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    SUBSUB          reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    VEZES           reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    DIVIDIR         reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    RESTO           reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    SOMA            reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    SUBTRAIR        reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    MENORI          reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    MAIORI          reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    IGUAL           reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    NEG             reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    AND             reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    OR              reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    PCOMMA          reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    RCON            reduce using rule 75 (primary -> LPAREN expression RPAREN .)
    PONTOS          reduce using rule 75 (primary -> LPAREN expression RPAREN .)


state 123

    (92) forStatement -> FOR LPAREN forLoopParts . RPAREN statement

    RPAREN          shift and go to state 153


state 124

    (93) forLoopParts -> forInitializerStatement . PCOMMA
    (94) forLoopParts -> forInitializerStatement . PCOMMA expressionList
    (95) forLoopParts -> forInitializerStatement . expression PCOMMA
    (96) forLoopParts -> forInitializerStatement . expression PCOMMA expressionList
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    PCOMMA          shift and go to state 154
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 155
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 125

    (98) forInitializerStatement -> PCOMMA .

    PCOMMA          reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    LPAREN          reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    ID              reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    NUMBER          reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    LITERAL_STRING  reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    LCON            reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    TRUE            reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    FALSE           reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    VOID            reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    VAR             reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    INT             reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    FLOAT           reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    CHAR            reduce using rule 98 (forInitializerStatement -> PCOMMA .)
    STRING          reduce using rule 98 (forInitializerStatement -> PCOMMA .)


state 126

    (99) forInitializerStatement -> expression . PCOMMA

    PCOMMA          shift and go to state 156


state 127

    (97) forInitializerStatement -> localVariableDeclaration .

    PCOMMA          reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    LPAREN          reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    ID              reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    NUMBER          reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    LITERAL_STRING  reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    LCON            reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    TRUE            reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    FALSE           reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    VOID            reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    VAR             reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    INT             reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    FLOAT           reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    CHAR            reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)
    STRING          reduce using rule 97 (forInitializerStatement -> localVariableDeclaration .)


state 128

    (100) whileStatement -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 157


state 129

    (101) doStatement -> DO statement WHILE . LPAREN expression RPAREN PCOMMA

    LPAREN          shift and go to state 158


state 130

    (102) switchStatement -> SWITCH LPAREN expression . RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> SWITCH LPAREN expression . RPAREN LCHAV switchCaseRepetition defaultCase RCHAV

    RPAREN          shift and go to state 159


state 131

    (112) breakStatement -> BREAK ID PCOMMA .

    LCHAV           reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    PCOMMA          reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    RETURN          reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    IF              reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    FOR             reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    WHILE           reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    DO              reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    SWITCH          reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    BREAK           reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    ID              reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    LCON            reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    VOID            reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    VAR             reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    INT             reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    FLOAT           reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    CHAR            reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    STRING          reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    LPAREN          reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    NUMBER          reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    LITERAL_STRING  reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    TRUE            reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    FALSE           reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    RCHAV           reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    CASE            reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    DEFAULT         reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)
    ELSE            reduce using rule 112 (breakStatement -> BREAK ID PCOMMA .)


state 132

    (51) orExpression -> orExpression OR andExpression .
    (53) andExpression -> andExpression . AND equalityExpression

    OR              reduce using rule 51 (orExpression -> orExpression OR andExpression .)
    PCOMMA          reduce using rule 51 (orExpression -> orExpression OR andExpression .)
    COMMA           reduce using rule 51 (orExpression -> orExpression OR andExpression .)
    RPAREN          reduce using rule 51 (orExpression -> orExpression OR andExpression .)
    RCON            reduce using rule 51 (orExpression -> orExpression OR andExpression .)
    PONTOS          reduce using rule 51 (orExpression -> orExpression OR andExpression .)
    AND             shift and go to state 98


state 133

    (43) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression .

    PCOMMA          reduce using rule 43 (initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression .)


state 134

    (45) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR listLiteral .
    (77) literal -> listLiteral .

  ! reduce/reduce conflict for PCOMMA resolved using rule 45 (initializedVariableDeclaration -> declaredIdentifier ATRIBUIR listLiteral .)
    PCOMMA          reduce using rule 45 (initializedVariableDeclaration -> declaredIdentifier ATRIBUIR listLiteral .)
    SOMASOMA        reduce using rule 77 (literal -> listLiteral .)
    SUBSUB          reduce using rule 77 (literal -> listLiteral .)
    VEZES           reduce using rule 77 (literal -> listLiteral .)
    DIVIDIR         reduce using rule 77 (literal -> listLiteral .)
    RESTO           reduce using rule 77 (literal -> listLiteral .)
    SOMA            reduce using rule 77 (literal -> listLiteral .)
    SUBTRAIR        reduce using rule 77 (literal -> listLiteral .)
    MENOR           reduce using rule 77 (literal -> listLiteral .)
    MAIOR           reduce using rule 77 (literal -> listLiteral .)
    MENORI          reduce using rule 77 (literal -> listLiteral .)
    MAIORI          reduce using rule 77 (literal -> listLiteral .)
    IGUAL           reduce using rule 77 (literal -> listLiteral .)
    NEG             reduce using rule 77 (literal -> listLiteral .)
    AND             reduce using rule 77 (literal -> listLiteral .)
    OR              reduce using rule 77 (literal -> listLiteral .)

  ! PCOMMA          [ reduce using rule 77 (literal -> listLiteral .) ]


state 135

    (46) initializedVariableDeclaration -> listLiteral ATRIBUIR listLiteral .
    (77) literal -> listLiteral .

  ! reduce/reduce conflict for PCOMMA resolved using rule 46 (initializedVariableDeclaration -> listLiteral ATRIBUIR listLiteral .)
    PCOMMA          reduce using rule 46 (initializedVariableDeclaration -> listLiteral ATRIBUIR listLiteral .)
    SOMASOMA        reduce using rule 77 (literal -> listLiteral .)
    SUBSUB          reduce using rule 77 (literal -> listLiteral .)
    VEZES           reduce using rule 77 (literal -> listLiteral .)
    DIVIDIR         reduce using rule 77 (literal -> listLiteral .)
    RESTO           reduce using rule 77 (literal -> listLiteral .)
    SOMA            reduce using rule 77 (literal -> listLiteral .)
    SUBTRAIR        reduce using rule 77 (literal -> listLiteral .)
    MENOR           reduce using rule 77 (literal -> listLiteral .)
    MAIOR           reduce using rule 77 (literal -> listLiteral .)
    MENORI          reduce using rule 77 (literal -> listLiteral .)
    MAIORI          reduce using rule 77 (literal -> listLiteral .)
    IGUAL           reduce using rule 77 (literal -> listLiteral .)
    NEG             reduce using rule 77 (literal -> listLiteral .)
    AND             reduce using rule 77 (literal -> listLiteral .)
    OR              reduce using rule 77 (literal -> listLiteral .)

  ! PCOMMA          [ reduce using rule 77 (literal -> listLiteral .) ]


state 136

    (44) initializedVariableDeclaration -> listLiteral ATRIBUIR expression .

    PCOMMA          reduce using rule 44 (initializedVariableDeclaration -> listLiteral ATRIBUIR expression .)


state 137

    (53) andExpression -> andExpression AND equalityExpression .
    (55) equalityExpression -> equalityExpression . IGUAL relacionalExpression
    (56) equalityExpression -> equalityExpression . NEG relacionalExpression

    AND             reduce using rule 53 (andExpression -> andExpression AND equalityExpression .)
    OR              reduce using rule 53 (andExpression -> andExpression AND equalityExpression .)
    PCOMMA          reduce using rule 53 (andExpression -> andExpression AND equalityExpression .)
    COMMA           reduce using rule 53 (andExpression -> andExpression AND equalityExpression .)
    RPAREN          reduce using rule 53 (andExpression -> andExpression AND equalityExpression .)
    RCON            reduce using rule 53 (andExpression -> andExpression AND equalityExpression .)
    PONTOS          reduce using rule 53 (andExpression -> andExpression AND equalityExpression .)
    IGUAL           shift and go to state 103
    NEG             shift and go to state 104


state 138

    (82) listLiteral -> LCON expressionList RCON .

    ATRIBUIR        reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    SOMASOMA        reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    SUBSUB          reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    VEZES           reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    DIVIDIR         reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    RESTO           reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    SOMA            reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    SUBTRAIR        reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    MENOR           reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    MAIOR           reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    MENORI          reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    MAIORI          reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    IGUAL           reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    NEG             reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    AND             reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    OR              reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    PCOMMA          reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    COMMA           reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    RPAREN          reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    RCON            reduce using rule 82 (listLiteral -> LCON expressionList RCON .)
    PONTOS          reduce using rule 82 (listLiteral -> LCON expressionList RCON .)


state 139

    (85) expressionList -> expression COMMA .
    (87) expressionList -> expression COMMA . expressionList
    (85) expressionList -> . expression COMMA
    (86) expressionList -> . expression
    (87) expressionList -> . expression COMMA expressionList
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    RCON            reduce using rule 85 (expressionList -> expression COMMA .)
    RPAREN          reduce using rule 85 (expressionList -> expression COMMA .)
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 102
    expressionList                 shift and go to state 160
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 140

    (55) equalityExpression -> equalityExpression IGUAL relacionalExpression .
    (58) relacionalExpression -> relacionalExpression . MENOR addExpression
    (59) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (60) relacionalExpression -> relacionalExpression . MENORI addExpression
    (61) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 55 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    NEG             reduce using rule 55 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    AND             reduce using rule 55 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    OR              reduce using rule 55 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    PCOMMA          reduce using rule 55 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    COMMA           reduce using rule 55 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    RPAREN          reduce using rule 55 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    RCON            reduce using rule 55 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    PONTOS          reduce using rule 55 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    MENOR           shift and go to state 105
    MAIOR           shift and go to state 106
    MENORI          shift and go to state 107
    MAIORI          shift and go to state 108


state 141

    (56) equalityExpression -> equalityExpression NEG relacionalExpression .
    (58) relacionalExpression -> relacionalExpression . MENOR addExpression
    (59) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (60) relacionalExpression -> relacionalExpression . MENORI addExpression
    (61) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 56 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    NEG             reduce using rule 56 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    AND             reduce using rule 56 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    OR              reduce using rule 56 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    PCOMMA          reduce using rule 56 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    COMMA           reduce using rule 56 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    RPAREN          reduce using rule 56 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    RCON            reduce using rule 56 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    PONTOS          reduce using rule 56 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    MENOR           shift and go to state 105
    MAIOR           shift and go to state 106
    MENORI          shift and go to state 107
    MAIORI          shift and go to state 108


state 142

    (58) relacionalExpression -> relacionalExpression MENOR addExpression .
    (63) addExpression -> addExpression . SOMA multExpression
    (64) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MAIOR           reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MENORI          reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MAIORI          reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    IGUAL           reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    NEG             reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    AND             reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    OR              reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    PCOMMA          reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    COMMA           reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    RPAREN          reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    RCON            reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    PONTOS          reduce using rule 58 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    SOMA            shift and go to state 109
    SUBTRAIR        shift and go to state 110


state 143

    (59) relacionalExpression -> relacionalExpression MAIOR addExpression .
    (63) addExpression -> addExpression . SOMA multExpression
    (64) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MAIOR           reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MENORI          reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MAIORI          reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    IGUAL           reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    NEG             reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    AND             reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    OR              reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    PCOMMA          reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    COMMA           reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    RPAREN          reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    RCON            reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    PONTOS          reduce using rule 59 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    SOMA            shift and go to state 109
    SUBTRAIR        shift and go to state 110


state 144

    (60) relacionalExpression -> relacionalExpression MENORI addExpression .
    (63) addExpression -> addExpression . SOMA multExpression
    (64) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MAIOR           reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MENORI          reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MAIORI          reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    IGUAL           reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    NEG             reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    AND             reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    OR              reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    PCOMMA          reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    COMMA           reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    RPAREN          reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    RCON            reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    PONTOS          reduce using rule 60 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    SOMA            shift and go to state 109
    SUBTRAIR        shift and go to state 110


state 145

    (61) relacionalExpression -> relacionalExpression MAIORI addExpression .
    (63) addExpression -> addExpression . SOMA multExpression
    (64) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MAIOR           reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MENORI          reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MAIORI          reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    IGUAL           reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    NEG             reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    AND             reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    OR              reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    PCOMMA          reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    COMMA           reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    RPAREN          reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    RCON            reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    PONTOS          reduce using rule 61 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    SOMA            shift and go to state 109
    SUBTRAIR        shift and go to state 110


state 146

    (63) addExpression -> addExpression SOMA multExpression .
    (66) multExpression -> multExpression . VEZES unaryExpression
    (67) multExpression -> multExpression . DIVIDIR unaryExpression
    (68) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    SUBTRAIR        reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    MENOR           reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    MAIOR           reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    MENORI          reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    MAIORI          reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    IGUAL           reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    NEG             reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    AND             reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    OR              reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    PCOMMA          reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    COMMA           reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    RPAREN          reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    RCON            reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    PONTOS          reduce using rule 63 (addExpression -> addExpression SOMA multExpression .)
    VEZES           shift and go to state 111
    DIVIDIR         shift and go to state 112
    RESTO           shift and go to state 113


state 147

    (64) addExpression -> addExpression SUBTRAIR multExpression .
    (66) multExpression -> multExpression . VEZES unaryExpression
    (67) multExpression -> multExpression . DIVIDIR unaryExpression
    (68) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    SUBTRAIR        reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    MENOR           reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    MAIOR           reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    MENORI          reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    MAIORI          reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    IGUAL           reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    NEG             reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    AND             reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    OR              reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    PCOMMA          reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    COMMA           reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    RPAREN          reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    RCON            reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    PONTOS          reduce using rule 64 (addExpression -> addExpression SUBTRAIR multExpression .)
    VEZES           shift and go to state 111
    DIVIDIR         shift and go to state 112
    RESTO           shift and go to state 113


state 148

    (66) multExpression -> multExpression VEZES unaryExpression .
    (71) unaryExpression -> unaryExpression . SOMASOMA
    (72) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    DIVIDIR         reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    RESTO           reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    SOMA            reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    SUBTRAIR        reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    MENOR           reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    MAIOR           reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    MENORI          reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    MAIORI          reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    IGUAL           reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    NEG             reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    AND             reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    OR              reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    PCOMMA          reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    COMMA           reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    RPAREN          reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    RCON            reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    PONTOS          reduce using rule 66 (multExpression -> multExpression VEZES unaryExpression .)
    SOMASOMA        shift and go to state 114
    SUBSUB          shift and go to state 115


state 149

    (67) multExpression -> multExpression DIVIDIR unaryExpression .
    (71) unaryExpression -> unaryExpression . SOMASOMA
    (72) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    DIVIDIR         reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RESTO           reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SOMA            reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SUBTRAIR        reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MENOR           reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MAIOR           reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MENORI          reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MAIORI          reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    IGUAL           reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    NEG             reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    AND             reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    OR              reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    PCOMMA          reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    COMMA           reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RPAREN          reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RCON            reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    PONTOS          reduce using rule 67 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SOMASOMA        shift and go to state 114
    SUBSUB          shift and go to state 115


state 150

    (68) multExpression -> multExpression RESTO unaryExpression .
    (71) unaryExpression -> unaryExpression . SOMASOMA
    (72) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    DIVIDIR         reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    RESTO           reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    SOMA            reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    SUBTRAIR        reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    MENOR           reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    MAIOR           reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    MENORI          reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    MAIORI          reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    IGUAL           reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    NEG             reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    AND             reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    OR              reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    PCOMMA          reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    COMMA           reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    RPAREN          reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    RCON            reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    PONTOS          reduce using rule 68 (multExpression -> multExpression RESTO unaryExpression .)
    SOMASOMA        shift and go to state 114
    SUBSUB          shift and go to state 115


state 151

    (21) normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters .

    RPAREN          reduce using rule 21 (normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters .)


state 152

    (90) ifStatement -> IF LPAREN expression RPAREN . statement
    (91) ifStatement -> IF LPAREN expression RPAREN . statement ELSE statement
    (30) statement -> . nonLabelledStatement
    (31) nonLabelledStatement -> . block
    (32) nonLabelledStatement -> . expressionStatement
    (33) nonLabelledStatement -> . localVariableDeclaration
    (34) nonLabelledStatement -> . returnStatement
    (35) nonLabelledStatement -> . ifStatement
    (36) nonLabelledStatement -> . forStatement
    (37) nonLabelledStatement -> . whileStatement
    (38) nonLabelledStatement -> . doStatement
    (39) nonLabelledStatement -> . switchStatement
    (40) nonLabelledStatement -> . breakStatement
    (26) block -> . LCHAV statements RCHAV
    (27) block -> . LCHAV RCHAV
    (47) expressionStatement -> . PCOMMA
    (48) expressionStatement -> . expression PCOMMA
    (41) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (88) returnStatement -> . RETURN PCOMMA
    (89) returnStatement -> . RETURN expression PCOMMA
    (90) ifStatement -> . IF LPAREN expression RPAREN statement
    (91) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (100) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (101) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (111) breakStatement -> . BREAK PCOMMA
    (112) breakStatement -> . BREAK ID PCOMMA
    (49) expression -> . orExpression
    (42) initializedVariableDeclaration -> . declaredIdentifier
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (44) initializedVariableDeclaration -> . listLiteral ATRIBUIR expression
    (45) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (46) initializedVariableDeclaration -> . listLiteral ATRIBUIR listLiteral
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    LCON            shift and go to state 56
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 40
    statement                      shift and go to state 161
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    listLiteral                    shift and go to state 53
    andExpression                  shift and go to state 54
    voidOrType                     shift and go to state 55
    equalityExpression             shift and go to state 57
    type                           shift and go to state 7
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66

state 153

    (92) forStatement -> FOR LPAREN forLoopParts RPAREN . statement
    (30) statement -> . nonLabelledStatement
    (31) nonLabelledStatement -> . block
    (32) nonLabelledStatement -> . expressionStatement
    (33) nonLabelledStatement -> . localVariableDeclaration
    (34) nonLabelledStatement -> . returnStatement
    (35) nonLabelledStatement -> . ifStatement
    (36) nonLabelledStatement -> . forStatement
    (37) nonLabelledStatement -> . whileStatement
    (38) nonLabelledStatement -> . doStatement
    (39) nonLabelledStatement -> . switchStatement
    (40) nonLabelledStatement -> . breakStatement
    (26) block -> . LCHAV statements RCHAV
    (27) block -> . LCHAV RCHAV
    (47) expressionStatement -> . PCOMMA
    (48) expressionStatement -> . expression PCOMMA
    (41) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (88) returnStatement -> . RETURN PCOMMA
    (89) returnStatement -> . RETURN expression PCOMMA
    (90) ifStatement -> . IF LPAREN expression RPAREN statement
    (91) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (100) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (101) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (111) breakStatement -> . BREAK PCOMMA
    (112) breakStatement -> . BREAK ID PCOMMA
    (49) expression -> . orExpression
    (42) initializedVariableDeclaration -> . declaredIdentifier
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (44) initializedVariableDeclaration -> . listLiteral ATRIBUIR expression
    (45) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (46) initializedVariableDeclaration -> . listLiteral ATRIBUIR listLiteral
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    LCON            shift and go to state 56
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statement                      shift and go to state 162
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    listLiteral                    shift and go to state 53
    andExpression                  shift and go to state 54
    voidOrType                     shift and go to state 55
    equalityExpression             shift and go to state 57
    type                           shift and go to state 7
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66

state 154

    (93) forLoopParts -> forInitializerStatement PCOMMA .
    (94) forLoopParts -> forInitializerStatement PCOMMA . expressionList
    (85) expressionList -> . expression COMMA
    (86) expressionList -> . expression
    (87) expressionList -> . expression COMMA expressionList
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    RPAREN          reduce using rule 93 (forLoopParts -> forInitializerStatement PCOMMA .)
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expressionList                 shift and go to state 163
    expression                     shift and go to state 102
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 155

    (95) forLoopParts -> forInitializerStatement expression . PCOMMA
    (96) forLoopParts -> forInitializerStatement expression . PCOMMA expressionList

    PCOMMA          shift and go to state 164


state 156

    (99) forInitializerStatement -> expression PCOMMA .

    PCOMMA          reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    LPAREN          reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    ID              reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    NUMBER          reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    LITERAL_STRING  reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    LCON            reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    TRUE            reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    FALSE           reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    VOID            reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    VAR             reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    INT             reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    FLOAT           reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    CHAR            reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)
    STRING          reduce using rule 99 (forInitializerStatement -> expression PCOMMA .)


state 157

    (100) whileStatement -> WHILE LPAREN expression RPAREN . statement
    (30) statement -> . nonLabelledStatement
    (31) nonLabelledStatement -> . block
    (32) nonLabelledStatement -> . expressionStatement
    (33) nonLabelledStatement -> . localVariableDeclaration
    (34) nonLabelledStatement -> . returnStatement
    (35) nonLabelledStatement -> . ifStatement
    (36) nonLabelledStatement -> . forStatement
    (37) nonLabelledStatement -> . whileStatement
    (38) nonLabelledStatement -> . doStatement
    (39) nonLabelledStatement -> . switchStatement
    (40) nonLabelledStatement -> . breakStatement
    (26) block -> . LCHAV statements RCHAV
    (27) block -> . LCHAV RCHAV
    (47) expressionStatement -> . PCOMMA
    (48) expressionStatement -> . expression PCOMMA
    (41) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (88) returnStatement -> . RETURN PCOMMA
    (89) returnStatement -> . RETURN expression PCOMMA
    (90) ifStatement -> . IF LPAREN expression RPAREN statement
    (91) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (100) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (101) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (111) breakStatement -> . BREAK PCOMMA
    (112) breakStatement -> . BREAK ID PCOMMA
    (49) expression -> . orExpression
    (42) initializedVariableDeclaration -> . declaredIdentifier
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (44) initializedVariableDeclaration -> . listLiteral ATRIBUIR expression
    (45) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (46) initializedVariableDeclaration -> . listLiteral ATRIBUIR listLiteral
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    LCON            shift and go to state 56
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 40
    statement                      shift and go to state 165
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    listLiteral                    shift and go to state 53
    andExpression                  shift and go to state 54
    voidOrType                     shift and go to state 55
    equalityExpression             shift and go to state 57
    type                           shift and go to state 7
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66

state 158

    (101) doStatement -> DO statement WHILE LPAREN . expression RPAREN PCOMMA
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 166
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 159

    (102) switchStatement -> SWITCH LPAREN expression RPAREN . LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> SWITCH LPAREN expression RPAREN . LCHAV switchCaseRepetition defaultCase RCHAV

    LCHAV           shift and go to state 167


state 160

    (87) expressionList -> expression COMMA expressionList .

    RCON            reduce using rule 87 (expressionList -> expression COMMA expressionList .)
    RPAREN          reduce using rule 87 (expressionList -> expression COMMA expressionList .)


state 161

    (90) ifStatement -> IF LPAREN expression RPAREN statement .
    (91) ifStatement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LCHAV           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    PCOMMA          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LCON            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LITERAL_STRING  reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    RCHAV           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 168

  ! ELSE            [ reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement .) ]


state 162

    (92) forStatement -> FOR LPAREN forLoopParts RPAREN statement .

    LCHAV           reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    PCOMMA          reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    RETURN          reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    IF              reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FOR             reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    WHILE           reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    DO              reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    SWITCH          reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    BREAK           reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    ID              reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LCON            reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    VOID            reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    VAR             reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    INT             reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FLOAT           reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    CHAR            reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    STRING          reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LPAREN          reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    NUMBER          reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LITERAL_STRING  reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    TRUE            reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FALSE           reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    RCHAV           reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    CASE            reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    DEFAULT         reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    ELSE            reduce using rule 92 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)


state 163

    (94) forLoopParts -> forInitializerStatement PCOMMA expressionList .

    RPAREN          reduce using rule 94 (forLoopParts -> forInitializerStatement PCOMMA expressionList .)


state 164

    (95) forLoopParts -> forInitializerStatement expression PCOMMA .
    (96) forLoopParts -> forInitializerStatement expression PCOMMA . expressionList
    (85) expressionList -> . expression COMMA
    (86) expressionList -> . expression
    (87) expressionList -> . expression COMMA expressionList
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    RPAREN          reduce using rule 95 (forLoopParts -> forInitializerStatement expression PCOMMA .)
    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 102
    expressionList                 shift and go to state 169
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 165

    (100) whileStatement -> WHILE LPAREN expression RPAREN statement .

    LCHAV           reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    PCOMMA          reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LCON            reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    VAR             reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LITERAL_STRING  reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    RCHAV           reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 100 (whileStatement -> WHILE LPAREN expression RPAREN statement .)


state 166

    (101) doStatement -> DO statement WHILE LPAREN expression . RPAREN PCOMMA

    RPAREN          shift and go to state 170


state 167

    (102) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV . switchCaseRepetition RCHAV
    (103) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV . switchCaseRepetition defaultCase RCHAV
    (104) switchCaseRepetition -> . switchCase switchCaseRepetition
    (105) switchCaseRepetition -> . switchCase
    (106) switchCase -> . CASE expression PONTOS statements
    (107) switchCase -> . label switchCase
    (110) label -> . ID PONTOS

    CASE            shift and go to state 173
    ID              shift and go to state 175

    switchCaseRepetition           shift and go to state 171
    switchCase                     shift and go to state 172
    label                          shift and go to state 174

state 168

    (91) ifStatement -> IF LPAREN expression RPAREN statement ELSE . statement
    (30) statement -> . nonLabelledStatement
    (31) nonLabelledStatement -> . block
    (32) nonLabelledStatement -> . expressionStatement
    (33) nonLabelledStatement -> . localVariableDeclaration
    (34) nonLabelledStatement -> . returnStatement
    (35) nonLabelledStatement -> . ifStatement
    (36) nonLabelledStatement -> . forStatement
    (37) nonLabelledStatement -> . whileStatement
    (38) nonLabelledStatement -> . doStatement
    (39) nonLabelledStatement -> . switchStatement
    (40) nonLabelledStatement -> . breakStatement
    (26) block -> . LCHAV statements RCHAV
    (27) block -> . LCHAV RCHAV
    (47) expressionStatement -> . PCOMMA
    (48) expressionStatement -> . expression PCOMMA
    (41) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (88) returnStatement -> . RETURN PCOMMA
    (89) returnStatement -> . RETURN expression PCOMMA
    (90) ifStatement -> . IF LPAREN expression RPAREN statement
    (91) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (100) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (101) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (111) breakStatement -> . BREAK PCOMMA
    (112) breakStatement -> . BREAK ID PCOMMA
    (49) expression -> . orExpression
    (42) initializedVariableDeclaration -> . declaredIdentifier
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (44) initializedVariableDeclaration -> . listLiteral ATRIBUIR expression
    (45) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (46) initializedVariableDeclaration -> . listLiteral ATRIBUIR listLiteral
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    LCON            shift and go to state 56
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 40
    statement                      shift and go to state 176
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    listLiteral                    shift and go to state 53
    andExpression                  shift and go to state 54
    voidOrType                     shift and go to state 55
    equalityExpression             shift and go to state 57
    type                           shift and go to state 7
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66

state 169

    (96) forLoopParts -> forInitializerStatement expression PCOMMA expressionList .

    RPAREN          reduce using rule 96 (forLoopParts -> forInitializerStatement expression PCOMMA expressionList .)


state 170

    (101) doStatement -> DO statement WHILE LPAREN expression RPAREN . PCOMMA

    PCOMMA          shift and go to state 177


state 171

    (102) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition . RCHAV
    (103) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition . defaultCase RCHAV
    (108) defaultCase -> . DEFAULT PONTOS statements
    (109) defaultCase -> . label defaultCase
    (110) label -> . ID PONTOS

    RCHAV           shift and go to state 178
    DEFAULT         shift and go to state 180
    ID              shift and go to state 175

    defaultCase                    shift and go to state 179
    label                          shift and go to state 181

state 172

    (104) switchCaseRepetition -> switchCase . switchCaseRepetition
    (105) switchCaseRepetition -> switchCase .
    (104) switchCaseRepetition -> . switchCase switchCaseRepetition
    (105) switchCaseRepetition -> . switchCase
    (106) switchCase -> . CASE expression PONTOS statements
    (107) switchCase -> . label switchCase
    (110) label -> . ID PONTOS

  ! shift/reduce conflict for ID resolved as shift
    RCHAV           reduce using rule 105 (switchCaseRepetition -> switchCase .)
    DEFAULT         reduce using rule 105 (switchCaseRepetition -> switchCase .)
    CASE            shift and go to state 173
    ID              shift and go to state 175

  ! ID              [ reduce using rule 105 (switchCaseRepetition -> switchCase .) ]

    switchCase                     shift and go to state 172
    switchCaseRepetition           shift and go to state 182
    label                          shift and go to state 174

state 173

    (106) switchCase -> CASE . expression PONTOS statements
    (49) expression -> . orExpression
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING

    LPAREN          shift and go to state 44
    ID              shift and go to state 85
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    LCON            shift and go to state 56
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13

    expression                     shift and go to state 183
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 57
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    listLiteral                    shift and go to state 77
    booleanLiteral                 shift and go to state 66
    voidOrType                     shift and go to state 86
    type                           shift and go to state 7

state 174

    (107) switchCase -> label . switchCase
    (106) switchCase -> . CASE expression PONTOS statements
    (107) switchCase -> . label switchCase
    (110) label -> . ID PONTOS

    CASE            shift and go to state 173
    ID              shift and go to state 175

    label                          shift and go to state 174
    switchCase                     shift and go to state 184

state 175

    (110) label -> ID . PONTOS

    PONTOS          shift and go to state 185


state 176

    (91) ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .

    LCHAV           reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PCOMMA          reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCON            reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LITERAL_STRING  reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RCHAV           reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 91 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 177

    (101) doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .

    LCHAV           reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    PCOMMA          reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    RETURN          reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    IF              reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FOR             reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    WHILE           reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    DO              reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    SWITCH          reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    BREAK           reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    ID              reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LCON            reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    VOID            reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    VAR             reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    INT             reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FLOAT           reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    CHAR            reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    STRING          reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LPAREN          reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    NUMBER          reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LITERAL_STRING  reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    TRUE            reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FALSE           reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    RCHAV           reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    CASE            reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    DEFAULT         reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    ELSE            reduce using rule 101 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)


state 178

    (102) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .

    LCHAV           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    PCOMMA          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    RETURN          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    IF              reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FOR             reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    WHILE           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    DO              reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    SWITCH          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    BREAK           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    ID              reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LCON            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    VOID            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    VAR             reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    INT             reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FLOAT           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    CHAR            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    STRING          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LPAREN          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    NUMBER          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LITERAL_STRING  reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    TRUE            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FALSE           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    RCHAV           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    CASE            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    DEFAULT         reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    ELSE            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)


state 179

    (103) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase . RCHAV

    RCHAV           shift and go to state 186


state 180

    (108) defaultCase -> DEFAULT . PONTOS statements

    PONTOS          shift and go to state 187


state 181

    (109) defaultCase -> label . defaultCase
    (108) defaultCase -> . DEFAULT PONTOS statements
    (109) defaultCase -> . label defaultCase
    (110) label -> . ID PONTOS

    DEFAULT         shift and go to state 180
    ID              shift and go to state 175

    label                          shift and go to state 181
    defaultCase                    shift and go to state 188

state 182

    (104) switchCaseRepetition -> switchCase switchCaseRepetition .

    RCHAV           reduce using rule 104 (switchCaseRepetition -> switchCase switchCaseRepetition .)
    DEFAULT         reduce using rule 104 (switchCaseRepetition -> switchCase switchCaseRepetition .)
    ID              reduce using rule 104 (switchCaseRepetition -> switchCase switchCaseRepetition .)


state 183

    (106) switchCase -> CASE expression . PONTOS statements

    PONTOS          shift and go to state 189


state 184

    (107) switchCase -> label switchCase .

    CASE            reduce using rule 107 (switchCase -> label switchCase .)
    ID              reduce using rule 107 (switchCase -> label switchCase .)
    RCHAV           reduce using rule 107 (switchCase -> label switchCase .)
    DEFAULT         reduce using rule 107 (switchCase -> label switchCase .)


state 185

    (110) label -> ID PONTOS .

    CASE            reduce using rule 110 (label -> ID PONTOS .)
    ID              reduce using rule 110 (label -> ID PONTOS .)
    DEFAULT         reduce using rule 110 (label -> ID PONTOS .)


state 186

    (103) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .

    LCHAV           reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    PCOMMA          reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    RETURN          reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    IF              reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FOR             reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    WHILE           reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    DO              reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    SWITCH          reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    BREAK           reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    ID              reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LCON            reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    VOID            reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    VAR             reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    INT             reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FLOAT           reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    CHAR            reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    STRING          reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LPAREN          reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    NUMBER          reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LITERAL_STRING  reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    TRUE            reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FALSE           reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    RCHAV           reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    CASE            reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    DEFAULT         reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    ELSE            reduce using rule 103 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)


state 187

    (108) defaultCase -> DEFAULT PONTOS . statements
    (28) statements -> . statement statements
    (29) statements -> . statement
    (30) statement -> . nonLabelledStatement
    (31) nonLabelledStatement -> . block
    (32) nonLabelledStatement -> . expressionStatement
    (33) nonLabelledStatement -> . localVariableDeclaration
    (34) nonLabelledStatement -> . returnStatement
    (35) nonLabelledStatement -> . ifStatement
    (36) nonLabelledStatement -> . forStatement
    (37) nonLabelledStatement -> . whileStatement
    (38) nonLabelledStatement -> . doStatement
    (39) nonLabelledStatement -> . switchStatement
    (40) nonLabelledStatement -> . breakStatement
    (26) block -> . LCHAV statements RCHAV
    (27) block -> . LCHAV RCHAV
    (47) expressionStatement -> . PCOMMA
    (48) expressionStatement -> . expression PCOMMA
    (41) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (88) returnStatement -> . RETURN PCOMMA
    (89) returnStatement -> . RETURN expression PCOMMA
    (90) ifStatement -> . IF LPAREN expression RPAREN statement
    (91) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (100) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (101) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (111) breakStatement -> . BREAK PCOMMA
    (112) breakStatement -> . BREAK ID PCOMMA
    (49) expression -> . orExpression
    (42) initializedVariableDeclaration -> . declaredIdentifier
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (44) initializedVariableDeclaration -> . listLiteral ATRIBUIR expression
    (45) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (46) initializedVariableDeclaration -> . listLiteral ATRIBUIR listLiteral
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    LCON            shift and go to state 56
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statements                     shift and go to state 190
    statement                      shift and go to state 27
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    listLiteral                    shift and go to state 53
    andExpression                  shift and go to state 54
    voidOrType                     shift and go to state 55
    equalityExpression             shift and go to state 57
    type                           shift and go to state 7
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66

state 188

    (109) defaultCase -> label defaultCase .

    RCHAV           reduce using rule 109 (defaultCase -> label defaultCase .)


state 189

    (106) switchCase -> CASE expression PONTOS . statements
    (28) statements -> . statement statements
    (29) statements -> . statement
    (30) statement -> . nonLabelledStatement
    (31) nonLabelledStatement -> . block
    (32) nonLabelledStatement -> . expressionStatement
    (33) nonLabelledStatement -> . localVariableDeclaration
    (34) nonLabelledStatement -> . returnStatement
    (35) nonLabelledStatement -> . ifStatement
    (36) nonLabelledStatement -> . forStatement
    (37) nonLabelledStatement -> . whileStatement
    (38) nonLabelledStatement -> . doStatement
    (39) nonLabelledStatement -> . switchStatement
    (40) nonLabelledStatement -> . breakStatement
    (26) block -> . LCHAV statements RCHAV
    (27) block -> . LCHAV RCHAV
    (47) expressionStatement -> . PCOMMA
    (48) expressionStatement -> . expression PCOMMA
    (41) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (88) returnStatement -> . RETURN PCOMMA
    (89) returnStatement -> . RETURN expression PCOMMA
    (90) ifStatement -> . IF LPAREN expression RPAREN statement
    (91) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (92) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (100) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (101) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (103) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (111) breakStatement -> . BREAK PCOMMA
    (112) breakStatement -> . BREAK ID PCOMMA
    (49) expression -> . orExpression
    (42) initializedVariableDeclaration -> . declaredIdentifier
    (43) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (44) initializedVariableDeclaration -> . listLiteral ATRIBUIR expression
    (45) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR listLiteral
    (46) initializedVariableDeclaration -> . listLiteral ATRIBUIR listLiteral
    (50) orExpression -> . andExpression
    (51) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . voidOrType ID
    (8) declaredIdentifier -> . ID
    (81) listLiteral -> . LCON RCON
    (82) listLiteral -> . LCON expressionList RCON
    (52) andExpression -> . equalityExpression
    (53) andExpression -> . andExpression AND equalityExpression
    (9) voidOrType -> . type
    (10) voidOrType -> . VOID
    (54) equalityExpression -> . relacionalExpression
    (55) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (56) equalityExpression -> . equalityExpression NEG relacionalExpression
    (11) type -> . VAR
    (12) type -> . INT
    (13) type -> . FLOAT
    (14) type -> . CHAR
    (15) type -> . STRING
    (57) relacionalExpression -> . addExpression
    (58) relacionalExpression -> . relacionalExpression MENOR addExpression
    (59) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (60) relacionalExpression -> . relacionalExpression MENORI addExpression
    (61) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (62) addExpression -> . multExpression
    (63) addExpression -> . addExpression SOMA multExpression
    (64) addExpression -> . addExpression SUBTRAIR multExpression
    (65) multExpression -> . unaryExpression
    (66) multExpression -> . multExpression VEZES unaryExpression
    (67) multExpression -> . multExpression DIVIDIR unaryExpression
    (68) multExpression -> . multExpression RESTO unaryExpression
    (69) unaryExpression -> . primary
    (70) unaryExpression -> . functionCall
    (71) unaryExpression -> . unaryExpression SOMASOMA
    (72) unaryExpression -> . unaryExpression SUBSUB
    (74) primary -> . literal
    (75) primary -> . LPAREN expression RPAREN
    (73) functionCall -> . functionSignature
    (76) literal -> . ID
    (77) literal -> . listLiteral
    (78) literal -> . booleanLiteral
    (79) literal -> . NUMBER
    (80) literal -> . LITERAL_STRING
    (16) functionSignature -> . ID formalParameterList
    (17) functionSignature -> . voidOrType ID formalParameterList
    (83) booleanLiteral -> . TRUE
    (84) booleanLiteral -> . FALSE

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    LCON            shift and go to state 56
    VOID            shift and go to state 8
    VAR             shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    STRING          shift and go to state 13
    LPAREN          shift and go to state 44
    NUMBER          shift and go to state 67
    LITERAL_STRING  shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 40
    statements                     shift and go to state 191
    statement                      shift and go to state 27
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    listLiteral                    shift and go to state 53
    andExpression                  shift and go to state 54
    voidOrType                     shift and go to state 55
    equalityExpression             shift and go to state 57
    type                           shift and go to state 7
    relacionalExpression           shift and go to state 58
    addExpression                  shift and go to state 59
    multExpression                 shift and go to state 60
    unaryExpression                shift and go to state 61
    primary                        shift and go to state 62
    functionCall                   shift and go to state 63
    literal                        shift and go to state 64
    functionSignature              shift and go to state 65
    booleanLiteral                 shift and go to state 66

state 190

    (108) defaultCase -> DEFAULT PONTOS statements .

    RCHAV           reduce using rule 108 (defaultCase -> DEFAULT PONTOS statements .)


state 191

    (106) switchCase -> CASE expression PONTOS statements .

    CASE            reduce using rule 106 (switchCase -> CASE expression PONTOS statements .)
    ID              reduce using rule 106 (switchCase -> CASE expression PONTOS statements .)
    RCHAV           reduce using rule 106 (switchCase -> CASE expression PONTOS statements .)
    DEFAULT         reduce using rule 106 (switchCase -> CASE expression PONTOS statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 27 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 161 resolved as shift
WARNING: shift/reduce conflict for ID in state 172 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (declaredIdentifier -> ID)
WARNING: rejected rule (literal -> ID) in state 50
WARNING: reduce/reduce conflict in state 74 resolved using rule (simpleFormalParameter -> ID)
WARNING: rejected rule (literal -> ID) in state 74
WARNING: reduce/reduce conflict in state 134 resolved using rule (initializedVariableDeclaration -> declaredIdentifier ATRIBUIR listLiteral)
WARNING: rejected rule (literal -> listLiteral) in state 134
WARNING: reduce/reduce conflict in state 135 resolved using rule (initializedVariableDeclaration -> listLiteral ATRIBUIR listLiteral)
WARNING: rejected rule (literal -> listLiteral) in state 135
