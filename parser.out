Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    CONST
    FINAL
    FUNCTION
    INTEGER
    NOT
    NULL

Grammar

Rule 0     S' -> topLevel
Rule 1     topLevel -> variableDeclaration PCOMMA
Rule 2     topLevel -> variableDeclaration PCOMMA topLevel
Rule 3     topLevel -> functionSignature functionBody
Rule 4     topLevel -> functionSignature functionBody topLevel
Rule 5     variableDeclaration -> declaredIdentifier
Rule 6     variableDeclaration -> variableDeclaration COMMA ID
Rule 7     declaredIdentifier -> type ID
Rule 8     type -> VAR
Rule 9     type -> INT
Rule 10    type -> FLOAT
Rule 11    type -> CHAR
Rule 12    type -> STRING
Rule 13    type -> VOID
Rule 14    type -> BOOLEAN
Rule 15    functionSignature -> ID formalParameterList
Rule 16    functionSignature -> type ID formalParameterList
Rule 17    formalParameterList -> LPAREN RPAREN
Rule 18    formalParameterList -> LPAREN normalFormalParameters RPAREN
Rule 19    normalFormalParameters -> simpleFormalParameter
Rule 20    normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters
Rule 21    simpleFormalParameter -> type ID
Rule 22    simpleFormalParameter -> expression
Rule 23    functionBody -> block
Rule 24    block -> LCHAV statements RCHAV
Rule 25    block -> LCHAV RCHAV
Rule 26    statements -> statement statements
Rule 27    statements -> statement
Rule 28    statement -> nonLabelledStatement
Rule 29    nonLabelledStatement -> block
Rule 30    nonLabelledStatement -> expressionStatement
Rule 31    nonLabelledStatement -> localVariableDeclaration
Rule 32    nonLabelledStatement -> returnStatement
Rule 33    nonLabelledStatement -> ifStatement
Rule 34    nonLabelledStatement -> forStatement
Rule 35    nonLabelledStatement -> whileStatement
Rule 36    nonLabelledStatement -> doStatement
Rule 37    nonLabelledStatement -> switchStatement
Rule 38    nonLabelledStatement -> breakStatement
Rule 39    localVariableDeclaration -> initializedVariableDeclaration PCOMMA
Rule 40    initializedVariableDeclaration -> declaredIdentifier
Rule 41    initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression
Rule 42    initializedVariableDeclaration -> literal ATRIBUIR expression
Rule 43    initializedVariableDeclaration -> initializedVariableDeclaration COMMA ID
Rule 44    expressionStatement -> PCOMMA
Rule 45    expressionStatement -> expression PCOMMA
Rule 46    expression -> orExpression
Rule 47    orExpression -> andExpression
Rule 48    orExpression -> orExpression OR andExpression
Rule 49    andExpression -> equalityExpression
Rule 50    andExpression -> andExpression AND equalityExpression
Rule 51    equalityExpression -> relacionalExpression
Rule 52    equalityExpression -> equalityExpression IGUAL relacionalExpression
Rule 53    equalityExpression -> equalityExpression NEG relacionalExpression
Rule 54    relacionalExpression -> addExpression
Rule 55    relacionalExpression -> relacionalExpression MENOR addExpression
Rule 56    relacionalExpression -> relacionalExpression MAIOR addExpression
Rule 57    relacionalExpression -> relacionalExpression MENORI addExpression
Rule 58    relacionalExpression -> relacionalExpression MAIORI addExpression
Rule 59    addExpression -> multExpression
Rule 60    addExpression -> addExpression SOMA multExpression
Rule 61    addExpression -> addExpression SUBTRAIR multExpression
Rule 62    multExpression -> unaryExpression
Rule 63    multExpression -> multExpression VEZES unaryExpression
Rule 64    multExpression -> multExpression DIVIDIR unaryExpression
Rule 65    multExpression -> multExpression RESTO unaryExpression
Rule 66    unaryExpression -> primary
Rule 67    unaryExpression -> functionCall
Rule 68    unaryExpression -> unaryExpression SOMASOMA
Rule 69    unaryExpression -> unaryExpression SUBSUB
Rule 70    functionCall -> functionSignature
Rule 71    primary -> literal
Rule 72    primary -> LPAREN expression RPAREN
Rule 73    literal -> ID
Rule 74    literal -> booleanLiteral
Rule 75    literal -> listLiteralID
Rule 76    literal -> listLiteral
Rule 77    literal -> NUMBER
Rule 78    literal -> FLOAT
Rule 79    literal -> LITERAL_STRING
Rule 80    listLiteral -> LCON expressionList RCON
Rule 81    listLiteralID -> ID listLiteral
Rule 82    booleanLiteral -> TRUE
Rule 83    booleanLiteral -> FALSE
Rule 84    expressionList -> expression COMMA
Rule 85    expressionList -> expression
Rule 86    expressionList -> expression COMMA expressionList
Rule 87    returnStatement -> RETURN PCOMMA
Rule 88    returnStatement -> RETURN expression PCOMMA
Rule 89    ifStatement -> IF LPAREN expression RPAREN statement
Rule 90    ifStatement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 91    forStatement -> FOR LPAREN forLoopParts RPAREN statement
Rule 92    forLoopParts -> forInitializerStatement PCOMMA
Rule 93    forLoopParts -> forInitializerStatement PCOMMA expressionList
Rule 94    forLoopParts -> forInitializerStatement expression PCOMMA
Rule 95    forLoopParts -> forInitializerStatement expression PCOMMA expressionList
Rule 96    forInitializerStatement -> localVariableDeclaration
Rule 97    forInitializerStatement -> PCOMMA
Rule 98    forInitializerStatement -> expression PCOMMA
Rule 99    whileStatement -> WHILE LPAREN expression RPAREN statement
Rule 100   doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA
Rule 101   switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
Rule 102   switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
Rule 103   switchCaseRepetition -> switchCase switchCaseRepetition
Rule 104   switchCaseRepetition -> switchCase
Rule 105   switchCase -> CASE expression PONTOS statements
Rule 106   defaultCase -> DEFAULT PONTOS statements
Rule 107   breakStatement -> BREAK PCOMMA
Rule 108   breakStatement -> BREAK ID PCOMMA

Terminals, with rules where they appear

AND                  : 50
ATRIBUIR             : 41 42
BOOLEAN              : 14
BREAK                : 107 108
CASE                 : 105
CHAR                 : 11
CLASS                : 
COMMA                : 6 20 43 84 86
CONST                : 
DEFAULT              : 106
DIVIDIR              : 64
DO                   : 100
ELSE                 : 90
FALSE                : 83
FINAL                : 
FLOAT                : 10 78
FOR                  : 91
FUNCTION             : 
ID                   : 6 7 15 16 21 43 73 81 108
IF                   : 89 90
IGUAL                : 52
INT                  : 9
INTEGER              : 
LCHAV                : 24 25 101 102
LCON                 : 80
LITERAL_STRING       : 79
LPAREN               : 17 18 72 89 90 91 99 100 101 102
MAIOR                : 56
MAIORI               : 58
MENOR                : 55
MENORI               : 57
NEG                  : 53
NOT                  : 
NULL                 : 
NUMBER               : 77
OR                   : 48
PCOMMA               : 1 2 39 44 45 87 88 92 93 94 95 97 98 100 107 108
PONTOS               : 105 106
RCHAV                : 24 25 101 102
RCON                 : 80
RESTO                : 65
RETURN               : 87 88
RPAREN               : 17 18 72 89 90 91 99 100 101 102
SOMA                 : 60
SOMASOMA             : 68
STRING               : 12
SUBSUB               : 69
SUBTRAIR             : 61
SWITCH               : 101 102
TRUE                 : 82
VAR                  : 8
VEZES                : 63
VOID                 : 13
WHILE                : 99 100
error                : 

Nonterminals, with rules where they appear

addExpression        : 54 55 56 57 58 60 61
andExpression        : 47 48 50
block                : 23 29
booleanLiteral       : 74
breakStatement       : 38
declaredIdentifier   : 5 40 41
defaultCase          : 102
doStatement          : 36
equalityExpression   : 49 50 52 53
expression           : 22 41 42 45 72 84 85 86 88 89 90 94 95 98 99 100 101 102 105
expressionList       : 80 86 93 95
expressionStatement  : 30
forInitializerStatement : 92 93 94 95
forLoopParts         : 91
forStatement         : 34
formalParameterList  : 15 16
functionBody         : 3 4
functionCall         : 67
functionSignature    : 3 4 70
ifStatement          : 33
initializedVariableDeclaration : 39 43
listLiteral          : 76 81
listLiteralID        : 75
literal              : 42 71
localVariableDeclaration : 31 96
multExpression       : 59 60 61 63 64 65
nonLabelledStatement : 28
normalFormalParameters : 18 20
orExpression         : 46 48
primary              : 66
relacionalExpression : 51 52 53 55 56 57 58
returnStatement      : 32
simpleFormalParameter : 19 20
statement            : 26 27 89 90 90 91 99 100
statements           : 24 26 105 106
switchCase           : 103 104
switchCaseRepetition : 101 102 103
switchStatement      : 37
topLevel             : 2 4 0
type                 : 7 16 21
unaryExpression      : 62 63 64 65 68 69
variableDeclaration  : 1 2 6
whileStatement       : 35

Parsing method: LALR

state 0

    (0) S' -> . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (7) declaredIdentifier -> . type ID
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    ID              shift and go to state 5
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    topLevel                       shift and go to state 1
    variableDeclaration            shift and go to state 2
    functionSignature              shift and go to state 3
    declaredIdentifier             shift and go to state 4
    type                           shift and go to state 6

state 1

    (0) S' -> topLevel .



state 2

    (1) topLevel -> variableDeclaration . PCOMMA
    (2) topLevel -> variableDeclaration . PCOMMA topLevel
    (6) variableDeclaration -> variableDeclaration . COMMA ID

    PCOMMA          shift and go to state 14
    COMMA           shift and go to state 15


state 3

    (3) topLevel -> functionSignature . functionBody
    (4) topLevel -> functionSignature . functionBody topLevel
    (23) functionBody -> . block
    (24) block -> . LCHAV statements RCHAV
    (25) block -> . LCHAV RCHAV

    LCHAV           shift and go to state 18

    functionBody                   shift and go to state 16
    block                          shift and go to state 17

state 4

    (5) variableDeclaration -> declaredIdentifier .

    PCOMMA          reduce using rule 5 (variableDeclaration -> declaredIdentifier .)
    COMMA           reduce using rule 5 (variableDeclaration -> declaredIdentifier .)


state 5

    (15) functionSignature -> ID . formalParameterList
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 19

state 6

    (16) functionSignature -> type . ID formalParameterList
    (7) declaredIdentifier -> type . ID

    ID              shift and go to state 21


state 7

    (8) type -> VAR .

    ID              reduce using rule 8 (type -> VAR .)


state 8

    (9) type -> INT .

    ID              reduce using rule 9 (type -> INT .)


state 9

    (10) type -> FLOAT .

    ID              reduce using rule 10 (type -> FLOAT .)


state 10

    (11) type -> CHAR .

    ID              reduce using rule 11 (type -> CHAR .)


state 11

    (12) type -> STRING .

    ID              reduce using rule 12 (type -> STRING .)


state 12

    (13) type -> VOID .

    ID              reduce using rule 13 (type -> VOID .)


state 13

    (14) type -> BOOLEAN .

    ID              reduce using rule 14 (type -> BOOLEAN .)


state 14

    (1) topLevel -> variableDeclaration PCOMMA .
    (2) topLevel -> variableDeclaration PCOMMA . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (7) declaredIdentifier -> . type ID
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    $end            reduce using rule 1 (topLevel -> variableDeclaration PCOMMA .)
    ID              shift and go to state 5
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    variableDeclaration            shift and go to state 2
    topLevel                       shift and go to state 22
    functionSignature              shift and go to state 3
    declaredIdentifier             shift and go to state 4
    type                           shift and go to state 6

state 15

    (6) variableDeclaration -> variableDeclaration COMMA . ID

    ID              shift and go to state 23


state 16

    (3) topLevel -> functionSignature functionBody .
    (4) topLevel -> functionSignature functionBody . topLevel
    (1) topLevel -> . variableDeclaration PCOMMA
    (2) topLevel -> . variableDeclaration PCOMMA topLevel
    (3) topLevel -> . functionSignature functionBody
    (4) topLevel -> . functionSignature functionBody topLevel
    (5) variableDeclaration -> . declaredIdentifier
    (6) variableDeclaration -> . variableDeclaration COMMA ID
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (7) declaredIdentifier -> . type ID
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    $end            reduce using rule 3 (topLevel -> functionSignature functionBody .)
    ID              shift and go to state 5
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    functionSignature              shift and go to state 3
    topLevel                       shift and go to state 24
    variableDeclaration            shift and go to state 2
    declaredIdentifier             shift and go to state 4
    type                           shift and go to state 6

state 17

    (23) functionBody -> block .

    ID              reduce using rule 23 (functionBody -> block .)
    VAR             reduce using rule 23 (functionBody -> block .)
    INT             reduce using rule 23 (functionBody -> block .)
    FLOAT           reduce using rule 23 (functionBody -> block .)
    CHAR            reduce using rule 23 (functionBody -> block .)
    STRING          reduce using rule 23 (functionBody -> block .)
    VOID            reduce using rule 23 (functionBody -> block .)
    BOOLEAN         reduce using rule 23 (functionBody -> block .)
    $end            reduce using rule 23 (functionBody -> block .)


state 18

    (24) block -> LCHAV . statements RCHAV
    (25) block -> LCHAV . RCHAV
    (26) statements -> . statement statements
    (27) statements -> . statement
    (28) statement -> . nonLabelledStatement
    (29) nonLabelledStatement -> . block
    (30) nonLabelledStatement -> . expressionStatement
    (31) nonLabelledStatement -> . localVariableDeclaration
    (32) nonLabelledStatement -> . returnStatement
    (33) nonLabelledStatement -> . ifStatement
    (34) nonLabelledStatement -> . forStatement
    (35) nonLabelledStatement -> . whileStatement
    (36) nonLabelledStatement -> . doStatement
    (37) nonLabelledStatement -> . switchStatement
    (38) nonLabelledStatement -> . breakStatement
    (24) block -> . LCHAV statements RCHAV
    (25) block -> . LCHAV RCHAV
    (44) expressionStatement -> . PCOMMA
    (45) expressionStatement -> . expression PCOMMA
    (39) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (87) returnStatement -> . RETURN PCOMMA
    (88) returnStatement -> . RETURN expression PCOMMA
    (89) ifStatement -> . IF LPAREN expression RPAREN statement
    (90) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (91) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (99) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (100) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (46) expression -> . orExpression
    (40) initializedVariableDeclaration -> . declaredIdentifier
    (41) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (42) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (43) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    RCHAV           shift and go to state 26
    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    LPAREN          shift and go to state 44

    statements                     shift and go to state 25
    statement                      shift and go to state 27
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72

state 19

    (15) functionSignature -> ID formalParameterList .

    LCHAV           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    SOMASOMA        reduce using rule 15 (functionSignature -> ID formalParameterList .)
    SUBSUB          reduce using rule 15 (functionSignature -> ID formalParameterList .)
    VEZES           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    DIVIDIR         reduce using rule 15 (functionSignature -> ID formalParameterList .)
    RESTO           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    SOMA            reduce using rule 15 (functionSignature -> ID formalParameterList .)
    SUBTRAIR        reduce using rule 15 (functionSignature -> ID formalParameterList .)
    MENOR           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    MAIOR           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    MENORI          reduce using rule 15 (functionSignature -> ID formalParameterList .)
    MAIORI          reduce using rule 15 (functionSignature -> ID formalParameterList .)
    IGUAL           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    NEG             reduce using rule 15 (functionSignature -> ID formalParameterList .)
    AND             reduce using rule 15 (functionSignature -> ID formalParameterList .)
    OR              reduce using rule 15 (functionSignature -> ID formalParameterList .)
    PCOMMA          reduce using rule 15 (functionSignature -> ID formalParameterList .)
    COMMA           reduce using rule 15 (functionSignature -> ID formalParameterList .)
    RPAREN          reduce using rule 15 (functionSignature -> ID formalParameterList .)
    RCON            reduce using rule 15 (functionSignature -> ID formalParameterList .)
    PONTOS          reduce using rule 15 (functionSignature -> ID formalParameterList .)


state 20

    (17) formalParameterList -> LPAREN . RPAREN
    (18) formalParameterList -> LPAREN . normalFormalParameters RPAREN
    (19) normalFormalParameters -> . simpleFormalParameter
    (20) normalFormalParameters -> . simpleFormalParameter COMMA normalFormalParameters
    (21) simpleFormalParameter -> . type ID
    (22) simpleFormalParameter -> . expression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON

    RPAREN          shift and go to state 73
    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 79
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65

    normalFormalParameters         shift and go to state 74
    simpleFormalParameter          shift and go to state 75
    type                           shift and go to state 76
    expression                     shift and go to state 78
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58

state 21

    (16) functionSignature -> type ID . formalParameterList
    (7) declaredIdentifier -> type ID .
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    PCOMMA          reduce using rule 7 (declaredIdentifier -> type ID .)
    COMMA           reduce using rule 7 (declaredIdentifier -> type ID .)
    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 81

state 22

    (2) topLevel -> variableDeclaration PCOMMA topLevel .

    $end            reduce using rule 2 (topLevel -> variableDeclaration PCOMMA topLevel .)


state 23

    (6) variableDeclaration -> variableDeclaration COMMA ID .

    PCOMMA          reduce using rule 6 (variableDeclaration -> variableDeclaration COMMA ID .)
    COMMA           reduce using rule 6 (variableDeclaration -> variableDeclaration COMMA ID .)


state 24

    (4) topLevel -> functionSignature functionBody topLevel .

    $end            reduce using rule 4 (topLevel -> functionSignature functionBody topLevel .)


state 25

    (24) block -> LCHAV statements . RCHAV

    RCHAV           shift and go to state 82


state 26

    (25) block -> LCHAV RCHAV .

    ID              reduce using rule 25 (block -> LCHAV RCHAV .)
    VAR             reduce using rule 25 (block -> LCHAV RCHAV .)
    INT             reduce using rule 25 (block -> LCHAV RCHAV .)
    FLOAT           reduce using rule 25 (block -> LCHAV RCHAV .)
    CHAR            reduce using rule 25 (block -> LCHAV RCHAV .)
    STRING          reduce using rule 25 (block -> LCHAV RCHAV .)
    VOID            reduce using rule 25 (block -> LCHAV RCHAV .)
    BOOLEAN         reduce using rule 25 (block -> LCHAV RCHAV .)
    $end            reduce using rule 25 (block -> LCHAV RCHAV .)
    LCHAV           reduce using rule 25 (block -> LCHAV RCHAV .)
    PCOMMA          reduce using rule 25 (block -> LCHAV RCHAV .)
    RETURN          reduce using rule 25 (block -> LCHAV RCHAV .)
    IF              reduce using rule 25 (block -> LCHAV RCHAV .)
    FOR             reduce using rule 25 (block -> LCHAV RCHAV .)
    WHILE           reduce using rule 25 (block -> LCHAV RCHAV .)
    DO              reduce using rule 25 (block -> LCHAV RCHAV .)
    SWITCH          reduce using rule 25 (block -> LCHAV RCHAV .)
    BREAK           reduce using rule 25 (block -> LCHAV RCHAV .)
    NUMBER          reduce using rule 25 (block -> LCHAV RCHAV .)
    LITERAL_STRING  reduce using rule 25 (block -> LCHAV RCHAV .)
    TRUE            reduce using rule 25 (block -> LCHAV RCHAV .)
    FALSE           reduce using rule 25 (block -> LCHAV RCHAV .)
    LCON            reduce using rule 25 (block -> LCHAV RCHAV .)
    LPAREN          reduce using rule 25 (block -> LCHAV RCHAV .)
    RCHAV           reduce using rule 25 (block -> LCHAV RCHAV .)
    CASE            reduce using rule 25 (block -> LCHAV RCHAV .)
    DEFAULT         reduce using rule 25 (block -> LCHAV RCHAV .)
    ELSE            reduce using rule 25 (block -> LCHAV RCHAV .)


state 27

    (26) statements -> statement . statements
    (27) statements -> statement .
    (26) statements -> . statement statements
    (27) statements -> . statement
    (28) statement -> . nonLabelledStatement
    (29) nonLabelledStatement -> . block
    (30) nonLabelledStatement -> . expressionStatement
    (31) nonLabelledStatement -> . localVariableDeclaration
    (32) nonLabelledStatement -> . returnStatement
    (33) nonLabelledStatement -> . ifStatement
    (34) nonLabelledStatement -> . forStatement
    (35) nonLabelledStatement -> . whileStatement
    (36) nonLabelledStatement -> . doStatement
    (37) nonLabelledStatement -> . switchStatement
    (38) nonLabelledStatement -> . breakStatement
    (24) block -> . LCHAV statements RCHAV
    (25) block -> . LCHAV RCHAV
    (44) expressionStatement -> . PCOMMA
    (45) expressionStatement -> . expression PCOMMA
    (39) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (87) returnStatement -> . RETURN PCOMMA
    (88) returnStatement -> . RETURN expression PCOMMA
    (89) ifStatement -> . IF LPAREN expression RPAREN statement
    (90) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (91) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (99) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (100) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (46) expression -> . orExpression
    (40) initializedVariableDeclaration -> . declaredIdentifier
    (41) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (42) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (43) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    RCHAV           reduce using rule 27 (statements -> statement .)
    CASE            reduce using rule 27 (statements -> statement .)
    DEFAULT         reduce using rule 27 (statements -> statement .)
    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    LPAREN          shift and go to state 44

    statement                      shift and go to state 27
    statements                     shift and go to state 83
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72

state 28

    (28) statement -> nonLabelledStatement .

    LCHAV           reduce using rule 28 (statement -> nonLabelledStatement .)
    PCOMMA          reduce using rule 28 (statement -> nonLabelledStatement .)
    RETURN          reduce using rule 28 (statement -> nonLabelledStatement .)
    IF              reduce using rule 28 (statement -> nonLabelledStatement .)
    FOR             reduce using rule 28 (statement -> nonLabelledStatement .)
    WHILE           reduce using rule 28 (statement -> nonLabelledStatement .)
    DO              reduce using rule 28 (statement -> nonLabelledStatement .)
    SWITCH          reduce using rule 28 (statement -> nonLabelledStatement .)
    BREAK           reduce using rule 28 (statement -> nonLabelledStatement .)
    ID              reduce using rule 28 (statement -> nonLabelledStatement .)
    NUMBER          reduce using rule 28 (statement -> nonLabelledStatement .)
    FLOAT           reduce using rule 28 (statement -> nonLabelledStatement .)
    LITERAL_STRING  reduce using rule 28 (statement -> nonLabelledStatement .)
    VAR             reduce using rule 28 (statement -> nonLabelledStatement .)
    INT             reduce using rule 28 (statement -> nonLabelledStatement .)
    CHAR            reduce using rule 28 (statement -> nonLabelledStatement .)
    STRING          reduce using rule 28 (statement -> nonLabelledStatement .)
    VOID            reduce using rule 28 (statement -> nonLabelledStatement .)
    BOOLEAN         reduce using rule 28 (statement -> nonLabelledStatement .)
    TRUE            reduce using rule 28 (statement -> nonLabelledStatement .)
    FALSE           reduce using rule 28 (statement -> nonLabelledStatement .)
    LCON            reduce using rule 28 (statement -> nonLabelledStatement .)
    LPAREN          reduce using rule 28 (statement -> nonLabelledStatement .)
    RCHAV           reduce using rule 28 (statement -> nonLabelledStatement .)
    CASE            reduce using rule 28 (statement -> nonLabelledStatement .)
    DEFAULT         reduce using rule 28 (statement -> nonLabelledStatement .)
    ELSE            reduce using rule 28 (statement -> nonLabelledStatement .)


state 29

    (29) nonLabelledStatement -> block .

    LCHAV           reduce using rule 29 (nonLabelledStatement -> block .)
    PCOMMA          reduce using rule 29 (nonLabelledStatement -> block .)
    RETURN          reduce using rule 29 (nonLabelledStatement -> block .)
    IF              reduce using rule 29 (nonLabelledStatement -> block .)
    FOR             reduce using rule 29 (nonLabelledStatement -> block .)
    WHILE           reduce using rule 29 (nonLabelledStatement -> block .)
    DO              reduce using rule 29 (nonLabelledStatement -> block .)
    SWITCH          reduce using rule 29 (nonLabelledStatement -> block .)
    BREAK           reduce using rule 29 (nonLabelledStatement -> block .)
    ID              reduce using rule 29 (nonLabelledStatement -> block .)
    NUMBER          reduce using rule 29 (nonLabelledStatement -> block .)
    FLOAT           reduce using rule 29 (nonLabelledStatement -> block .)
    LITERAL_STRING  reduce using rule 29 (nonLabelledStatement -> block .)
    VAR             reduce using rule 29 (nonLabelledStatement -> block .)
    INT             reduce using rule 29 (nonLabelledStatement -> block .)
    CHAR            reduce using rule 29 (nonLabelledStatement -> block .)
    STRING          reduce using rule 29 (nonLabelledStatement -> block .)
    VOID            reduce using rule 29 (nonLabelledStatement -> block .)
    BOOLEAN         reduce using rule 29 (nonLabelledStatement -> block .)
    TRUE            reduce using rule 29 (nonLabelledStatement -> block .)
    FALSE           reduce using rule 29 (nonLabelledStatement -> block .)
    LCON            reduce using rule 29 (nonLabelledStatement -> block .)
    LPAREN          reduce using rule 29 (nonLabelledStatement -> block .)
    RCHAV           reduce using rule 29 (nonLabelledStatement -> block .)
    CASE            reduce using rule 29 (nonLabelledStatement -> block .)
    DEFAULT         reduce using rule 29 (nonLabelledStatement -> block .)
    ELSE            reduce using rule 29 (nonLabelledStatement -> block .)


state 30

    (30) nonLabelledStatement -> expressionStatement .

    LCHAV           reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    PCOMMA          reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    RETURN          reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    IF              reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    FOR             reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    WHILE           reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    DO              reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    SWITCH          reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    BREAK           reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    ID              reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    NUMBER          reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    FLOAT           reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    LITERAL_STRING  reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    VAR             reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    INT             reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    CHAR            reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    STRING          reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    VOID            reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    BOOLEAN         reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    TRUE            reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    FALSE           reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    LCON            reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    LPAREN          reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    RCHAV           reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    CASE            reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    DEFAULT         reduce using rule 30 (nonLabelledStatement -> expressionStatement .)
    ELSE            reduce using rule 30 (nonLabelledStatement -> expressionStatement .)


state 31

    (31) nonLabelledStatement -> localVariableDeclaration .

    LCHAV           reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    PCOMMA          reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    RETURN          reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    IF              reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    FOR             reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    WHILE           reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    DO              reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    SWITCH          reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    BREAK           reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    ID              reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    NUMBER          reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    FLOAT           reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    LITERAL_STRING  reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    VAR             reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    INT             reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    CHAR            reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    STRING          reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    VOID            reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    BOOLEAN         reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    TRUE            reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    FALSE           reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    LCON            reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    LPAREN          reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    RCHAV           reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    CASE            reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    DEFAULT         reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)
    ELSE            reduce using rule 31 (nonLabelledStatement -> localVariableDeclaration .)


state 32

    (32) nonLabelledStatement -> returnStatement .

    LCHAV           reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    PCOMMA          reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    RETURN          reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    IF              reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    FOR             reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    WHILE           reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    DO              reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    SWITCH          reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    BREAK           reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    ID              reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    NUMBER          reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    FLOAT           reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    LITERAL_STRING  reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    VAR             reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    INT             reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    CHAR            reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    STRING          reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    VOID            reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    BOOLEAN         reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    TRUE            reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    FALSE           reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    LCON            reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    LPAREN          reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    RCHAV           reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    CASE            reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    DEFAULT         reduce using rule 32 (nonLabelledStatement -> returnStatement .)
    ELSE            reduce using rule 32 (nonLabelledStatement -> returnStatement .)


state 33

    (33) nonLabelledStatement -> ifStatement .

    LCHAV           reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    PCOMMA          reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    RETURN          reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    IF              reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    FOR             reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    WHILE           reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    DO              reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    SWITCH          reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    BREAK           reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    ID              reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    NUMBER          reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    FLOAT           reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    LITERAL_STRING  reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    VAR             reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    INT             reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    CHAR            reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    STRING          reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    VOID            reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    BOOLEAN         reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    TRUE            reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    FALSE           reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    LCON            reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    LPAREN          reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    RCHAV           reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    CASE            reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    DEFAULT         reduce using rule 33 (nonLabelledStatement -> ifStatement .)
    ELSE            reduce using rule 33 (nonLabelledStatement -> ifStatement .)


state 34

    (34) nonLabelledStatement -> forStatement .

    LCHAV           reduce using rule 34 (nonLabelledStatement -> forStatement .)
    PCOMMA          reduce using rule 34 (nonLabelledStatement -> forStatement .)
    RETURN          reduce using rule 34 (nonLabelledStatement -> forStatement .)
    IF              reduce using rule 34 (nonLabelledStatement -> forStatement .)
    FOR             reduce using rule 34 (nonLabelledStatement -> forStatement .)
    WHILE           reduce using rule 34 (nonLabelledStatement -> forStatement .)
    DO              reduce using rule 34 (nonLabelledStatement -> forStatement .)
    SWITCH          reduce using rule 34 (nonLabelledStatement -> forStatement .)
    BREAK           reduce using rule 34 (nonLabelledStatement -> forStatement .)
    ID              reduce using rule 34 (nonLabelledStatement -> forStatement .)
    NUMBER          reduce using rule 34 (nonLabelledStatement -> forStatement .)
    FLOAT           reduce using rule 34 (nonLabelledStatement -> forStatement .)
    LITERAL_STRING  reduce using rule 34 (nonLabelledStatement -> forStatement .)
    VAR             reduce using rule 34 (nonLabelledStatement -> forStatement .)
    INT             reduce using rule 34 (nonLabelledStatement -> forStatement .)
    CHAR            reduce using rule 34 (nonLabelledStatement -> forStatement .)
    STRING          reduce using rule 34 (nonLabelledStatement -> forStatement .)
    VOID            reduce using rule 34 (nonLabelledStatement -> forStatement .)
    BOOLEAN         reduce using rule 34 (nonLabelledStatement -> forStatement .)
    TRUE            reduce using rule 34 (nonLabelledStatement -> forStatement .)
    FALSE           reduce using rule 34 (nonLabelledStatement -> forStatement .)
    LCON            reduce using rule 34 (nonLabelledStatement -> forStatement .)
    LPAREN          reduce using rule 34 (nonLabelledStatement -> forStatement .)
    RCHAV           reduce using rule 34 (nonLabelledStatement -> forStatement .)
    CASE            reduce using rule 34 (nonLabelledStatement -> forStatement .)
    DEFAULT         reduce using rule 34 (nonLabelledStatement -> forStatement .)
    ELSE            reduce using rule 34 (nonLabelledStatement -> forStatement .)


state 35

    (35) nonLabelledStatement -> whileStatement .

    LCHAV           reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    PCOMMA          reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    RETURN          reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    IF              reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    FOR             reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    WHILE           reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    DO              reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    SWITCH          reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    BREAK           reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    ID              reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    NUMBER          reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    FLOAT           reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    LITERAL_STRING  reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    VAR             reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    INT             reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    CHAR            reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    STRING          reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    VOID            reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    BOOLEAN         reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    TRUE            reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    FALSE           reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    LCON            reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    LPAREN          reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    RCHAV           reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    CASE            reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    DEFAULT         reduce using rule 35 (nonLabelledStatement -> whileStatement .)
    ELSE            reduce using rule 35 (nonLabelledStatement -> whileStatement .)


state 36

    (36) nonLabelledStatement -> doStatement .

    LCHAV           reduce using rule 36 (nonLabelledStatement -> doStatement .)
    PCOMMA          reduce using rule 36 (nonLabelledStatement -> doStatement .)
    RETURN          reduce using rule 36 (nonLabelledStatement -> doStatement .)
    IF              reduce using rule 36 (nonLabelledStatement -> doStatement .)
    FOR             reduce using rule 36 (nonLabelledStatement -> doStatement .)
    WHILE           reduce using rule 36 (nonLabelledStatement -> doStatement .)
    DO              reduce using rule 36 (nonLabelledStatement -> doStatement .)
    SWITCH          reduce using rule 36 (nonLabelledStatement -> doStatement .)
    BREAK           reduce using rule 36 (nonLabelledStatement -> doStatement .)
    ID              reduce using rule 36 (nonLabelledStatement -> doStatement .)
    NUMBER          reduce using rule 36 (nonLabelledStatement -> doStatement .)
    FLOAT           reduce using rule 36 (nonLabelledStatement -> doStatement .)
    LITERAL_STRING  reduce using rule 36 (nonLabelledStatement -> doStatement .)
    VAR             reduce using rule 36 (nonLabelledStatement -> doStatement .)
    INT             reduce using rule 36 (nonLabelledStatement -> doStatement .)
    CHAR            reduce using rule 36 (nonLabelledStatement -> doStatement .)
    STRING          reduce using rule 36 (nonLabelledStatement -> doStatement .)
    VOID            reduce using rule 36 (nonLabelledStatement -> doStatement .)
    BOOLEAN         reduce using rule 36 (nonLabelledStatement -> doStatement .)
    TRUE            reduce using rule 36 (nonLabelledStatement -> doStatement .)
    FALSE           reduce using rule 36 (nonLabelledStatement -> doStatement .)
    LCON            reduce using rule 36 (nonLabelledStatement -> doStatement .)
    LPAREN          reduce using rule 36 (nonLabelledStatement -> doStatement .)
    RCHAV           reduce using rule 36 (nonLabelledStatement -> doStatement .)
    CASE            reduce using rule 36 (nonLabelledStatement -> doStatement .)
    DEFAULT         reduce using rule 36 (nonLabelledStatement -> doStatement .)
    ELSE            reduce using rule 36 (nonLabelledStatement -> doStatement .)


state 37

    (37) nonLabelledStatement -> switchStatement .

    LCHAV           reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    PCOMMA          reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    RETURN          reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    IF              reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    FOR             reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    WHILE           reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    DO              reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    SWITCH          reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    BREAK           reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    ID              reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    NUMBER          reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    FLOAT           reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    LITERAL_STRING  reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    VAR             reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    INT             reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    CHAR            reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    STRING          reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    VOID            reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    BOOLEAN         reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    TRUE            reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    FALSE           reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    LCON            reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    LPAREN          reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    RCHAV           reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    CASE            reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    DEFAULT         reduce using rule 37 (nonLabelledStatement -> switchStatement .)
    ELSE            reduce using rule 37 (nonLabelledStatement -> switchStatement .)


state 38

    (38) nonLabelledStatement -> breakStatement .

    LCHAV           reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    PCOMMA          reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    RETURN          reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    IF              reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    FOR             reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    WHILE           reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    DO              reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    SWITCH          reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    BREAK           reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    ID              reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    NUMBER          reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    FLOAT           reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    LITERAL_STRING  reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    VAR             reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    INT             reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    CHAR            reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    STRING          reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    VOID            reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    BOOLEAN         reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    TRUE            reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    FALSE           reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    LCON            reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    LPAREN          reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    RCHAV           reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    CASE            reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    DEFAULT         reduce using rule 38 (nonLabelledStatement -> breakStatement .)
    ELSE            reduce using rule 38 (nonLabelledStatement -> breakStatement .)


state 39

    (44) expressionStatement -> PCOMMA .

    LCHAV           reduce using rule 44 (expressionStatement -> PCOMMA .)
    PCOMMA          reduce using rule 44 (expressionStatement -> PCOMMA .)
    RETURN          reduce using rule 44 (expressionStatement -> PCOMMA .)
    IF              reduce using rule 44 (expressionStatement -> PCOMMA .)
    FOR             reduce using rule 44 (expressionStatement -> PCOMMA .)
    WHILE           reduce using rule 44 (expressionStatement -> PCOMMA .)
    DO              reduce using rule 44 (expressionStatement -> PCOMMA .)
    SWITCH          reduce using rule 44 (expressionStatement -> PCOMMA .)
    BREAK           reduce using rule 44 (expressionStatement -> PCOMMA .)
    ID              reduce using rule 44 (expressionStatement -> PCOMMA .)
    NUMBER          reduce using rule 44 (expressionStatement -> PCOMMA .)
    FLOAT           reduce using rule 44 (expressionStatement -> PCOMMA .)
    LITERAL_STRING  reduce using rule 44 (expressionStatement -> PCOMMA .)
    VAR             reduce using rule 44 (expressionStatement -> PCOMMA .)
    INT             reduce using rule 44 (expressionStatement -> PCOMMA .)
    CHAR            reduce using rule 44 (expressionStatement -> PCOMMA .)
    STRING          reduce using rule 44 (expressionStatement -> PCOMMA .)
    VOID            reduce using rule 44 (expressionStatement -> PCOMMA .)
    BOOLEAN         reduce using rule 44 (expressionStatement -> PCOMMA .)
    TRUE            reduce using rule 44 (expressionStatement -> PCOMMA .)
    FALSE           reduce using rule 44 (expressionStatement -> PCOMMA .)
    LCON            reduce using rule 44 (expressionStatement -> PCOMMA .)
    LPAREN          reduce using rule 44 (expressionStatement -> PCOMMA .)
    RCHAV           reduce using rule 44 (expressionStatement -> PCOMMA .)
    CASE            reduce using rule 44 (expressionStatement -> PCOMMA .)
    DEFAULT         reduce using rule 44 (expressionStatement -> PCOMMA .)
    ELSE            reduce using rule 44 (expressionStatement -> PCOMMA .)


state 40

    (45) expressionStatement -> expression . PCOMMA

    PCOMMA          shift and go to state 84


state 41

    (39) localVariableDeclaration -> initializedVariableDeclaration . PCOMMA
    (43) initializedVariableDeclaration -> initializedVariableDeclaration . COMMA ID

    PCOMMA          shift and go to state 85
    COMMA           shift and go to state 86


state 42

    (87) returnStatement -> RETURN . PCOMMA
    (88) returnStatement -> RETURN . expression PCOMMA
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    PCOMMA          shift and go to state 87
    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 88
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 43

    (89) ifStatement -> IF . LPAREN expression RPAREN statement
    (90) ifStatement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 90


state 44

    (72) primary -> LPAREN . expression RPAREN
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 91
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 45

    (91) forStatement -> FOR . LPAREN forLoopParts RPAREN statement

    LPAREN          shift and go to state 92


state 46

    (99) whileStatement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 93


state 47

    (100) doStatement -> DO . statement WHILE LPAREN expression RPAREN PCOMMA
    (28) statement -> . nonLabelledStatement
    (29) nonLabelledStatement -> . block
    (30) nonLabelledStatement -> . expressionStatement
    (31) nonLabelledStatement -> . localVariableDeclaration
    (32) nonLabelledStatement -> . returnStatement
    (33) nonLabelledStatement -> . ifStatement
    (34) nonLabelledStatement -> . forStatement
    (35) nonLabelledStatement -> . whileStatement
    (36) nonLabelledStatement -> . doStatement
    (37) nonLabelledStatement -> . switchStatement
    (38) nonLabelledStatement -> . breakStatement
    (24) block -> . LCHAV statements RCHAV
    (25) block -> . LCHAV RCHAV
    (44) expressionStatement -> . PCOMMA
    (45) expressionStatement -> . expression PCOMMA
    (39) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (87) returnStatement -> . RETURN PCOMMA
    (88) returnStatement -> . RETURN expression PCOMMA
    (89) ifStatement -> . IF LPAREN expression RPAREN statement
    (90) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (91) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (99) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (100) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (46) expression -> . orExpression
    (40) initializedVariableDeclaration -> . declaredIdentifier
    (41) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (42) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (43) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    LPAREN          shift and go to state 44

    statement                      shift and go to state 94
    expression                     shift and go to state 40
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72

state 48

    (101) switchStatement -> SWITCH . LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> SWITCH . LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV

    LPAREN          shift and go to state 95


state 49

    (107) breakStatement -> BREAK . PCOMMA
    (108) breakStatement -> BREAK . ID PCOMMA

    PCOMMA          shift and go to state 96
    ID              shift and go to state 97


state 50

    (73) literal -> ID .
    (81) listLiteralID -> ID . listLiteral
    (15) functionSignature -> ID . formalParameterList
    (80) listLiteral -> . LCON expressionList RCON
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    ATRIBUIR        reduce using rule 73 (literal -> ID .)
    SOMASOMA        reduce using rule 73 (literal -> ID .)
    SUBSUB          reduce using rule 73 (literal -> ID .)
    VEZES           reduce using rule 73 (literal -> ID .)
    DIVIDIR         reduce using rule 73 (literal -> ID .)
    RESTO           reduce using rule 73 (literal -> ID .)
    SOMA            reduce using rule 73 (literal -> ID .)
    SUBTRAIR        reduce using rule 73 (literal -> ID .)
    MENOR           reduce using rule 73 (literal -> ID .)
    MAIOR           reduce using rule 73 (literal -> ID .)
    MENORI          reduce using rule 73 (literal -> ID .)
    MAIORI          reduce using rule 73 (literal -> ID .)
    IGUAL           reduce using rule 73 (literal -> ID .)
    NEG             reduce using rule 73 (literal -> ID .)
    AND             reduce using rule 73 (literal -> ID .)
    OR              reduce using rule 73 (literal -> ID .)
    PCOMMA          reduce using rule 73 (literal -> ID .)
    LCON            shift and go to state 65
    LPAREN          shift and go to state 20

    listLiteral                    shift and go to state 98
    formalParameterList            shift and go to state 19

state 51

    (46) expression -> orExpression .
    (48) orExpression -> orExpression . OR andExpression

    PCOMMA          reduce using rule 46 (expression -> orExpression .)
    COMMA           reduce using rule 46 (expression -> orExpression .)
    RPAREN          reduce using rule 46 (expression -> orExpression .)
    RCON            reduce using rule 46 (expression -> orExpression .)
    PONTOS          reduce using rule 46 (expression -> orExpression .)
    OR              shift and go to state 99


state 52

    (40) initializedVariableDeclaration -> declaredIdentifier .
    (41) initializedVariableDeclaration -> declaredIdentifier . ATRIBUIR expression

    PCOMMA          reduce using rule 40 (initializedVariableDeclaration -> declaredIdentifier .)
    COMMA           reduce using rule 40 (initializedVariableDeclaration -> declaredIdentifier .)
    ATRIBUIR        shift and go to state 100


state 53

    (42) initializedVariableDeclaration -> literal . ATRIBUIR expression
    (71) primary -> literal .

    ATRIBUIR        shift and go to state 101
    SOMASOMA        reduce using rule 71 (primary -> literal .)
    SUBSUB          reduce using rule 71 (primary -> literal .)
    VEZES           reduce using rule 71 (primary -> literal .)
    DIVIDIR         reduce using rule 71 (primary -> literal .)
    RESTO           reduce using rule 71 (primary -> literal .)
    SOMA            reduce using rule 71 (primary -> literal .)
    SUBTRAIR        reduce using rule 71 (primary -> literal .)
    MENOR           reduce using rule 71 (primary -> literal .)
    MAIOR           reduce using rule 71 (primary -> literal .)
    MENORI          reduce using rule 71 (primary -> literal .)
    MAIORI          reduce using rule 71 (primary -> literal .)
    IGUAL           reduce using rule 71 (primary -> literal .)
    NEG             reduce using rule 71 (primary -> literal .)
    AND             reduce using rule 71 (primary -> literal .)
    OR              reduce using rule 71 (primary -> literal .)
    PCOMMA          reduce using rule 71 (primary -> literal .)


state 54

    (47) orExpression -> andExpression .
    (50) andExpression -> andExpression . AND equalityExpression

    OR              reduce using rule 47 (orExpression -> andExpression .)
    PCOMMA          reduce using rule 47 (orExpression -> andExpression .)
    COMMA           reduce using rule 47 (orExpression -> andExpression .)
    RPAREN          reduce using rule 47 (orExpression -> andExpression .)
    RCON            reduce using rule 47 (orExpression -> andExpression .)
    PONTOS          reduce using rule 47 (orExpression -> andExpression .)
    AND             shift and go to state 102


state 55

    (7) declaredIdentifier -> type . ID
    (16) functionSignature -> type . ID formalParameterList

    ID              shift and go to state 103


state 56

    (74) literal -> booleanLiteral .

    ATRIBUIR        reduce using rule 74 (literal -> booleanLiteral .)
    SOMASOMA        reduce using rule 74 (literal -> booleanLiteral .)
    SUBSUB          reduce using rule 74 (literal -> booleanLiteral .)
    VEZES           reduce using rule 74 (literal -> booleanLiteral .)
    DIVIDIR         reduce using rule 74 (literal -> booleanLiteral .)
    RESTO           reduce using rule 74 (literal -> booleanLiteral .)
    SOMA            reduce using rule 74 (literal -> booleanLiteral .)
    SUBTRAIR        reduce using rule 74 (literal -> booleanLiteral .)
    MENOR           reduce using rule 74 (literal -> booleanLiteral .)
    MAIOR           reduce using rule 74 (literal -> booleanLiteral .)
    MENORI          reduce using rule 74 (literal -> booleanLiteral .)
    MAIORI          reduce using rule 74 (literal -> booleanLiteral .)
    IGUAL           reduce using rule 74 (literal -> booleanLiteral .)
    NEG             reduce using rule 74 (literal -> booleanLiteral .)
    AND             reduce using rule 74 (literal -> booleanLiteral .)
    OR              reduce using rule 74 (literal -> booleanLiteral .)
    PCOMMA          reduce using rule 74 (literal -> booleanLiteral .)
    COMMA           reduce using rule 74 (literal -> booleanLiteral .)
    RPAREN          reduce using rule 74 (literal -> booleanLiteral .)
    RCON            reduce using rule 74 (literal -> booleanLiteral .)
    PONTOS          reduce using rule 74 (literal -> booleanLiteral .)


state 57

    (75) literal -> listLiteralID .

    ATRIBUIR        reduce using rule 75 (literal -> listLiteralID .)
    SOMASOMA        reduce using rule 75 (literal -> listLiteralID .)
    SUBSUB          reduce using rule 75 (literal -> listLiteralID .)
    VEZES           reduce using rule 75 (literal -> listLiteralID .)
    DIVIDIR         reduce using rule 75 (literal -> listLiteralID .)
    RESTO           reduce using rule 75 (literal -> listLiteralID .)
    SOMA            reduce using rule 75 (literal -> listLiteralID .)
    SUBTRAIR        reduce using rule 75 (literal -> listLiteralID .)
    MENOR           reduce using rule 75 (literal -> listLiteralID .)
    MAIOR           reduce using rule 75 (literal -> listLiteralID .)
    MENORI          reduce using rule 75 (literal -> listLiteralID .)
    MAIORI          reduce using rule 75 (literal -> listLiteralID .)
    IGUAL           reduce using rule 75 (literal -> listLiteralID .)
    NEG             reduce using rule 75 (literal -> listLiteralID .)
    AND             reduce using rule 75 (literal -> listLiteralID .)
    OR              reduce using rule 75 (literal -> listLiteralID .)
    PCOMMA          reduce using rule 75 (literal -> listLiteralID .)
    COMMA           reduce using rule 75 (literal -> listLiteralID .)
    RPAREN          reduce using rule 75 (literal -> listLiteralID .)
    RCON            reduce using rule 75 (literal -> listLiteralID .)
    PONTOS          reduce using rule 75 (literal -> listLiteralID .)


state 58

    (76) literal -> listLiteral .

    ATRIBUIR        reduce using rule 76 (literal -> listLiteral .)
    SOMASOMA        reduce using rule 76 (literal -> listLiteral .)
    SUBSUB          reduce using rule 76 (literal -> listLiteral .)
    VEZES           reduce using rule 76 (literal -> listLiteral .)
    DIVIDIR         reduce using rule 76 (literal -> listLiteral .)
    RESTO           reduce using rule 76 (literal -> listLiteral .)
    SOMA            reduce using rule 76 (literal -> listLiteral .)
    SUBTRAIR        reduce using rule 76 (literal -> listLiteral .)
    MENOR           reduce using rule 76 (literal -> listLiteral .)
    MAIOR           reduce using rule 76 (literal -> listLiteral .)
    MENORI          reduce using rule 76 (literal -> listLiteral .)
    MAIORI          reduce using rule 76 (literal -> listLiteral .)
    IGUAL           reduce using rule 76 (literal -> listLiteral .)
    NEG             reduce using rule 76 (literal -> listLiteral .)
    AND             reduce using rule 76 (literal -> listLiteral .)
    OR              reduce using rule 76 (literal -> listLiteral .)
    PCOMMA          reduce using rule 76 (literal -> listLiteral .)
    COMMA           reduce using rule 76 (literal -> listLiteral .)
    RPAREN          reduce using rule 76 (literal -> listLiteral .)
    RCON            reduce using rule 76 (literal -> listLiteral .)
    PONTOS          reduce using rule 76 (literal -> listLiteral .)


state 59

    (77) literal -> NUMBER .

    ATRIBUIR        reduce using rule 77 (literal -> NUMBER .)
    SOMASOMA        reduce using rule 77 (literal -> NUMBER .)
    SUBSUB          reduce using rule 77 (literal -> NUMBER .)
    VEZES           reduce using rule 77 (literal -> NUMBER .)
    DIVIDIR         reduce using rule 77 (literal -> NUMBER .)
    RESTO           reduce using rule 77 (literal -> NUMBER .)
    SOMA            reduce using rule 77 (literal -> NUMBER .)
    SUBTRAIR        reduce using rule 77 (literal -> NUMBER .)
    MENOR           reduce using rule 77 (literal -> NUMBER .)
    MAIOR           reduce using rule 77 (literal -> NUMBER .)
    MENORI          reduce using rule 77 (literal -> NUMBER .)
    MAIORI          reduce using rule 77 (literal -> NUMBER .)
    IGUAL           reduce using rule 77 (literal -> NUMBER .)
    NEG             reduce using rule 77 (literal -> NUMBER .)
    AND             reduce using rule 77 (literal -> NUMBER .)
    OR              reduce using rule 77 (literal -> NUMBER .)
    PCOMMA          reduce using rule 77 (literal -> NUMBER .)
    COMMA           reduce using rule 77 (literal -> NUMBER .)
    RPAREN          reduce using rule 77 (literal -> NUMBER .)
    RCON            reduce using rule 77 (literal -> NUMBER .)
    PONTOS          reduce using rule 77 (literal -> NUMBER .)


state 60

    (78) literal -> FLOAT .
    (10) type -> FLOAT .

    ATRIBUIR        reduce using rule 78 (literal -> FLOAT .)
    SOMASOMA        reduce using rule 78 (literal -> FLOAT .)
    SUBSUB          reduce using rule 78 (literal -> FLOAT .)
    VEZES           reduce using rule 78 (literal -> FLOAT .)
    DIVIDIR         reduce using rule 78 (literal -> FLOAT .)
    RESTO           reduce using rule 78 (literal -> FLOAT .)
    SOMA            reduce using rule 78 (literal -> FLOAT .)
    SUBTRAIR        reduce using rule 78 (literal -> FLOAT .)
    MENOR           reduce using rule 78 (literal -> FLOAT .)
    MAIOR           reduce using rule 78 (literal -> FLOAT .)
    MENORI          reduce using rule 78 (literal -> FLOAT .)
    MAIORI          reduce using rule 78 (literal -> FLOAT .)
    IGUAL           reduce using rule 78 (literal -> FLOAT .)
    NEG             reduce using rule 78 (literal -> FLOAT .)
    AND             reduce using rule 78 (literal -> FLOAT .)
    OR              reduce using rule 78 (literal -> FLOAT .)
    PCOMMA          reduce using rule 78 (literal -> FLOAT .)
    RPAREN          reduce using rule 78 (literal -> FLOAT .)
    COMMA           reduce using rule 78 (literal -> FLOAT .)
    RCON            reduce using rule 78 (literal -> FLOAT .)
    PONTOS          reduce using rule 78 (literal -> FLOAT .)
    ID              reduce using rule 10 (type -> FLOAT .)


state 61

    (79) literal -> LITERAL_STRING .

    ATRIBUIR        reduce using rule 79 (literal -> LITERAL_STRING .)
    SOMASOMA        reduce using rule 79 (literal -> LITERAL_STRING .)
    SUBSUB          reduce using rule 79 (literal -> LITERAL_STRING .)
    VEZES           reduce using rule 79 (literal -> LITERAL_STRING .)
    DIVIDIR         reduce using rule 79 (literal -> LITERAL_STRING .)
    RESTO           reduce using rule 79 (literal -> LITERAL_STRING .)
    SOMA            reduce using rule 79 (literal -> LITERAL_STRING .)
    SUBTRAIR        reduce using rule 79 (literal -> LITERAL_STRING .)
    MENOR           reduce using rule 79 (literal -> LITERAL_STRING .)
    MAIOR           reduce using rule 79 (literal -> LITERAL_STRING .)
    MENORI          reduce using rule 79 (literal -> LITERAL_STRING .)
    MAIORI          reduce using rule 79 (literal -> LITERAL_STRING .)
    IGUAL           reduce using rule 79 (literal -> LITERAL_STRING .)
    NEG             reduce using rule 79 (literal -> LITERAL_STRING .)
    AND             reduce using rule 79 (literal -> LITERAL_STRING .)
    OR              reduce using rule 79 (literal -> LITERAL_STRING .)
    PCOMMA          reduce using rule 79 (literal -> LITERAL_STRING .)
    COMMA           reduce using rule 79 (literal -> LITERAL_STRING .)
    RPAREN          reduce using rule 79 (literal -> LITERAL_STRING .)
    RCON            reduce using rule 79 (literal -> LITERAL_STRING .)
    PONTOS          reduce using rule 79 (literal -> LITERAL_STRING .)


state 62

    (49) andExpression -> equalityExpression .
    (52) equalityExpression -> equalityExpression . IGUAL relacionalExpression
    (53) equalityExpression -> equalityExpression . NEG relacionalExpression

    AND             reduce using rule 49 (andExpression -> equalityExpression .)
    OR              reduce using rule 49 (andExpression -> equalityExpression .)
    PCOMMA          reduce using rule 49 (andExpression -> equalityExpression .)
    COMMA           reduce using rule 49 (andExpression -> equalityExpression .)
    RPAREN          reduce using rule 49 (andExpression -> equalityExpression .)
    RCON            reduce using rule 49 (andExpression -> equalityExpression .)
    PONTOS          reduce using rule 49 (andExpression -> equalityExpression .)
    IGUAL           shift and go to state 104
    NEG             shift and go to state 105


state 63

    (82) booleanLiteral -> TRUE .

    ATRIBUIR        reduce using rule 82 (booleanLiteral -> TRUE .)
    SOMASOMA        reduce using rule 82 (booleanLiteral -> TRUE .)
    SUBSUB          reduce using rule 82 (booleanLiteral -> TRUE .)
    VEZES           reduce using rule 82 (booleanLiteral -> TRUE .)
    DIVIDIR         reduce using rule 82 (booleanLiteral -> TRUE .)
    RESTO           reduce using rule 82 (booleanLiteral -> TRUE .)
    SOMA            reduce using rule 82 (booleanLiteral -> TRUE .)
    SUBTRAIR        reduce using rule 82 (booleanLiteral -> TRUE .)
    MENOR           reduce using rule 82 (booleanLiteral -> TRUE .)
    MAIOR           reduce using rule 82 (booleanLiteral -> TRUE .)
    MENORI          reduce using rule 82 (booleanLiteral -> TRUE .)
    MAIORI          reduce using rule 82 (booleanLiteral -> TRUE .)
    IGUAL           reduce using rule 82 (booleanLiteral -> TRUE .)
    NEG             reduce using rule 82 (booleanLiteral -> TRUE .)
    AND             reduce using rule 82 (booleanLiteral -> TRUE .)
    OR              reduce using rule 82 (booleanLiteral -> TRUE .)
    PCOMMA          reduce using rule 82 (booleanLiteral -> TRUE .)
    COMMA           reduce using rule 82 (booleanLiteral -> TRUE .)
    RPAREN          reduce using rule 82 (booleanLiteral -> TRUE .)
    RCON            reduce using rule 82 (booleanLiteral -> TRUE .)
    PONTOS          reduce using rule 82 (booleanLiteral -> TRUE .)


state 64

    (83) booleanLiteral -> FALSE .

    ATRIBUIR        reduce using rule 83 (booleanLiteral -> FALSE .)
    SOMASOMA        reduce using rule 83 (booleanLiteral -> FALSE .)
    SUBSUB          reduce using rule 83 (booleanLiteral -> FALSE .)
    VEZES           reduce using rule 83 (booleanLiteral -> FALSE .)
    DIVIDIR         reduce using rule 83 (booleanLiteral -> FALSE .)
    RESTO           reduce using rule 83 (booleanLiteral -> FALSE .)
    SOMA            reduce using rule 83 (booleanLiteral -> FALSE .)
    SUBTRAIR        reduce using rule 83 (booleanLiteral -> FALSE .)
    MENOR           reduce using rule 83 (booleanLiteral -> FALSE .)
    MAIOR           reduce using rule 83 (booleanLiteral -> FALSE .)
    MENORI          reduce using rule 83 (booleanLiteral -> FALSE .)
    MAIORI          reduce using rule 83 (booleanLiteral -> FALSE .)
    IGUAL           reduce using rule 83 (booleanLiteral -> FALSE .)
    NEG             reduce using rule 83 (booleanLiteral -> FALSE .)
    AND             reduce using rule 83 (booleanLiteral -> FALSE .)
    OR              reduce using rule 83 (booleanLiteral -> FALSE .)
    PCOMMA          reduce using rule 83 (booleanLiteral -> FALSE .)
    COMMA           reduce using rule 83 (booleanLiteral -> FALSE .)
    RPAREN          reduce using rule 83 (booleanLiteral -> FALSE .)
    RCON            reduce using rule 83 (booleanLiteral -> FALSE .)
    PONTOS          reduce using rule 83 (booleanLiteral -> FALSE .)


state 65

    (80) listLiteral -> LCON . expressionList RCON
    (84) expressionList -> . expression COMMA
    (85) expressionList -> . expression
    (86) expressionList -> . expression COMMA expressionList
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expressionList                 shift and go to state 106
    expression                     shift and go to state 107
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 66

    (51) equalityExpression -> relacionalExpression .
    (55) relacionalExpression -> relacionalExpression . MENOR addExpression
    (56) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (57) relacionalExpression -> relacionalExpression . MENORI addExpression
    (58) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 51 (equalityExpression -> relacionalExpression .)
    NEG             reduce using rule 51 (equalityExpression -> relacionalExpression .)
    AND             reduce using rule 51 (equalityExpression -> relacionalExpression .)
    OR              reduce using rule 51 (equalityExpression -> relacionalExpression .)
    PCOMMA          reduce using rule 51 (equalityExpression -> relacionalExpression .)
    COMMA           reduce using rule 51 (equalityExpression -> relacionalExpression .)
    RPAREN          reduce using rule 51 (equalityExpression -> relacionalExpression .)
    RCON            reduce using rule 51 (equalityExpression -> relacionalExpression .)
    PONTOS          reduce using rule 51 (equalityExpression -> relacionalExpression .)
    MENOR           shift and go to state 108
    MAIOR           shift and go to state 109
    MENORI          shift and go to state 110
    MAIORI          shift and go to state 111


state 67

    (54) relacionalExpression -> addExpression .
    (60) addExpression -> addExpression . SOMA multExpression
    (61) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 54 (relacionalExpression -> addExpression .)
    MAIOR           reduce using rule 54 (relacionalExpression -> addExpression .)
    MENORI          reduce using rule 54 (relacionalExpression -> addExpression .)
    MAIORI          reduce using rule 54 (relacionalExpression -> addExpression .)
    IGUAL           reduce using rule 54 (relacionalExpression -> addExpression .)
    NEG             reduce using rule 54 (relacionalExpression -> addExpression .)
    AND             reduce using rule 54 (relacionalExpression -> addExpression .)
    OR              reduce using rule 54 (relacionalExpression -> addExpression .)
    PCOMMA          reduce using rule 54 (relacionalExpression -> addExpression .)
    COMMA           reduce using rule 54 (relacionalExpression -> addExpression .)
    RPAREN          reduce using rule 54 (relacionalExpression -> addExpression .)
    RCON            reduce using rule 54 (relacionalExpression -> addExpression .)
    PONTOS          reduce using rule 54 (relacionalExpression -> addExpression .)
    SOMA            shift and go to state 112
    SUBTRAIR        shift and go to state 113


state 68

    (59) addExpression -> multExpression .
    (63) multExpression -> multExpression . VEZES unaryExpression
    (64) multExpression -> multExpression . DIVIDIR unaryExpression
    (65) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 59 (addExpression -> multExpression .)
    SUBTRAIR        reduce using rule 59 (addExpression -> multExpression .)
    MENOR           reduce using rule 59 (addExpression -> multExpression .)
    MAIOR           reduce using rule 59 (addExpression -> multExpression .)
    MENORI          reduce using rule 59 (addExpression -> multExpression .)
    MAIORI          reduce using rule 59 (addExpression -> multExpression .)
    IGUAL           reduce using rule 59 (addExpression -> multExpression .)
    NEG             reduce using rule 59 (addExpression -> multExpression .)
    AND             reduce using rule 59 (addExpression -> multExpression .)
    OR              reduce using rule 59 (addExpression -> multExpression .)
    PCOMMA          reduce using rule 59 (addExpression -> multExpression .)
    COMMA           reduce using rule 59 (addExpression -> multExpression .)
    RPAREN          reduce using rule 59 (addExpression -> multExpression .)
    RCON            reduce using rule 59 (addExpression -> multExpression .)
    PONTOS          reduce using rule 59 (addExpression -> multExpression .)
    VEZES           shift and go to state 114
    DIVIDIR         shift and go to state 115
    RESTO           shift and go to state 116


state 69

    (62) multExpression -> unaryExpression .
    (68) unaryExpression -> unaryExpression . SOMASOMA
    (69) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 62 (multExpression -> unaryExpression .)
    DIVIDIR         reduce using rule 62 (multExpression -> unaryExpression .)
    RESTO           reduce using rule 62 (multExpression -> unaryExpression .)
    SOMA            reduce using rule 62 (multExpression -> unaryExpression .)
    SUBTRAIR        reduce using rule 62 (multExpression -> unaryExpression .)
    MENOR           reduce using rule 62 (multExpression -> unaryExpression .)
    MAIOR           reduce using rule 62 (multExpression -> unaryExpression .)
    MENORI          reduce using rule 62 (multExpression -> unaryExpression .)
    MAIORI          reduce using rule 62 (multExpression -> unaryExpression .)
    IGUAL           reduce using rule 62 (multExpression -> unaryExpression .)
    NEG             reduce using rule 62 (multExpression -> unaryExpression .)
    AND             reduce using rule 62 (multExpression -> unaryExpression .)
    OR              reduce using rule 62 (multExpression -> unaryExpression .)
    PCOMMA          reduce using rule 62 (multExpression -> unaryExpression .)
    COMMA           reduce using rule 62 (multExpression -> unaryExpression .)
    RPAREN          reduce using rule 62 (multExpression -> unaryExpression .)
    RCON            reduce using rule 62 (multExpression -> unaryExpression .)
    PONTOS          reduce using rule 62 (multExpression -> unaryExpression .)
    SOMASOMA        shift and go to state 117
    SUBSUB          shift and go to state 118


state 70

    (66) unaryExpression -> primary .

    SOMASOMA        reduce using rule 66 (unaryExpression -> primary .)
    SUBSUB          reduce using rule 66 (unaryExpression -> primary .)
    VEZES           reduce using rule 66 (unaryExpression -> primary .)
    DIVIDIR         reduce using rule 66 (unaryExpression -> primary .)
    RESTO           reduce using rule 66 (unaryExpression -> primary .)
    SOMA            reduce using rule 66 (unaryExpression -> primary .)
    SUBTRAIR        reduce using rule 66 (unaryExpression -> primary .)
    MENOR           reduce using rule 66 (unaryExpression -> primary .)
    MAIOR           reduce using rule 66 (unaryExpression -> primary .)
    MENORI          reduce using rule 66 (unaryExpression -> primary .)
    MAIORI          reduce using rule 66 (unaryExpression -> primary .)
    IGUAL           reduce using rule 66 (unaryExpression -> primary .)
    NEG             reduce using rule 66 (unaryExpression -> primary .)
    AND             reduce using rule 66 (unaryExpression -> primary .)
    OR              reduce using rule 66 (unaryExpression -> primary .)
    PCOMMA          reduce using rule 66 (unaryExpression -> primary .)
    COMMA           reduce using rule 66 (unaryExpression -> primary .)
    RPAREN          reduce using rule 66 (unaryExpression -> primary .)
    RCON            reduce using rule 66 (unaryExpression -> primary .)
    PONTOS          reduce using rule 66 (unaryExpression -> primary .)


state 71

    (67) unaryExpression -> functionCall .

    SOMASOMA        reduce using rule 67 (unaryExpression -> functionCall .)
    SUBSUB          reduce using rule 67 (unaryExpression -> functionCall .)
    VEZES           reduce using rule 67 (unaryExpression -> functionCall .)
    DIVIDIR         reduce using rule 67 (unaryExpression -> functionCall .)
    RESTO           reduce using rule 67 (unaryExpression -> functionCall .)
    SOMA            reduce using rule 67 (unaryExpression -> functionCall .)
    SUBTRAIR        reduce using rule 67 (unaryExpression -> functionCall .)
    MENOR           reduce using rule 67 (unaryExpression -> functionCall .)
    MAIOR           reduce using rule 67 (unaryExpression -> functionCall .)
    MENORI          reduce using rule 67 (unaryExpression -> functionCall .)
    MAIORI          reduce using rule 67 (unaryExpression -> functionCall .)
    IGUAL           reduce using rule 67 (unaryExpression -> functionCall .)
    NEG             reduce using rule 67 (unaryExpression -> functionCall .)
    AND             reduce using rule 67 (unaryExpression -> functionCall .)
    OR              reduce using rule 67 (unaryExpression -> functionCall .)
    PCOMMA          reduce using rule 67 (unaryExpression -> functionCall .)
    COMMA           reduce using rule 67 (unaryExpression -> functionCall .)
    RPAREN          reduce using rule 67 (unaryExpression -> functionCall .)
    RCON            reduce using rule 67 (unaryExpression -> functionCall .)
    PONTOS          reduce using rule 67 (unaryExpression -> functionCall .)


state 72

    (70) functionCall -> functionSignature .

    SOMASOMA        reduce using rule 70 (functionCall -> functionSignature .)
    SUBSUB          reduce using rule 70 (functionCall -> functionSignature .)
    VEZES           reduce using rule 70 (functionCall -> functionSignature .)
    DIVIDIR         reduce using rule 70 (functionCall -> functionSignature .)
    RESTO           reduce using rule 70 (functionCall -> functionSignature .)
    SOMA            reduce using rule 70 (functionCall -> functionSignature .)
    SUBTRAIR        reduce using rule 70 (functionCall -> functionSignature .)
    MENOR           reduce using rule 70 (functionCall -> functionSignature .)
    MAIOR           reduce using rule 70 (functionCall -> functionSignature .)
    MENORI          reduce using rule 70 (functionCall -> functionSignature .)
    MAIORI          reduce using rule 70 (functionCall -> functionSignature .)
    IGUAL           reduce using rule 70 (functionCall -> functionSignature .)
    NEG             reduce using rule 70 (functionCall -> functionSignature .)
    AND             reduce using rule 70 (functionCall -> functionSignature .)
    OR              reduce using rule 70 (functionCall -> functionSignature .)
    PCOMMA          reduce using rule 70 (functionCall -> functionSignature .)
    COMMA           reduce using rule 70 (functionCall -> functionSignature .)
    RPAREN          reduce using rule 70 (functionCall -> functionSignature .)
    RCON            reduce using rule 70 (functionCall -> functionSignature .)
    PONTOS          reduce using rule 70 (functionCall -> functionSignature .)


state 73

    (17) formalParameterList -> LPAREN RPAREN .

    LCHAV           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    SOMASOMA        reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    SUBSUB          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    VEZES           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    DIVIDIR         reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    RESTO           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    SOMA            reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    SUBTRAIR        reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    MENOR           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    MAIOR           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    MENORI          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    MAIORI          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    IGUAL           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    NEG             reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    AND             reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    OR              reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    PCOMMA          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    COMMA           reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    RPAREN          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    RCON            reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)
    PONTOS          reduce using rule 17 (formalParameterList -> LPAREN RPAREN .)


state 74

    (18) formalParameterList -> LPAREN normalFormalParameters . RPAREN

    RPAREN          shift and go to state 119


state 75

    (19) normalFormalParameters -> simpleFormalParameter .
    (20) normalFormalParameters -> simpleFormalParameter . COMMA normalFormalParameters

    RPAREN          reduce using rule 19 (normalFormalParameters -> simpleFormalParameter .)
    COMMA           shift and go to state 120


state 76

    (21) simpleFormalParameter -> type . ID
    (16) functionSignature -> type . ID formalParameterList

    ID              shift and go to state 121


state 77

    (73) literal -> ID .
    (15) functionSignature -> ID . formalParameterList
    (81) listLiteralID -> ID . listLiteral
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN
    (80) listLiteral -> . LCON expressionList RCON

    SOMASOMA        reduce using rule 73 (literal -> ID .)
    SUBSUB          reduce using rule 73 (literal -> ID .)
    VEZES           reduce using rule 73 (literal -> ID .)
    DIVIDIR         reduce using rule 73 (literal -> ID .)
    RESTO           reduce using rule 73 (literal -> ID .)
    SOMA            reduce using rule 73 (literal -> ID .)
    SUBTRAIR        reduce using rule 73 (literal -> ID .)
    MENOR           reduce using rule 73 (literal -> ID .)
    MAIOR           reduce using rule 73 (literal -> ID .)
    MENORI          reduce using rule 73 (literal -> ID .)
    MAIORI          reduce using rule 73 (literal -> ID .)
    IGUAL           reduce using rule 73 (literal -> ID .)
    NEG             reduce using rule 73 (literal -> ID .)
    AND             reduce using rule 73 (literal -> ID .)
    OR              reduce using rule 73 (literal -> ID .)
    COMMA           reduce using rule 73 (literal -> ID .)
    RPAREN          reduce using rule 73 (literal -> ID .)
    PCOMMA          reduce using rule 73 (literal -> ID .)
    RCON            reduce using rule 73 (literal -> ID .)
    PONTOS          reduce using rule 73 (literal -> ID .)
    LPAREN          shift and go to state 20
    LCON            shift and go to state 65

    formalParameterList            shift and go to state 19
    listLiteral                    shift and go to state 98

state 78

    (22) simpleFormalParameter -> expression .

    COMMA           reduce using rule 22 (simpleFormalParameter -> expression .)
    RPAREN          reduce using rule 22 (simpleFormalParameter -> expression .)


state 79

    (10) type -> FLOAT .
    (78) literal -> FLOAT .

    ID              reduce using rule 10 (type -> FLOAT .)
    SOMASOMA        reduce using rule 78 (literal -> FLOAT .)
    SUBSUB          reduce using rule 78 (literal -> FLOAT .)
    VEZES           reduce using rule 78 (literal -> FLOAT .)
    DIVIDIR         reduce using rule 78 (literal -> FLOAT .)
    RESTO           reduce using rule 78 (literal -> FLOAT .)
    SOMA            reduce using rule 78 (literal -> FLOAT .)
    SUBTRAIR        reduce using rule 78 (literal -> FLOAT .)
    MENOR           reduce using rule 78 (literal -> FLOAT .)
    MAIOR           reduce using rule 78 (literal -> FLOAT .)
    MENORI          reduce using rule 78 (literal -> FLOAT .)
    MAIORI          reduce using rule 78 (literal -> FLOAT .)
    IGUAL           reduce using rule 78 (literal -> FLOAT .)
    NEG             reduce using rule 78 (literal -> FLOAT .)
    AND             reduce using rule 78 (literal -> FLOAT .)
    OR              reduce using rule 78 (literal -> FLOAT .)
    COMMA           reduce using rule 78 (literal -> FLOAT .)
    RPAREN          reduce using rule 78 (literal -> FLOAT .)


state 80

    (71) primary -> literal .

    SOMASOMA        reduce using rule 71 (primary -> literal .)
    SUBSUB          reduce using rule 71 (primary -> literal .)
    VEZES           reduce using rule 71 (primary -> literal .)
    DIVIDIR         reduce using rule 71 (primary -> literal .)
    RESTO           reduce using rule 71 (primary -> literal .)
    SOMA            reduce using rule 71 (primary -> literal .)
    SUBTRAIR        reduce using rule 71 (primary -> literal .)
    MENOR           reduce using rule 71 (primary -> literal .)
    MAIOR           reduce using rule 71 (primary -> literal .)
    MENORI          reduce using rule 71 (primary -> literal .)
    MAIORI          reduce using rule 71 (primary -> literal .)
    IGUAL           reduce using rule 71 (primary -> literal .)
    NEG             reduce using rule 71 (primary -> literal .)
    AND             reduce using rule 71 (primary -> literal .)
    OR              reduce using rule 71 (primary -> literal .)
    COMMA           reduce using rule 71 (primary -> literal .)
    RPAREN          reduce using rule 71 (primary -> literal .)
    PCOMMA          reduce using rule 71 (primary -> literal .)
    RCON            reduce using rule 71 (primary -> literal .)
    PONTOS          reduce using rule 71 (primary -> literal .)


state 81

    (16) functionSignature -> type ID formalParameterList .

    LCHAV           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    SOMASOMA        reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    SUBSUB          reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    VEZES           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    DIVIDIR         reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    RESTO           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    SOMA            reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    SUBTRAIR        reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    MENOR           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    MAIOR           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    MENORI          reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    MAIORI          reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    IGUAL           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    NEG             reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    AND             reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    OR              reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    PCOMMA          reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    COMMA           reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    RPAREN          reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    RCON            reduce using rule 16 (functionSignature -> type ID formalParameterList .)
    PONTOS          reduce using rule 16 (functionSignature -> type ID formalParameterList .)


state 82

    (24) block -> LCHAV statements RCHAV .

    ID              reduce using rule 24 (block -> LCHAV statements RCHAV .)
    VAR             reduce using rule 24 (block -> LCHAV statements RCHAV .)
    INT             reduce using rule 24 (block -> LCHAV statements RCHAV .)
    FLOAT           reduce using rule 24 (block -> LCHAV statements RCHAV .)
    CHAR            reduce using rule 24 (block -> LCHAV statements RCHAV .)
    STRING          reduce using rule 24 (block -> LCHAV statements RCHAV .)
    VOID            reduce using rule 24 (block -> LCHAV statements RCHAV .)
    BOOLEAN         reduce using rule 24 (block -> LCHAV statements RCHAV .)
    $end            reduce using rule 24 (block -> LCHAV statements RCHAV .)
    LCHAV           reduce using rule 24 (block -> LCHAV statements RCHAV .)
    PCOMMA          reduce using rule 24 (block -> LCHAV statements RCHAV .)
    RETURN          reduce using rule 24 (block -> LCHAV statements RCHAV .)
    IF              reduce using rule 24 (block -> LCHAV statements RCHAV .)
    FOR             reduce using rule 24 (block -> LCHAV statements RCHAV .)
    WHILE           reduce using rule 24 (block -> LCHAV statements RCHAV .)
    DO              reduce using rule 24 (block -> LCHAV statements RCHAV .)
    SWITCH          reduce using rule 24 (block -> LCHAV statements RCHAV .)
    BREAK           reduce using rule 24 (block -> LCHAV statements RCHAV .)
    NUMBER          reduce using rule 24 (block -> LCHAV statements RCHAV .)
    LITERAL_STRING  reduce using rule 24 (block -> LCHAV statements RCHAV .)
    TRUE            reduce using rule 24 (block -> LCHAV statements RCHAV .)
    FALSE           reduce using rule 24 (block -> LCHAV statements RCHAV .)
    LCON            reduce using rule 24 (block -> LCHAV statements RCHAV .)
    LPAREN          reduce using rule 24 (block -> LCHAV statements RCHAV .)
    RCHAV           reduce using rule 24 (block -> LCHAV statements RCHAV .)
    CASE            reduce using rule 24 (block -> LCHAV statements RCHAV .)
    DEFAULT         reduce using rule 24 (block -> LCHAV statements RCHAV .)
    ELSE            reduce using rule 24 (block -> LCHAV statements RCHAV .)


state 83

    (26) statements -> statement statements .

    RCHAV           reduce using rule 26 (statements -> statement statements .)
    CASE            reduce using rule 26 (statements -> statement statements .)
    DEFAULT         reduce using rule 26 (statements -> statement statements .)


state 84

    (45) expressionStatement -> expression PCOMMA .

    LCHAV           reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    PCOMMA          reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    RETURN          reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    IF              reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    FOR             reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    WHILE           reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    DO              reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    SWITCH          reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    BREAK           reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    ID              reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    NUMBER          reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    FLOAT           reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    LITERAL_STRING  reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    VAR             reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    INT             reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    CHAR            reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    STRING          reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    VOID            reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    BOOLEAN         reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    TRUE            reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    FALSE           reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    LCON            reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    LPAREN          reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    RCHAV           reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    CASE            reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    DEFAULT         reduce using rule 45 (expressionStatement -> expression PCOMMA .)
    ELSE            reduce using rule 45 (expressionStatement -> expression PCOMMA .)


state 85

    (39) localVariableDeclaration -> initializedVariableDeclaration PCOMMA .

    LCHAV           reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    PCOMMA          reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    RETURN          reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    IF              reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FOR             reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    WHILE           reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    DO              reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    SWITCH          reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    BREAK           reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    ID              reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    NUMBER          reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FLOAT           reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LITERAL_STRING  reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    VAR             reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    INT             reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    CHAR            reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    STRING          reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    VOID            reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    BOOLEAN         reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    TRUE            reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    FALSE           reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LCON            reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    LPAREN          reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    RCHAV           reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    CASE            reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    DEFAULT         reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)
    ELSE            reduce using rule 39 (localVariableDeclaration -> initializedVariableDeclaration PCOMMA .)


state 86

    (43) initializedVariableDeclaration -> initializedVariableDeclaration COMMA . ID

    ID              shift and go to state 122


state 87

    (87) returnStatement -> RETURN PCOMMA .

    LCHAV           reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    PCOMMA          reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    RETURN          reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    IF              reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    FOR             reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    WHILE           reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    DO              reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    SWITCH          reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    BREAK           reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    ID              reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    NUMBER          reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    FLOAT           reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    LITERAL_STRING  reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    VAR             reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    INT             reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    CHAR            reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    STRING          reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    VOID            reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    BOOLEAN         reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    TRUE            reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    FALSE           reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    LCON            reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    LPAREN          reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    RCHAV           reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    CASE            reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    DEFAULT         reduce using rule 87 (returnStatement -> RETURN PCOMMA .)
    ELSE            reduce using rule 87 (returnStatement -> RETURN PCOMMA .)


state 88

    (88) returnStatement -> RETURN expression . PCOMMA

    PCOMMA          shift and go to state 123


state 89

    (16) functionSignature -> type . ID formalParameterList

    ID              shift and go to state 124


state 90

    (89) ifStatement -> IF LPAREN . expression RPAREN statement
    (90) ifStatement -> IF LPAREN . expression RPAREN statement ELSE statement
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 125
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 91

    (72) primary -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 126


state 92

    (91) forStatement -> FOR LPAREN . forLoopParts RPAREN statement
    (92) forLoopParts -> . forInitializerStatement PCOMMA
    (93) forLoopParts -> . forInitializerStatement PCOMMA expressionList
    (94) forLoopParts -> . forInitializerStatement expression PCOMMA
    (95) forLoopParts -> . forInitializerStatement expression PCOMMA expressionList
    (96) forInitializerStatement -> . localVariableDeclaration
    (97) forInitializerStatement -> . PCOMMA
    (98) forInitializerStatement -> . expression PCOMMA
    (39) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (46) expression -> . orExpression
    (40) initializedVariableDeclaration -> . declaredIdentifier
    (41) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (42) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (43) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    PCOMMA          shift and go to state 129
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    LPAREN          shift and go to state 44

    forLoopParts                   shift and go to state 127
    forInitializerStatement        shift and go to state 128
    expression                     shift and go to state 130
    localVariableDeclaration       shift and go to state 131
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72

state 93

    (99) whileStatement -> WHILE LPAREN . expression RPAREN statement
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 132
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 94

    (100) doStatement -> DO statement . WHILE LPAREN expression RPAREN PCOMMA

    WHILE           shift and go to state 133


state 95

    (101) switchStatement -> SWITCH LPAREN . expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> SWITCH LPAREN . expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 134
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 96

    (107) breakStatement -> BREAK PCOMMA .

    LCHAV           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    PCOMMA          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    RETURN          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    IF              reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    FOR             reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    WHILE           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    DO              reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    SWITCH          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    BREAK           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    ID              reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    NUMBER          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    FLOAT           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    LITERAL_STRING  reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    VAR             reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    INT             reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    CHAR            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    STRING          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    VOID            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    BOOLEAN         reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    TRUE            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    FALSE           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    LCON            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    LPAREN          reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    RCHAV           reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    CASE            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    DEFAULT         reduce using rule 107 (breakStatement -> BREAK PCOMMA .)
    ELSE            reduce using rule 107 (breakStatement -> BREAK PCOMMA .)


state 97

    (108) breakStatement -> BREAK ID . PCOMMA

    PCOMMA          shift and go to state 135


state 98

    (81) listLiteralID -> ID listLiteral .

    ATRIBUIR        reduce using rule 81 (listLiteralID -> ID listLiteral .)
    SOMASOMA        reduce using rule 81 (listLiteralID -> ID listLiteral .)
    SUBSUB          reduce using rule 81 (listLiteralID -> ID listLiteral .)
    VEZES           reduce using rule 81 (listLiteralID -> ID listLiteral .)
    DIVIDIR         reduce using rule 81 (listLiteralID -> ID listLiteral .)
    RESTO           reduce using rule 81 (listLiteralID -> ID listLiteral .)
    SOMA            reduce using rule 81 (listLiteralID -> ID listLiteral .)
    SUBTRAIR        reduce using rule 81 (listLiteralID -> ID listLiteral .)
    MENOR           reduce using rule 81 (listLiteralID -> ID listLiteral .)
    MAIOR           reduce using rule 81 (listLiteralID -> ID listLiteral .)
    MENORI          reduce using rule 81 (listLiteralID -> ID listLiteral .)
    MAIORI          reduce using rule 81 (listLiteralID -> ID listLiteral .)
    IGUAL           reduce using rule 81 (listLiteralID -> ID listLiteral .)
    NEG             reduce using rule 81 (listLiteralID -> ID listLiteral .)
    AND             reduce using rule 81 (listLiteralID -> ID listLiteral .)
    OR              reduce using rule 81 (listLiteralID -> ID listLiteral .)
    PCOMMA          reduce using rule 81 (listLiteralID -> ID listLiteral .)
    COMMA           reduce using rule 81 (listLiteralID -> ID listLiteral .)
    RPAREN          reduce using rule 81 (listLiteralID -> ID listLiteral .)
    RCON            reduce using rule 81 (listLiteralID -> ID listLiteral .)
    PONTOS          reduce using rule 81 (listLiteralID -> ID listLiteral .)


state 99

    (48) orExpression -> orExpression OR . andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    andExpression                  shift and go to state 136
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 100

    (41) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR . expression
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 137
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 101

    (42) initializedVariableDeclaration -> literal ATRIBUIR . expression
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    literal                        shift and go to state 80
    expression                     shift and go to state 138
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 102

    (50) andExpression -> andExpression AND . equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    equalityExpression             shift and go to state 139
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 103

    (7) declaredIdentifier -> type ID .
    (16) functionSignature -> type ID . formalParameterList
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    ATRIBUIR        reduce using rule 7 (declaredIdentifier -> type ID .)
    PCOMMA          reduce using rule 7 (declaredIdentifier -> type ID .)
    COMMA           reduce using rule 7 (declaredIdentifier -> type ID .)
    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 81

state 104

    (52) equalityExpression -> equalityExpression IGUAL . relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    relacionalExpression           shift and go to state 140
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 105

    (53) equalityExpression -> equalityExpression NEG . relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    relacionalExpression           shift and go to state 141
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 106

    (80) listLiteral -> LCON expressionList . RCON

    RCON            shift and go to state 142


state 107

    (84) expressionList -> expression . COMMA
    (85) expressionList -> expression .
    (86) expressionList -> expression . COMMA expressionList

    COMMA           shift and go to state 143
    RCON            reduce using rule 85 (expressionList -> expression .)
    RPAREN          reduce using rule 85 (expressionList -> expression .)


state 108

    (55) relacionalExpression -> relacionalExpression MENOR . addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    addExpression                  shift and go to state 144
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 109

    (56) relacionalExpression -> relacionalExpression MAIOR . addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    addExpression                  shift and go to state 145
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 110

    (57) relacionalExpression -> relacionalExpression MENORI . addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    addExpression                  shift and go to state 146
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 111

    (58) relacionalExpression -> relacionalExpression MAIORI . addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    addExpression                  shift and go to state 147
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 112

    (60) addExpression -> addExpression SOMA . multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    multExpression                 shift and go to state 148
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 113

    (61) addExpression -> addExpression SUBTRAIR . multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    multExpression                 shift and go to state 149
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 114

    (63) multExpression -> multExpression VEZES . unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    unaryExpression                shift and go to state 150
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 115

    (64) multExpression -> multExpression DIVIDIR . unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    unaryExpression                shift and go to state 151
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 116

    (65) multExpression -> multExpression RESTO . unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    unaryExpression                shift and go to state 152
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 117

    (68) unaryExpression -> unaryExpression SOMASOMA .

    SOMASOMA        reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    SUBSUB          reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    VEZES           reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    DIVIDIR         reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    RESTO           reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    SOMA            reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    SUBTRAIR        reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    MENOR           reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    MAIOR           reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    MENORI          reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    MAIORI          reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    IGUAL           reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    NEG             reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    AND             reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    OR              reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    PCOMMA          reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    COMMA           reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    RPAREN          reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    RCON            reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)
    PONTOS          reduce using rule 68 (unaryExpression -> unaryExpression SOMASOMA .)


state 118

    (69) unaryExpression -> unaryExpression SUBSUB .

    SOMASOMA        reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    SUBSUB          reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    VEZES           reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    DIVIDIR         reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    RESTO           reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    SOMA            reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    SUBTRAIR        reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    MENOR           reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    MAIOR           reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    MENORI          reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    MAIORI          reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    IGUAL           reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    NEG             reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    AND             reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    OR              reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    PCOMMA          reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    COMMA           reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    RPAREN          reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    RCON            reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)
    PONTOS          reduce using rule 69 (unaryExpression -> unaryExpression SUBSUB .)


state 119

    (18) formalParameterList -> LPAREN normalFormalParameters RPAREN .

    LCHAV           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SOMASOMA        reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SUBSUB          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    VEZES           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    DIVIDIR         reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RESTO           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SOMA            reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    SUBTRAIR        reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MENOR           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MAIOR           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MENORI          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    MAIORI          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    IGUAL           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    NEG             reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    AND             reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    OR              reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    PCOMMA          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    COMMA           reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RPAREN          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    RCON            reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)
    PONTOS          reduce using rule 18 (formalParameterList -> LPAREN normalFormalParameters RPAREN .)


state 120

    (20) normalFormalParameters -> simpleFormalParameter COMMA . normalFormalParameters
    (19) normalFormalParameters -> . simpleFormalParameter
    (20) normalFormalParameters -> . simpleFormalParameter COMMA normalFormalParameters
    (21) simpleFormalParameter -> . type ID
    (22) simpleFormalParameter -> . expression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON

    VAR             shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 79
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65

    simpleFormalParameter          shift and go to state 75
    normalFormalParameters         shift and go to state 153
    type                           shift and go to state 76
    expression                     shift and go to state 78
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58

state 121

    (21) simpleFormalParameter -> type ID .
    (16) functionSignature -> type ID . formalParameterList
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    COMMA           reduce using rule 21 (simpleFormalParameter -> type ID .)
    RPAREN          reduce using rule 21 (simpleFormalParameter -> type ID .)
    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 81

state 122

    (43) initializedVariableDeclaration -> initializedVariableDeclaration COMMA ID .

    PCOMMA          reduce using rule 43 (initializedVariableDeclaration -> initializedVariableDeclaration COMMA ID .)
    COMMA           reduce using rule 43 (initializedVariableDeclaration -> initializedVariableDeclaration COMMA ID .)


state 123

    (88) returnStatement -> RETURN expression PCOMMA .

    LCHAV           reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    PCOMMA          reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    RETURN          reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    IF              reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    FOR             reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    WHILE           reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    DO              reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    SWITCH          reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    BREAK           reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    ID              reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    NUMBER          reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    FLOAT           reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    LITERAL_STRING  reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    VAR             reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    INT             reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    CHAR            reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    STRING          reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    VOID            reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    BOOLEAN         reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    TRUE            reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    FALSE           reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    LCON            reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    LPAREN          reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    RCHAV           reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    CASE            reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    DEFAULT         reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)
    ELSE            reduce using rule 88 (returnStatement -> RETURN expression PCOMMA .)


state 124

    (16) functionSignature -> type ID . formalParameterList
    (17) formalParameterList -> . LPAREN RPAREN
    (18) formalParameterList -> . LPAREN normalFormalParameters RPAREN

    LPAREN          shift and go to state 20

    formalParameterList            shift and go to state 81

state 125

    (89) ifStatement -> IF LPAREN expression . RPAREN statement
    (90) ifStatement -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 154


state 126

    (72) primary -> LPAREN expression RPAREN .

    SOMASOMA        reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    SUBSUB          reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    VEZES           reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    DIVIDIR         reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    RESTO           reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    SOMA            reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    SUBTRAIR        reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    MENORI          reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    MAIORI          reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    IGUAL           reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    NEG             reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    AND             reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    OR              reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    PCOMMA          reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    RCON            reduce using rule 72 (primary -> LPAREN expression RPAREN .)
    PONTOS          reduce using rule 72 (primary -> LPAREN expression RPAREN .)


state 127

    (91) forStatement -> FOR LPAREN forLoopParts . RPAREN statement

    RPAREN          shift and go to state 155


state 128

    (92) forLoopParts -> forInitializerStatement . PCOMMA
    (93) forLoopParts -> forInitializerStatement . PCOMMA expressionList
    (94) forLoopParts -> forInitializerStatement . expression PCOMMA
    (95) forLoopParts -> forInitializerStatement . expression PCOMMA expressionList
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    PCOMMA          shift and go to state 156
    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 157
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 129

    (97) forInitializerStatement -> PCOMMA .

    PCOMMA          reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    LPAREN          reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    ID              reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    NUMBER          reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    FLOAT           reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    LITERAL_STRING  reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    TRUE            reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    FALSE           reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    LCON            reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    VAR             reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    INT             reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    CHAR            reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    STRING          reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    VOID            reduce using rule 97 (forInitializerStatement -> PCOMMA .)
    BOOLEAN         reduce using rule 97 (forInitializerStatement -> PCOMMA .)


state 130

    (98) forInitializerStatement -> expression . PCOMMA

    PCOMMA          shift and go to state 158


state 131

    (96) forInitializerStatement -> localVariableDeclaration .

    PCOMMA          reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    LPAREN          reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    ID              reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    NUMBER          reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    FLOAT           reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    LITERAL_STRING  reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    TRUE            reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    FALSE           reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    LCON            reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    VAR             reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    INT             reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    CHAR            reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    STRING          reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    VOID            reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)
    BOOLEAN         reduce using rule 96 (forInitializerStatement -> localVariableDeclaration .)


state 132

    (99) whileStatement -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 159


state 133

    (100) doStatement -> DO statement WHILE . LPAREN expression RPAREN PCOMMA

    LPAREN          shift and go to state 160


state 134

    (101) switchStatement -> SWITCH LPAREN expression . RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> SWITCH LPAREN expression . RPAREN LCHAV switchCaseRepetition defaultCase RCHAV

    RPAREN          shift and go to state 161


state 135

    (108) breakStatement -> BREAK ID PCOMMA .

    LCHAV           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    PCOMMA          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    RETURN          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    IF              reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    FOR             reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    WHILE           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    DO              reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    SWITCH          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    BREAK           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    ID              reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    NUMBER          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    FLOAT           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    LITERAL_STRING  reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    VAR             reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    INT             reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    CHAR            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    STRING          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    VOID            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    BOOLEAN         reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    TRUE            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    FALSE           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    LCON            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    LPAREN          reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    RCHAV           reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    CASE            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    DEFAULT         reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)
    ELSE            reduce using rule 108 (breakStatement -> BREAK ID PCOMMA .)


state 136

    (48) orExpression -> orExpression OR andExpression .
    (50) andExpression -> andExpression . AND equalityExpression

    OR              reduce using rule 48 (orExpression -> orExpression OR andExpression .)
    PCOMMA          reduce using rule 48 (orExpression -> orExpression OR andExpression .)
    COMMA           reduce using rule 48 (orExpression -> orExpression OR andExpression .)
    RPAREN          reduce using rule 48 (orExpression -> orExpression OR andExpression .)
    RCON            reduce using rule 48 (orExpression -> orExpression OR andExpression .)
    PONTOS          reduce using rule 48 (orExpression -> orExpression OR andExpression .)
    AND             shift and go to state 102


state 137

    (41) initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression .

    PCOMMA          reduce using rule 41 (initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression .)
    COMMA           reduce using rule 41 (initializedVariableDeclaration -> declaredIdentifier ATRIBUIR expression .)


state 138

    (42) initializedVariableDeclaration -> literal ATRIBUIR expression .

    PCOMMA          reduce using rule 42 (initializedVariableDeclaration -> literal ATRIBUIR expression .)
    COMMA           reduce using rule 42 (initializedVariableDeclaration -> literal ATRIBUIR expression .)


state 139

    (50) andExpression -> andExpression AND equalityExpression .
    (52) equalityExpression -> equalityExpression . IGUAL relacionalExpression
    (53) equalityExpression -> equalityExpression . NEG relacionalExpression

    AND             reduce using rule 50 (andExpression -> andExpression AND equalityExpression .)
    OR              reduce using rule 50 (andExpression -> andExpression AND equalityExpression .)
    PCOMMA          reduce using rule 50 (andExpression -> andExpression AND equalityExpression .)
    COMMA           reduce using rule 50 (andExpression -> andExpression AND equalityExpression .)
    RPAREN          reduce using rule 50 (andExpression -> andExpression AND equalityExpression .)
    RCON            reduce using rule 50 (andExpression -> andExpression AND equalityExpression .)
    PONTOS          reduce using rule 50 (andExpression -> andExpression AND equalityExpression .)
    IGUAL           shift and go to state 104
    NEG             shift and go to state 105


state 140

    (52) equalityExpression -> equalityExpression IGUAL relacionalExpression .
    (55) relacionalExpression -> relacionalExpression . MENOR addExpression
    (56) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (57) relacionalExpression -> relacionalExpression . MENORI addExpression
    (58) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 52 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    NEG             reduce using rule 52 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    AND             reduce using rule 52 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    OR              reduce using rule 52 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    PCOMMA          reduce using rule 52 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    COMMA           reduce using rule 52 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    RPAREN          reduce using rule 52 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    RCON            reduce using rule 52 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    PONTOS          reduce using rule 52 (equalityExpression -> equalityExpression IGUAL relacionalExpression .)
    MENOR           shift and go to state 108
    MAIOR           shift and go to state 109
    MENORI          shift and go to state 110
    MAIORI          shift and go to state 111


state 141

    (53) equalityExpression -> equalityExpression NEG relacionalExpression .
    (55) relacionalExpression -> relacionalExpression . MENOR addExpression
    (56) relacionalExpression -> relacionalExpression . MAIOR addExpression
    (57) relacionalExpression -> relacionalExpression . MENORI addExpression
    (58) relacionalExpression -> relacionalExpression . MAIORI addExpression

    IGUAL           reduce using rule 53 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    NEG             reduce using rule 53 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    AND             reduce using rule 53 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    OR              reduce using rule 53 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    PCOMMA          reduce using rule 53 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    COMMA           reduce using rule 53 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    RPAREN          reduce using rule 53 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    RCON            reduce using rule 53 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    PONTOS          reduce using rule 53 (equalityExpression -> equalityExpression NEG relacionalExpression .)
    MENOR           shift and go to state 108
    MAIOR           shift and go to state 109
    MENORI          shift and go to state 110
    MAIORI          shift and go to state 111


state 142

    (80) listLiteral -> LCON expressionList RCON .

    ATRIBUIR        reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    SOMASOMA        reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    SUBSUB          reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    VEZES           reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    DIVIDIR         reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    RESTO           reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    SOMA            reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    SUBTRAIR        reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    MENOR           reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    MAIOR           reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    MENORI          reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    MAIORI          reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    IGUAL           reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    NEG             reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    AND             reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    OR              reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    PCOMMA          reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    COMMA           reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    RPAREN          reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    RCON            reduce using rule 80 (listLiteral -> LCON expressionList RCON .)
    PONTOS          reduce using rule 80 (listLiteral -> LCON expressionList RCON .)


state 143

    (84) expressionList -> expression COMMA .
    (86) expressionList -> expression COMMA . expressionList
    (84) expressionList -> . expression COMMA
    (85) expressionList -> . expression
    (86) expressionList -> . expression COMMA expressionList
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    RCON            reduce using rule 84 (expressionList -> expression COMMA .)
    RPAREN          reduce using rule 84 (expressionList -> expression COMMA .)
    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 107
    expressionList                 shift and go to state 162
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 144

    (55) relacionalExpression -> relacionalExpression MENOR addExpression .
    (60) addExpression -> addExpression . SOMA multExpression
    (61) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MAIOR           reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MENORI          reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    MAIORI          reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    IGUAL           reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    NEG             reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    AND             reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    OR              reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    PCOMMA          reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    COMMA           reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    RPAREN          reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    RCON            reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    PONTOS          reduce using rule 55 (relacionalExpression -> relacionalExpression MENOR addExpression .)
    SOMA            shift and go to state 112
    SUBTRAIR        shift and go to state 113


state 145

    (56) relacionalExpression -> relacionalExpression MAIOR addExpression .
    (60) addExpression -> addExpression . SOMA multExpression
    (61) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MAIOR           reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MENORI          reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    MAIORI          reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    IGUAL           reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    NEG             reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    AND             reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    OR              reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    PCOMMA          reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    COMMA           reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    RPAREN          reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    RCON            reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    PONTOS          reduce using rule 56 (relacionalExpression -> relacionalExpression MAIOR addExpression .)
    SOMA            shift and go to state 112
    SUBTRAIR        shift and go to state 113


state 146

    (57) relacionalExpression -> relacionalExpression MENORI addExpression .
    (60) addExpression -> addExpression . SOMA multExpression
    (61) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MAIOR           reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MENORI          reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    MAIORI          reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    IGUAL           reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    NEG             reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    AND             reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    OR              reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    PCOMMA          reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    COMMA           reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    RPAREN          reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    RCON            reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    PONTOS          reduce using rule 57 (relacionalExpression -> relacionalExpression MENORI addExpression .)
    SOMA            shift and go to state 112
    SUBTRAIR        shift and go to state 113


state 147

    (58) relacionalExpression -> relacionalExpression MAIORI addExpression .
    (60) addExpression -> addExpression . SOMA multExpression
    (61) addExpression -> addExpression . SUBTRAIR multExpression

    MENOR           reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MAIOR           reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MENORI          reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    MAIORI          reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    IGUAL           reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    NEG             reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    AND             reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    OR              reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    PCOMMA          reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    COMMA           reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    RPAREN          reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    RCON            reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    PONTOS          reduce using rule 58 (relacionalExpression -> relacionalExpression MAIORI addExpression .)
    SOMA            shift and go to state 112
    SUBTRAIR        shift and go to state 113


state 148

    (60) addExpression -> addExpression SOMA multExpression .
    (63) multExpression -> multExpression . VEZES unaryExpression
    (64) multExpression -> multExpression . DIVIDIR unaryExpression
    (65) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    SUBTRAIR        reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    MENOR           reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    MAIOR           reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    MENORI          reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    MAIORI          reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    IGUAL           reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    NEG             reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    AND             reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    OR              reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    PCOMMA          reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    COMMA           reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    RPAREN          reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    RCON            reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    PONTOS          reduce using rule 60 (addExpression -> addExpression SOMA multExpression .)
    VEZES           shift and go to state 114
    DIVIDIR         shift and go to state 115
    RESTO           shift and go to state 116


state 149

    (61) addExpression -> addExpression SUBTRAIR multExpression .
    (63) multExpression -> multExpression . VEZES unaryExpression
    (64) multExpression -> multExpression . DIVIDIR unaryExpression
    (65) multExpression -> multExpression . RESTO unaryExpression

    SOMA            reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    SUBTRAIR        reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    MENOR           reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    MAIOR           reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    MENORI          reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    MAIORI          reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    IGUAL           reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    NEG             reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    AND             reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    OR              reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    PCOMMA          reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    COMMA           reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    RPAREN          reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    RCON            reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    PONTOS          reduce using rule 61 (addExpression -> addExpression SUBTRAIR multExpression .)
    VEZES           shift and go to state 114
    DIVIDIR         shift and go to state 115
    RESTO           shift and go to state 116


state 150

    (63) multExpression -> multExpression VEZES unaryExpression .
    (68) unaryExpression -> unaryExpression . SOMASOMA
    (69) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    DIVIDIR         reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    RESTO           reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    SOMA            reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    SUBTRAIR        reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    MENOR           reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    MAIOR           reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    MENORI          reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    MAIORI          reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    IGUAL           reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    NEG             reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    AND             reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    OR              reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    PCOMMA          reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    COMMA           reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    RPAREN          reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    RCON            reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    PONTOS          reduce using rule 63 (multExpression -> multExpression VEZES unaryExpression .)
    SOMASOMA        shift and go to state 117
    SUBSUB          shift and go to state 118


state 151

    (64) multExpression -> multExpression DIVIDIR unaryExpression .
    (68) unaryExpression -> unaryExpression . SOMASOMA
    (69) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    DIVIDIR         reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RESTO           reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SOMA            reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SUBTRAIR        reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MENOR           reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MAIOR           reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MENORI          reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    MAIORI          reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    IGUAL           reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    NEG             reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    AND             reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    OR              reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    PCOMMA          reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    COMMA           reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RPAREN          reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    RCON            reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    PONTOS          reduce using rule 64 (multExpression -> multExpression DIVIDIR unaryExpression .)
    SOMASOMA        shift and go to state 117
    SUBSUB          shift and go to state 118


state 152

    (65) multExpression -> multExpression RESTO unaryExpression .
    (68) unaryExpression -> unaryExpression . SOMASOMA
    (69) unaryExpression -> unaryExpression . SUBSUB

    VEZES           reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    DIVIDIR         reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    RESTO           reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    SOMA            reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    SUBTRAIR        reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    MENOR           reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    MAIOR           reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    MENORI          reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    MAIORI          reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    IGUAL           reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    NEG             reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    AND             reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    OR              reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    PCOMMA          reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    COMMA           reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    RPAREN          reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    RCON            reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    PONTOS          reduce using rule 65 (multExpression -> multExpression RESTO unaryExpression .)
    SOMASOMA        shift and go to state 117
    SUBSUB          shift and go to state 118


state 153

    (20) normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters .

    RPAREN          reduce using rule 20 (normalFormalParameters -> simpleFormalParameter COMMA normalFormalParameters .)


state 154

    (89) ifStatement -> IF LPAREN expression RPAREN . statement
    (90) ifStatement -> IF LPAREN expression RPAREN . statement ELSE statement
    (28) statement -> . nonLabelledStatement
    (29) nonLabelledStatement -> . block
    (30) nonLabelledStatement -> . expressionStatement
    (31) nonLabelledStatement -> . localVariableDeclaration
    (32) nonLabelledStatement -> . returnStatement
    (33) nonLabelledStatement -> . ifStatement
    (34) nonLabelledStatement -> . forStatement
    (35) nonLabelledStatement -> . whileStatement
    (36) nonLabelledStatement -> . doStatement
    (37) nonLabelledStatement -> . switchStatement
    (38) nonLabelledStatement -> . breakStatement
    (24) block -> . LCHAV statements RCHAV
    (25) block -> . LCHAV RCHAV
    (44) expressionStatement -> . PCOMMA
    (45) expressionStatement -> . expression PCOMMA
    (39) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (87) returnStatement -> . RETURN PCOMMA
    (88) returnStatement -> . RETURN expression PCOMMA
    (89) ifStatement -> . IF LPAREN expression RPAREN statement
    (90) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (91) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (99) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (100) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (46) expression -> . orExpression
    (40) initializedVariableDeclaration -> . declaredIdentifier
    (41) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (42) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (43) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    LPAREN          shift and go to state 44

    expression                     shift and go to state 40
    statement                      shift and go to state 163
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72

state 155

    (91) forStatement -> FOR LPAREN forLoopParts RPAREN . statement
    (28) statement -> . nonLabelledStatement
    (29) nonLabelledStatement -> . block
    (30) nonLabelledStatement -> . expressionStatement
    (31) nonLabelledStatement -> . localVariableDeclaration
    (32) nonLabelledStatement -> . returnStatement
    (33) nonLabelledStatement -> . ifStatement
    (34) nonLabelledStatement -> . forStatement
    (35) nonLabelledStatement -> . whileStatement
    (36) nonLabelledStatement -> . doStatement
    (37) nonLabelledStatement -> . switchStatement
    (38) nonLabelledStatement -> . breakStatement
    (24) block -> . LCHAV statements RCHAV
    (25) block -> . LCHAV RCHAV
    (44) expressionStatement -> . PCOMMA
    (45) expressionStatement -> . expression PCOMMA
    (39) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (87) returnStatement -> . RETURN PCOMMA
    (88) returnStatement -> . RETURN expression PCOMMA
    (89) ifStatement -> . IF LPAREN expression RPAREN statement
    (90) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (91) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (99) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (100) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (46) expression -> . orExpression
    (40) initializedVariableDeclaration -> . declaredIdentifier
    (41) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (42) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (43) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    LPAREN          shift and go to state 44

    statement                      shift and go to state 164
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72

state 156

    (92) forLoopParts -> forInitializerStatement PCOMMA .
    (93) forLoopParts -> forInitializerStatement PCOMMA . expressionList
    (84) expressionList -> . expression COMMA
    (85) expressionList -> . expression
    (86) expressionList -> . expression COMMA expressionList
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    RPAREN          reduce using rule 92 (forLoopParts -> forInitializerStatement PCOMMA .)
    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expressionList                 shift and go to state 165
    expression                     shift and go to state 107
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 157

    (94) forLoopParts -> forInitializerStatement expression . PCOMMA
    (95) forLoopParts -> forInitializerStatement expression . PCOMMA expressionList

    PCOMMA          shift and go to state 166


state 158

    (98) forInitializerStatement -> expression PCOMMA .

    PCOMMA          reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    LPAREN          reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    ID              reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    NUMBER          reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    FLOAT           reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    LITERAL_STRING  reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    TRUE            reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    FALSE           reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    LCON            reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    VAR             reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    INT             reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    CHAR            reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    STRING          reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    VOID            reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)
    BOOLEAN         reduce using rule 98 (forInitializerStatement -> expression PCOMMA .)


state 159

    (99) whileStatement -> WHILE LPAREN expression RPAREN . statement
    (28) statement -> . nonLabelledStatement
    (29) nonLabelledStatement -> . block
    (30) nonLabelledStatement -> . expressionStatement
    (31) nonLabelledStatement -> . localVariableDeclaration
    (32) nonLabelledStatement -> . returnStatement
    (33) nonLabelledStatement -> . ifStatement
    (34) nonLabelledStatement -> . forStatement
    (35) nonLabelledStatement -> . whileStatement
    (36) nonLabelledStatement -> . doStatement
    (37) nonLabelledStatement -> . switchStatement
    (38) nonLabelledStatement -> . breakStatement
    (24) block -> . LCHAV statements RCHAV
    (25) block -> . LCHAV RCHAV
    (44) expressionStatement -> . PCOMMA
    (45) expressionStatement -> . expression PCOMMA
    (39) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (87) returnStatement -> . RETURN PCOMMA
    (88) returnStatement -> . RETURN expression PCOMMA
    (89) ifStatement -> . IF LPAREN expression RPAREN statement
    (90) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (91) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (99) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (100) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (46) expression -> . orExpression
    (40) initializedVariableDeclaration -> . declaredIdentifier
    (41) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (42) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (43) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    LPAREN          shift and go to state 44

    expression                     shift and go to state 40
    statement                      shift and go to state 167
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72

state 160

    (100) doStatement -> DO statement WHILE LPAREN . expression RPAREN PCOMMA
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 168
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 161

    (101) switchStatement -> SWITCH LPAREN expression RPAREN . LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> SWITCH LPAREN expression RPAREN . LCHAV switchCaseRepetition defaultCase RCHAV

    LCHAV           shift and go to state 169


state 162

    (86) expressionList -> expression COMMA expressionList .

    RCON            reduce using rule 86 (expressionList -> expression COMMA expressionList .)
    RPAREN          reduce using rule 86 (expressionList -> expression COMMA expressionList .)


state 163

    (89) ifStatement -> IF LPAREN expression RPAREN statement .
    (90) ifStatement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LCHAV           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    PCOMMA          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LITERAL_STRING  reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    BOOLEAN         reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LCON            reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    RCHAV           reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 170

  ! ELSE            [ reduce using rule 89 (ifStatement -> IF LPAREN expression RPAREN statement .) ]


state 164

    (91) forStatement -> FOR LPAREN forLoopParts RPAREN statement .

    LCHAV           reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    PCOMMA          reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    RETURN          reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    IF              reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FOR             reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    WHILE           reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    DO              reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    SWITCH          reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    BREAK           reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    ID              reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    NUMBER          reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FLOAT           reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LITERAL_STRING  reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    VAR             reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    INT             reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    CHAR            reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    STRING          reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    VOID            reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    BOOLEAN         reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    TRUE            reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    FALSE           reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LCON            reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    LPAREN          reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    RCHAV           reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    CASE            reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    DEFAULT         reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)
    ELSE            reduce using rule 91 (forStatement -> FOR LPAREN forLoopParts RPAREN statement .)


state 165

    (93) forLoopParts -> forInitializerStatement PCOMMA expressionList .

    RPAREN          reduce using rule 93 (forLoopParts -> forInitializerStatement PCOMMA expressionList .)


state 166

    (94) forLoopParts -> forInitializerStatement expression PCOMMA .
    (95) forLoopParts -> forInitializerStatement expression PCOMMA . expressionList
    (84) expressionList -> . expression COMMA
    (85) expressionList -> . expression
    (86) expressionList -> . expression COMMA expressionList
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    RPAREN          reduce using rule 94 (forLoopParts -> forInitializerStatement expression PCOMMA .)
    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 107
    expressionList                 shift and go to state 171
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 167

    (99) whileStatement -> WHILE LPAREN expression RPAREN statement .

    LCHAV           reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    PCOMMA          reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LITERAL_STRING  reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    VAR             reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    BOOLEAN         reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LCON            reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    RCHAV           reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 99 (whileStatement -> WHILE LPAREN expression RPAREN statement .)


state 168

    (100) doStatement -> DO statement WHILE LPAREN expression . RPAREN PCOMMA

    RPAREN          shift and go to state 172


state 169

    (101) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV . switchCaseRepetition RCHAV
    (102) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV . switchCaseRepetition defaultCase RCHAV
    (103) switchCaseRepetition -> . switchCase switchCaseRepetition
    (104) switchCaseRepetition -> . switchCase
    (105) switchCase -> . CASE expression PONTOS statements

    CASE            shift and go to state 175

    switchCaseRepetition           shift and go to state 173
    switchCase                     shift and go to state 174

state 170

    (90) ifStatement -> IF LPAREN expression RPAREN statement ELSE . statement
    (28) statement -> . nonLabelledStatement
    (29) nonLabelledStatement -> . block
    (30) nonLabelledStatement -> . expressionStatement
    (31) nonLabelledStatement -> . localVariableDeclaration
    (32) nonLabelledStatement -> . returnStatement
    (33) nonLabelledStatement -> . ifStatement
    (34) nonLabelledStatement -> . forStatement
    (35) nonLabelledStatement -> . whileStatement
    (36) nonLabelledStatement -> . doStatement
    (37) nonLabelledStatement -> . switchStatement
    (38) nonLabelledStatement -> . breakStatement
    (24) block -> . LCHAV statements RCHAV
    (25) block -> . LCHAV RCHAV
    (44) expressionStatement -> . PCOMMA
    (45) expressionStatement -> . expression PCOMMA
    (39) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (87) returnStatement -> . RETURN PCOMMA
    (88) returnStatement -> . RETURN expression PCOMMA
    (89) ifStatement -> . IF LPAREN expression RPAREN statement
    (90) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (91) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (99) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (100) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (46) expression -> . orExpression
    (40) initializedVariableDeclaration -> . declaredIdentifier
    (41) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (42) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (43) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    LPAREN          shift and go to state 44

    expression                     shift and go to state 40
    statement                      shift and go to state 176
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72

state 171

    (95) forLoopParts -> forInitializerStatement expression PCOMMA expressionList .

    RPAREN          reduce using rule 95 (forLoopParts -> forInitializerStatement expression PCOMMA expressionList .)


state 172

    (100) doStatement -> DO statement WHILE LPAREN expression RPAREN . PCOMMA

    PCOMMA          shift and go to state 177


state 173

    (101) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition . RCHAV
    (102) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition . defaultCase RCHAV
    (106) defaultCase -> . DEFAULT PONTOS statements

    RCHAV           shift and go to state 178
    DEFAULT         shift and go to state 180

    defaultCase                    shift and go to state 179

state 174

    (103) switchCaseRepetition -> switchCase . switchCaseRepetition
    (104) switchCaseRepetition -> switchCase .
    (103) switchCaseRepetition -> . switchCase switchCaseRepetition
    (104) switchCaseRepetition -> . switchCase
    (105) switchCase -> . CASE expression PONTOS statements

    RCHAV           reduce using rule 104 (switchCaseRepetition -> switchCase .)
    DEFAULT         reduce using rule 104 (switchCaseRepetition -> switchCase .)
    CASE            shift and go to state 175

    switchCase                     shift and go to state 174
    switchCaseRepetition           shift and go to state 181

state 175

    (105) switchCase -> CASE . expression PONTOS statements
    (46) expression -> . orExpression
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN

    LPAREN          shift and go to state 44
    ID              shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13

    expression                     shift and go to state 182
    orExpression                   shift and go to state 51
    andExpression                  shift and go to state 54
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    literal                        shift and go to state 80
    functionSignature              shift and go to state 72
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    type                           shift and go to state 89

state 176

    (90) ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .

    LCHAV           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PCOMMA          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LITERAL_STRING  reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BOOLEAN         reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCON            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RCHAV           reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 90 (ifStatement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 177

    (100) doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .

    LCHAV           reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    PCOMMA          reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    RETURN          reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    IF              reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FOR             reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    WHILE           reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    DO              reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    SWITCH          reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    BREAK           reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    ID              reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    NUMBER          reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FLOAT           reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LITERAL_STRING  reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    VAR             reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    INT             reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    CHAR            reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    STRING          reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    VOID            reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    BOOLEAN         reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    TRUE            reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    FALSE           reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LCON            reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    LPAREN          reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    RCHAV           reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    CASE            reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    DEFAULT         reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)
    ELSE            reduce using rule 100 (doStatement -> DO statement WHILE LPAREN expression RPAREN PCOMMA .)


state 178

    (101) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .

    LCHAV           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    PCOMMA          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    RETURN          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    IF              reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FOR             reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    WHILE           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    DO              reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    SWITCH          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    BREAK           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    ID              reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    NUMBER          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FLOAT           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LITERAL_STRING  reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    VAR             reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    INT             reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    CHAR            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    STRING          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    VOID            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    BOOLEAN         reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    TRUE            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    FALSE           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LCON            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    LPAREN          reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    RCHAV           reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    CASE            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    DEFAULT         reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)
    ELSE            reduce using rule 101 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV .)


state 179

    (102) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase . RCHAV

    RCHAV           shift and go to state 183


state 180

    (106) defaultCase -> DEFAULT . PONTOS statements

    PONTOS          shift and go to state 184


state 181

    (103) switchCaseRepetition -> switchCase switchCaseRepetition .

    RCHAV           reduce using rule 103 (switchCaseRepetition -> switchCase switchCaseRepetition .)
    DEFAULT         reduce using rule 103 (switchCaseRepetition -> switchCase switchCaseRepetition .)


state 182

    (105) switchCase -> CASE expression . PONTOS statements

    PONTOS          shift and go to state 185


state 183

    (102) switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .

    LCHAV           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    PCOMMA          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    RETURN          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    IF              reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FOR             reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    WHILE           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    DO              reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    SWITCH          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    BREAK           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    ID              reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    NUMBER          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FLOAT           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LITERAL_STRING  reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    VAR             reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    INT             reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    CHAR            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    STRING          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    VOID            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    BOOLEAN         reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    TRUE            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    FALSE           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LCON            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    LPAREN          reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    RCHAV           reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    CASE            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    DEFAULT         reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)
    ELSE            reduce using rule 102 (switchStatement -> SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV .)


state 184

    (106) defaultCase -> DEFAULT PONTOS . statements
    (26) statements -> . statement statements
    (27) statements -> . statement
    (28) statement -> . nonLabelledStatement
    (29) nonLabelledStatement -> . block
    (30) nonLabelledStatement -> . expressionStatement
    (31) nonLabelledStatement -> . localVariableDeclaration
    (32) nonLabelledStatement -> . returnStatement
    (33) nonLabelledStatement -> . ifStatement
    (34) nonLabelledStatement -> . forStatement
    (35) nonLabelledStatement -> . whileStatement
    (36) nonLabelledStatement -> . doStatement
    (37) nonLabelledStatement -> . switchStatement
    (38) nonLabelledStatement -> . breakStatement
    (24) block -> . LCHAV statements RCHAV
    (25) block -> . LCHAV RCHAV
    (44) expressionStatement -> . PCOMMA
    (45) expressionStatement -> . expression PCOMMA
    (39) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (87) returnStatement -> . RETURN PCOMMA
    (88) returnStatement -> . RETURN expression PCOMMA
    (89) ifStatement -> . IF LPAREN expression RPAREN statement
    (90) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (91) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (99) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (100) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (46) expression -> . orExpression
    (40) initializedVariableDeclaration -> . declaredIdentifier
    (41) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (42) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (43) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    LPAREN          shift and go to state 44

    statements                     shift and go to state 186
    statement                      shift and go to state 27
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    expression                     shift and go to state 40
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72

state 185

    (105) switchCase -> CASE expression PONTOS . statements
    (26) statements -> . statement statements
    (27) statements -> . statement
    (28) statement -> . nonLabelledStatement
    (29) nonLabelledStatement -> . block
    (30) nonLabelledStatement -> . expressionStatement
    (31) nonLabelledStatement -> . localVariableDeclaration
    (32) nonLabelledStatement -> . returnStatement
    (33) nonLabelledStatement -> . ifStatement
    (34) nonLabelledStatement -> . forStatement
    (35) nonLabelledStatement -> . whileStatement
    (36) nonLabelledStatement -> . doStatement
    (37) nonLabelledStatement -> . switchStatement
    (38) nonLabelledStatement -> . breakStatement
    (24) block -> . LCHAV statements RCHAV
    (25) block -> . LCHAV RCHAV
    (44) expressionStatement -> . PCOMMA
    (45) expressionStatement -> . expression PCOMMA
    (39) localVariableDeclaration -> . initializedVariableDeclaration PCOMMA
    (87) returnStatement -> . RETURN PCOMMA
    (88) returnStatement -> . RETURN expression PCOMMA
    (89) ifStatement -> . IF LPAREN expression RPAREN statement
    (90) ifStatement -> . IF LPAREN expression RPAREN statement ELSE statement
    (91) forStatement -> . FOR LPAREN forLoopParts RPAREN statement
    (99) whileStatement -> . WHILE LPAREN expression RPAREN statement
    (100) doStatement -> . DO statement WHILE LPAREN expression RPAREN PCOMMA
    (101) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition RCHAV
    (102) switchStatement -> . SWITCH LPAREN expression RPAREN LCHAV switchCaseRepetition defaultCase RCHAV
    (107) breakStatement -> . BREAK PCOMMA
    (108) breakStatement -> . BREAK ID PCOMMA
    (46) expression -> . orExpression
    (40) initializedVariableDeclaration -> . declaredIdentifier
    (41) initializedVariableDeclaration -> . declaredIdentifier ATRIBUIR expression
    (42) initializedVariableDeclaration -> . literal ATRIBUIR expression
    (43) initializedVariableDeclaration -> . initializedVariableDeclaration COMMA ID
    (47) orExpression -> . andExpression
    (48) orExpression -> . orExpression OR andExpression
    (7) declaredIdentifier -> . type ID
    (73) literal -> . ID
    (74) literal -> . booleanLiteral
    (75) literal -> . listLiteralID
    (76) literal -> . listLiteral
    (77) literal -> . NUMBER
    (78) literal -> . FLOAT
    (79) literal -> . LITERAL_STRING
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression AND equalityExpression
    (8) type -> . VAR
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . CHAR
    (12) type -> . STRING
    (13) type -> . VOID
    (14) type -> . BOOLEAN
    (82) booleanLiteral -> . TRUE
    (83) booleanLiteral -> . FALSE
    (81) listLiteralID -> . ID listLiteral
    (80) listLiteral -> . LCON expressionList RCON
    (51) equalityExpression -> . relacionalExpression
    (52) equalityExpression -> . equalityExpression IGUAL relacionalExpression
    (53) equalityExpression -> . equalityExpression NEG relacionalExpression
    (54) relacionalExpression -> . addExpression
    (55) relacionalExpression -> . relacionalExpression MENOR addExpression
    (56) relacionalExpression -> . relacionalExpression MAIOR addExpression
    (57) relacionalExpression -> . relacionalExpression MENORI addExpression
    (58) relacionalExpression -> . relacionalExpression MAIORI addExpression
    (59) addExpression -> . multExpression
    (60) addExpression -> . addExpression SOMA multExpression
    (61) addExpression -> . addExpression SUBTRAIR multExpression
    (62) multExpression -> . unaryExpression
    (63) multExpression -> . multExpression VEZES unaryExpression
    (64) multExpression -> . multExpression DIVIDIR unaryExpression
    (65) multExpression -> . multExpression RESTO unaryExpression
    (66) unaryExpression -> . primary
    (67) unaryExpression -> . functionCall
    (68) unaryExpression -> . unaryExpression SOMASOMA
    (69) unaryExpression -> . unaryExpression SUBSUB
    (71) primary -> . literal
    (72) primary -> . LPAREN expression RPAREN
    (70) functionCall -> . functionSignature
    (15) functionSignature -> . ID formalParameterList
    (16) functionSignature -> . type ID formalParameterList

    LCHAV           shift and go to state 18
    PCOMMA          shift and go to state 39
    RETURN          shift and go to state 42
    IF              shift and go to state 43
    FOR             shift and go to state 45
    WHILE           shift and go to state 46
    DO              shift and go to state 47
    SWITCH          shift and go to state 48
    BREAK           shift and go to state 49
    ID              shift and go to state 50
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    LITERAL_STRING  shift and go to state 61
    VAR             shift and go to state 7
    INT             shift and go to state 8
    CHAR            shift and go to state 10
    STRING          shift and go to state 11
    VOID            shift and go to state 12
    BOOLEAN         shift and go to state 13
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LCON            shift and go to state 65
    LPAREN          shift and go to state 44

    expression                     shift and go to state 40
    statements                     shift and go to state 187
    statement                      shift and go to state 27
    nonLabelledStatement           shift and go to state 28
    block                          shift and go to state 29
    expressionStatement            shift and go to state 30
    localVariableDeclaration       shift and go to state 31
    returnStatement                shift and go to state 32
    ifStatement                    shift and go to state 33
    forStatement                   shift and go to state 34
    whileStatement                 shift and go to state 35
    doStatement                    shift and go to state 36
    switchStatement                shift and go to state 37
    breakStatement                 shift and go to state 38
    initializedVariableDeclaration shift and go to state 41
    orExpression                   shift and go to state 51
    declaredIdentifier             shift and go to state 52
    literal                        shift and go to state 53
    andExpression                  shift and go to state 54
    type                           shift and go to state 55
    booleanLiteral                 shift and go to state 56
    listLiteralID                  shift and go to state 57
    listLiteral                    shift and go to state 58
    equalityExpression             shift and go to state 62
    relacionalExpression           shift and go to state 66
    addExpression                  shift and go to state 67
    multExpression                 shift and go to state 68
    unaryExpression                shift and go to state 69
    primary                        shift and go to state 70
    functionCall                   shift and go to state 71
    functionSignature              shift and go to state 72

state 186

    (106) defaultCase -> DEFAULT PONTOS statements .

    RCHAV           reduce using rule 106 (defaultCase -> DEFAULT PONTOS statements .)


state 187

    (105) switchCase -> CASE expression PONTOS statements .

    CASE            reduce using rule 105 (switchCase -> CASE expression PONTOS statements .)
    RCHAV           reduce using rule 105 (switchCase -> CASE expression PONTOS statements .)
    DEFAULT         reduce using rule 105 (switchCase -> CASE expression PONTOS statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 163 resolved as shift
